<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Aspose.BarCode</name>
  </assembly>
  <members>
    <member name="T:Aspose.BarCode.Common.Helpers.NamespaceDoc">
      <summary>
            The <b>BarCode.Common.Helpers</b> contains utility classes or wrappers to provide common intermediate functions.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Common.NamespaceDoc">
      <summary>
            The <b>BarCode.Common</b> contains common features and helper tools to maintain the main functionality.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Common.ProcessorSettings">
      <summary>
            ProcessorSettings allow to recognize barcodes with multi-threaded increasing of performance
            </summary>
      <example>
            This sample shows how to use ProcessorSettings to add maximum multi-threaded performnce
            <code> 
            [C#]
            int workerThreads = Environment.ProcessorCount * 2;
            int portThreads = Environment.ProcessorCount * 2;
            System.Threading.ThreadPool.GetMinThreads(out workerThreads, out portThreads);
            System.Threading.ThreadPool.SetMinThreads(Math.Max(workerThreads, Environment.ProcessorCount* 2), portThreads);
            System.Threading.ThreadPool.GetMaxThreads(out workerThreads, out portThreads);
            System.Threading.ThreadPool.SetMaxThreads(Math.Max(workerThreads, Environment.ProcessorCount* 4), portThreads);
            BarCodeReader.ProcessorSettings.MaxAdditionalAllowedThreads = Environment.ProcessorCount* 2;
            
            //this allows to use all cores for single BarCodeReader call
            BarCodeReader.ProcessorSettings.UseAllCores = true;
            //this allows to use current count of cores
            BarCodeReader.ProcessorSettings.UseAllCores = false;
            BarCodeReader.ProcessorSettings.UseOnlyThisCoresCount = Math.Max(1, Environment.ProcessorCount / 2);
            [VB.NET]
            Dim workerThreads As Integer = Environment.ProcessorCount * 2
            Dim portThreads As Integer = Environment.ProcessorCount * 2
            System.Threading.ThreadPool.GetMinThreads(workerThreads, portThreads)
            System.Threading.ThreadPool.SetMinThreads(Math.Max(workerThreads, Environment.ProcessorCount* 2), portThreads)
            System.Threading.ThreadPool.GetMaxThreads(workerThreads, portThreads)
            System.Threading.ThreadPool.SetMaxThreads(Math.Max(workerThreads, Environment.ProcessorCount* 4), portThreads)
            BarCodeReader.ProcessorSettings.MaxAdditionalAllowedThreads = Environment.ProcessorCount* 2
            
            'this allows to use all cores for single BarCodeReader call
            BarCodeReader.ProcessorSettings.UseAllCores = True
            'this allows to use current count of cores
            BarCodeReader.ProcessorSettings.UseAllCores = False
            BarCodeReader.ProcessorSettings.UseOnlyThisCoresCount = Math.Max(1, Environment.ProcessorCount / 2)
            </code></example>
    </member>
    <member name="P:Aspose.BarCode.Common.ProcessorSettings.UseAllCores">
      <summary>
            Is needed to use all cores. 
            </summary>
      <example>
        <code>
            [C#]
            BarCodeReader.ProcessorSettings.UseAllCores = true;
            [VB.NET]
            BarCodeReader.ProcessorSettings.UseAllCores = True
            </code>
      </example>
    </member>
    <member name="P:Aspose.BarCode.Common.ProcessorSettings.UseOnlyThisCoresCount">
      <summary>
            Specify the number of cores to use. 
            You need to change the property "UseAllCores" to "false". 
            </summary>
      <example>
        <code>
            [C#]
            BarCodeReader.ProcessorSettings.UseAllCores = false;
            BarCodeReader.ProcessorSettings.UseOnlyThisCoresCount = Math.Max(1, Environment.ProcessorCount / 2);
            [VB.NET]
            BarCodeReader.ProcessorSettings.UseAllCores = False
            BarCodeReader.ProcessorSettings.UseOnlyThisCoresCount = Math.Max(1, Environment.ProcessorCount / 2)
            </code>
      </example>
    </member>
    <member name="P:Aspose.BarCode.Common.ProcessorSettings.MaxAdditionalAllowedThreads">
      <summary>
            Specify the maximal number of additional threads to run code in parallel
            </summary>
      <example>
        <code>
            [C#]
            BarCodeReader.ProcessorSettings.MaxAdditionalAllowedThreads = Environment.ProcessorCount * 2;
            [VB.NET]
            BarCodeReader.ProcessorSettings.MaxAdditionalAllowedThreads = Environment.ProcessorCount * 2
            </code>
      </example>
    </member>
    <member name="T:Aspose.BarCode.CustomerInformationInterpretingType">
      <summary>
            Defines the interpreting type (CTable, NTable or Other) of customer information for AustralianPost BarCode.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.CustomerInformationInterpretingType.CTable">
      <summary>
            Use CTable to interpret the customer information. Allows A..Z, a..z, 1..9, space and # sign.
            </summary>
      <example>
            This sample shows how to generate and recognize Australia Post barcode with CTable Interpreting Type.
            <code>
            [C#]
            using (BarcodeGenerator generator = new BarcodeGenerator(EncodeTypes.AustraliaPost, "5912345678ABCde"))
            {
                generator.Parameters.Barcode.AustralianPost.AustralianPostEncodingTable = CustomerInformationInterpretingType.CTable;
                using (Bitmap image = generator.GenerateBarCodeImage())
                using (BarCodeReader reader = new BarCodeReader(image, DecodeType.AustraliaPost))
                 {
                    reader.BarcodeSettings.AustraliaPost.CustomerInformationInterpretingType = CustomerInformationInterpretingType.CTable;
                    foreach (BarCodeResult result in reader.ReadBarCodes())
                    {
                        Console.WriteLine("BarCode Type: " + result.CodeType);
                        Console.WriteLine("BarCode CodeText: " + result.CodeText);
                    }
                }
            }
            [VB.NET]
            Using generator As New BarcodeGenerator(EncodeTypes.AustraliaPost, "5912345678ABCde")
                generator.Parameters.Barcode.AustralianPost.AustralianPostEncodingTable = CustomerInformationInterpretingType.CTable
                Using image As Bitmap = generator.GenerateBarCodeImage()
                    Using reader As New BarCodeReader(image, DecodeType.AustraliaPost)
                        reader.BarcodeSettings.AustraliaPost.CustomerInformationInterpretingType = CustomerInformationInterpretingType.CTable
                        For Each result As BarCodeResult In reader.ReadBarCodes()
                            Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                            Console.WriteLine("BarCode CodeText: " + result.CodeText)
                        Next
                    End Using
                End Using
            End Using
            </code></example>
    </member>
    <member name="F:Aspose.BarCode.CustomerInformationInterpretingType.NTable">
      <summary>
            Use NTable to interpret the customer information. Allows digits.
            </summary>
      <example>
            This sample shows how to generate and recognize Australia Post barcode with NTable Interpreting Type.
            <code>
            [C#]
            using (BarcodeGenerator generator = new BarcodeGenerator(EncodeTypes.AustraliaPost, "59123456781234567"))
            {
                generator.Parameters.Barcode.AustralianPost.AustralianPostEncodingTable = CustomerInformationInterpretingType.NTable;
                using (Bitmap image = generator.GenerateBarCodeImage())
                using (BarCodeReader reader = new BarCodeReader(image, DecodeType.AustraliaPost))
                 {
                    reader.BarcodeSettings.AustraliaPost.CustomerInformationInterpretingType = CustomerInformationInterpretingType.NTable;
                    foreach (BarCodeResult result in reader.ReadBarCodes())
                    {
                        Console.WriteLine("BarCode Type: " + result.CodeType);
                        Console.WriteLine("BarCode CodeText: " + result.CodeText);
                    }
                }
            }
            [VB.NET]
            Using generator As New BarcodeGenerator(EncodeTypes.AustraliaPost, "59123456781234567")
                generator.Parameters.Barcode.AustralianPost.AustralianPostEncodingTable = CustomerInformationInterpretingType.NTable
                Using image As Bitmap = generator.GenerateBarCodeImage()
                    Using reader As New BarCodeReader(image, DecodeType.AustraliaPost)
                        reader.BarcodeSettings.AustraliaPost.CustomerInformationInterpretingType = CustomerInformationInterpretingType.NTable
                        For Each result As BarCodeResult In reader.ReadBarCodes()
                            Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                            Console.WriteLine("BarCode CodeText: " + result.CodeText)
                        Next
                    End Using
                End Using
            End Using
            </code></example>
    </member>
    <member name="F:Aspose.BarCode.CustomerInformationInterpretingType.Other">
      <summary>
            Do not interpret the customer information. Allows 0, 1, 2 or 3 symbol only.
            </summary>
      <example>
            This sample shows how to generate and recognize Australia Post barcode without Customer Interpreting Type.
            <code>
            [C#]
            using (BarcodeGenerator generator = new BarcodeGenerator(EncodeTypes.AustraliaPost, "59123456780123012301230123"))
            {
                generator.Parameters.Barcode.AustralianPost.AustralianPostEncodingTable = CustomerInformationInterpretingType.Other;
                using (Bitmap image = generator.GenerateBarCodeImage())
                using (BarCodeReader reader = new BarCodeReader(image, DecodeType.AustraliaPost))
                 {
                    reader.BarcodeSettings.AustraliaPost.CustomerInformationInterpretingType = CustomerInformationInterpretingType.Other;
                    foreach (BarCodeResult result in reader.ReadBarCodes())
                    {
                        Console.WriteLine("BarCode Type: " + result.CodeType);
                        Console.WriteLine("BarCode CodeText: " + result.CodeText);
                    }
                }
            }
            [VB.NET]
            Using generator As New BarcodeGenerator(EncodeTypes.AustraliaPost, "59123456780123012301230123")
                generator.Parameters.Barcode.AustralianPost.AustralianPostEncodingTable = CustomerInformationInterpretingType.Other
                Using image As Bitmap = generator.GenerateBarCodeImage()
                    Using reader As New BarCodeReader(image, DecodeType.AustraliaPost)
                        reader.BarcodeSettings.AustraliaPost.CustomerInformationInterpretingType = CustomerInformationInterpretingType.Other
                        For Each result As BarCodeResult In reader.ReadBarCodes()
                            Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                            Console.WriteLine("BarCode CodeText: " + result.CodeText)
                        Next
                    End Using
                End Using
            End Using
            </code></example>
    </member>
    <member name="T:Aspose.BarCode.BarCodeException">
      <summary>
             Represents the exception for creating barcode image.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.BarCodeException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.BarCode.BarCodeException" /> class.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.BarCodeException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.BarCode.BarCodeException" /> class with specified error message.
            </summary>
      <param name="message">The error message of the exception.</param>
    </member>
    <member name="M:Aspose.BarCode.BarCodeException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.BarCode.BarCodeException" /> class with the specified error message and the current exception.
            </summary>
      <param name="message">The error message of the exception.</param>
      <param name="innerException">The current exception is thrown.</param>
    </member>
    <member name="T:Aspose.BarCode.InvalidCodeException">
      <summary>
            The Exception will be thrown when invalid characters contained in the code text.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.InvalidCodeException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the InvalidCodeException class with a specified error message.
            </summary>
      <param name="message">A String that describes the error.</param>
    </member>
    <member name="T:Aspose.BarCode.NamespaceDoc">
      <summary>
            The <b>Aspose.BarCode</b> contains tools for the 1D/2D barcodes generation and drawing.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.BarcodeGenerator">
      <summary>
            BarcodeGenerator for backend barcode images generation.
            <para>
            supported symbologies:
            1D:
            Codabar, Code11, Code128, Code39Standard, Code39Extended
            Code93Standard, Code93Extended, EAN13, EAN8, Interleaved2of5,
            MSI, Standard2of5, UPCA, UPCE, ISBN, GS1Code128, Postnet, Planet
            EAN14, SCC14, SSCC18, ITF14, SingaporePost ...
            2D:
            Aztec, DataMatrix, PDf417, QR code ...
            </para></summary>
      <example>
            This sample shows how to create and save a barcode image.
            <code>
            [C#]
              using(var generator = new BarcodeGenerator(EncodeTypes.Code128))
              {
                  generator.CodeText = "123ABC";
                  generator.Save("code128.png");
              }
            </code></example>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeGenerator.Parameters">
      <summary>
            Generation parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeGenerator.BarcodeType">
      <summary>
            Barcode symbology type.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeGenerator.CodeText">
      <summary>
            Text to be encoded.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Generation.BarcodeGenerator.#ctor(Aspose.BarCode.Generation.BaseEncodeType)">
      <summary>
            Creates an instance of BarcodeGenerator.
            </summary>
      <param name="type">Barcode symbology type. Use <see cref="T:Aspose.BarCode.Generation.EncodeTypes" /> class to setup a symbology.</param>
    </member>
    <member name="M:Aspose.BarCode.Generation.BarcodeGenerator.#ctor(Aspose.BarCode.Generation.BaseEncodeType,System.String)">
      <summary>
            Creates an instance of BarcodeGenerator.
            </summary>
      <param name="type">Barcode symbology type. Use <see cref="T:Aspose.BarCode.Generation.EncodeTypes" /> class to setup a symbology.</param>
      <param name="codeText">Text to be encoded.</param>
    </member>
    <member name="M:Aspose.BarCode.Generation.BarcodeGenerator.GenerateBarCodeImage">
      <summary>
            Generate the barcode image under current settings.
            </summary>
      <returns> Barcode image. See <see cref="T:System.Drawing.Bitmap" />.</returns>
      <example>
            This sample shows how to create and save a barcode image.
            <code>
            [C#]
              using(var generator = new BarcodeGenerator(EncodeTypes.Code128))
              {
                  Bitmap barcode = generator.GenerateBarCodeImage();
                  barcode.Save("test.png");
              }
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.Generation.BarcodeGenerator.Save(System.IO.Stream,Aspose.BarCode.Generation.BarCodeImageFormat)">
      <summary>
            Save barcode image to stream in specific format.
            </summary>
      <param name="stream">Output System.IO.Stream.</param>
      <param name="format">Specifies the file format of the output image.</param>
    </member>
    <member name="M:Aspose.BarCode.Generation.BarcodeGenerator.Save(System.String,Aspose.BarCode.Generation.BarCodeImageFormat)">
      <summary>
            Save barcode image to specific file in specific format.
            </summary>
      <param name="filename">Path to save to.</param>
      <param name="format">Specifies the file format of the output image.</param>
    </member>
    <member name="M:Aspose.BarCode.Generation.BarcodeGenerator.Save(System.String)">
      <summary>
            Save barcode image to specific file.
            </summary>
      <param name="filename">Path to save to.</param>
    </member>
    <member name="M:Aspose.BarCode.Generation.BarcodeGenerator.DrawWpf(System.Windows.Media.DrawingContext)">
      <summary>
            Draws barcode image on WPF canvas. 
            </summary>
      <param name="context">WPF drawing context.</param>
      <returns>Actual image size</returns>
    </member>
    <member name="M:Aspose.BarCode.Generation.BarcodeGenerator.ExportToXml(System.String)">
      <summary>
            Exports BarCode properties to the xml-file specified
            </summary>
      <param name="xmlFile">The name for the file</param>
      <returns>Whether or not export completed successfully.
             <para>Returns <b>True</b> in case of success; <b>False</b> Otherwise </para></returns>
    </member>
    <member name="M:Aspose.BarCode.Generation.BarcodeGenerator.ExportToXml(System.IO.Stream)">
      <summary>
            Exports BarCode properties to the xml-stream specified
            </summary>
      <param name="xml">The xml-stream</param>
      <returns>Whether or not export completed successfully.
             <para>Returns <b>True</b> in case of success; <b>False</b> Otherwise </para></returns>
    </member>
    <member name="M:Aspose.BarCode.Generation.BarcodeGenerator.ImportFromXml(System.String)">
      <summary>
            Imports BarCode properties from the xml-file specified and creates BarcodeGenerator instance. 
            </summary>
      <param name="xmlFile">The name for the file</param>
      <returns>BarcodeGenerator instance</returns>
    </member>
    <member name="M:Aspose.BarCode.Generation.BarcodeGenerator.ImportFromXml(System.IO.Stream)">
      <summary>
            Imports BarCode properties from the xml-stream specified and creates BarcodeGenerator instance. 
            </summary>
      <param name="xml">The xml-stream</param>
      <returns>BarcodeGenerator instance</returns>
    </member>
    <member name="T:Aspose.BarCode.Generation.BarcodeClassifications">
      <summary>
            Symbology classification    
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.BarcodeClassifications.None">
      <summary>
            Unspecified classification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.BarcodeClassifications.Type1D">
      <summary>
            Specifies 1D-barcode
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.BarcodeClassifications.Type2D">
      <summary>
            Specifies 2D-barcode
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.BarcodeClassifications.Postal">
      <summary>
            Specifies Postal-barcode
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.BarcodeClassifications.Databar">
      <summary>
            Specifies DataBar-barcode
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.BarcodeClassifications.Coupon">
      <summary>
            Specifies Coupon-barcode
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.BaseEncodeType">
      <summary>
            Base class for SymbologyEncodeType.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BaseEncodeType.TypeIndex">
      <summary>
            Gets an index of encode type
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BaseEncodeType.TypeName">
      <summary>
            Gets a name of encode type
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BaseEncodeType.Classification">
      <summary>
            Gets a classification of this symbology.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Generation.BaseEncodeType.ToString">
      <summary>
            Returns the name of the given BaseEncodeType as a string.
            </summary>
      <returns>A string representing the name of the encode type</returns>
    </member>
    <member name="M:Aspose.BarCode.Generation.BaseEncodeType.GetString">
      <summary>
            Converts the instance of BaseEncodeType to its equivalent string representation.
            The string format is: "Index:0; Name:Codabar".
            </summary>
      <returns>A string representing the complete value of the encode type</returns>
    </member>
    <member name="M:Aspose.BarCode.Generation.BaseEncodeType.GetString(Aspose.BarCode.Generation.BaseEncodeType)">
      <summary>
            Converts the instance of BaseEncodeType to its equivalent string representation.
            The string format is: "Index:-1; Name:None".
            </summary>
      <param name="instance">The BaseEncodeType instance to convert</param>
      <returns>A string representing the complete value of the given encode type</returns>
    </member>
    <member name="M:Aspose.BarCode.Generation.BaseEncodeType.TryParse(System.String,Aspose.BarCode.Generation.BaseEncodeType@)">
      <summary>
            Converts the string representation of a BaseEncodeType to its instance.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="parsingType">A string in the format as "Index:-1; Name:None" to convert.</param>
      <param name="result">An actual SingleEncodeType returns, when conversion has completed successfully; 
            <para>otherwise it returns null.</para></param>
      <returns>
        <b>true</b> if s was converted successfully; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.Generation.BaseEncodeType.TryParse(System.String,Aspose.BarCode.Generation.SymbologyEncodeType@)">
      <summary>
            Converts the string representation of a BaseEncodeType to its instance.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="parsingType">A string in the format as "Index:-1; Name:None" to convert.</param>
      <param name="result">An actual SingleEncodeType returns, when conversion has completed successfully; 
            <para>otherwise it returns null.</para></param>
      <returns>
        <b>true</b> if s was converted successfully; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.Generation.BaseEncodeType.Parse(System.String)">
      <summary>
            Converts the string representation of the name of a BaseEncodeType to its instance.
            </summary>
      <param name="stringEncodeType">A string containing the name of a BaseEncodeType to convert.</param>
      <returns>the instance of <seealso cref="T:Aspose.BarCode.Generation.BaseEncodeType" />, if conversion was successful; otherwise, it returns <b><seealso cref="F:Aspose.BarCode.BarCodeRecognition.DecodeType.None" /></b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.Generation.BaseEncodeType.Equals(Aspose.BarCode.Generation.BaseEncodeType)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Aspose.BarCode.Generation.BaseEncodeType" /> value.
            </summary>
      <param name="other">An <see cref="T:Aspose.BarCode.Generation.BaseEncodeType" /> value to compare to this instance.</param>
      <returns>
        <b>true</b> if obj has the same value as this instance; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.Generation.BaseEncodeType.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Aspose.BarCode.Generation.BaseEncodeType" /> value.
            </summary>
      <param name="obj">An System.Object value to compare to this instance.</param>
      <returns>
        <b>true</b> if obj has the same value as this instance; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.Generation.BaseEncodeType.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="T:Aspose.BarCode.Generation.EncodeTypes">
      <summary>
            Specifies the type of barcode to encode.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.None">
      <summary>
            Unspecified encode type. 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.Codabar">
      <summary>
            Specifies that the data should be encoded with <b>CODABAR</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.Code11">
      <summary>
            Specifies that the data should be encoded with <b>CODE 11</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.Code39Standard">
      <summary>
            Specifies that the data should be encoded with <b>Standard CODE 39</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.Code39Extended">
      <summary>
            Specifies that the data should be encoded with <b>Extended CODE 39</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.Code93Standard">
      <summary>
            Specifies that the data should be encoded with <b>Standard CODE 93</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.Code93Extended">
      <summary>
            Specifies that the data should be encoded with <b>Extended CODE 93</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.Code128">
      <summary>
            Specifies that the data should be encoded with <b>CODE 128</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.GS1Code128">
      <summary>
            Specifies that the data should be encoded with <b>GS1 Code 128</b> barcode specification. The codetext must contains parentheses for AI.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.EAN8">
      <summary>
            Specifies that the data should be encoded with <b>EAN-8</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.EAN13">
      <summary>
            Specifies that the data should be encoded with <b>EAN-13</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.EAN14">
      <summary>
            Specifies that the data should be encoded with <b>EAN14</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.SCC14">
      <summary>
            Specifies that the data should be encoded with <b>SCC14</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.SSCC18">
      <summary>
            Specifies that the data should be encoded with <b>SSCC18</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.UPCA">
      <summary>
            Specifies that the data should be encoded with <b>UPC-A</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.UPCE">
      <summary>
            Specifies that the data should be encoded with <b>UPC-E</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.ISBN">
      <summary>
            Specifies that the data should be encoded with <b>ISBN</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.ISSN">
      <summary>
            Specifies that the data should be encoded with <b>ISSN</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.ISMN">
      <summary>
            Specifies that the data should be encoded with <b>ISMN</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.Standard2of5">
      <summary>
            Specifies that the data should be encoded with <b>Standard 2 of 5</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.Interleaved2of5">
      <summary>
            Specifies that the data should be encoded with <b>INTERLEAVED 2 of 5</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.Matrix2of5">
      <summary>
            Represents Matrix 2 of 5 BarCode
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.ItalianPost25">
      <summary>
            Represents Italian Post 25 barcode.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.IATA2of5">
      <summary>
            Represents IATA 2 of 5 barcode.IATA (International Air Transport Assosiation) uses this barcode for the management of air cargo.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.ITF14">
      <summary>
            Specifies that the data should be encoded with <b>ITF14</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.ITF6">
      <summary>
            Represents ITF-6  Barcode.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.MSI">
      <summary>
            Specifies that the data should be encoded with <b>MSI Plessey</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.VIN">
      <summary>
            Represents VIN (Vehicle Identification Number) Barcode.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.DeutschePostIdentcode">
      <summary>
            Represents Deutsch Post barcode, This Symbology is also known as Identcode,CodeIdentcode,German Postal 2 of 5 Identcode, 
            Deutsch Post AG Identcode, Deutsch Frachtpost Identcode,  Deutsch Post AG (DHL)
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.DeutschePostLeitcode">
      <summary>
            Represents Deutsch Post Leitcode Barcode,also known as German Postal 2 of 5 Leitcode, CodeLeitcode, Leitcode, Deutsch Post AG (DHL).
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.OPC">
      <summary>
            Represents OPC(Optical Product Code) Barcode,also known as , VCA Barcode VCA OPC, Vision Council of America OPC Barcode.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.PZN">
      <summary>
            Represents PZN barcode.This Symbology is also known as Pharmacy central number, Pharmazentralnummer
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.Code16K">
      <summary>
            Represents Code 16K barcode.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.Pharmacode">
      <summary>
            Represents Pharmacode barcode.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.DataMatrix">
      <summary>
            2D barcode symbology DataMatrix
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.QR">
      <summary>
            Specifies that the data should be encoded with <b>QR Code</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.Aztec">
      <summary>
            Specifies that the data should be encoded with <b>Aztec</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.Pdf417">
      <summary>
            Specifies that the data should be encoded with <b>Pdf417</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.MacroPdf417">
      <summary>
            Specifies that the data should be encoded with <b>MacroPdf417</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.GS1DataMatrix">
      <summary>
            2D barcode symbology DataMatrix with GS1 string format
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.MicroPdf417">
      <summary>
            Specifies that the data should be encoded with <b>MicroPdf417</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.GS1QR">
      <summary>
            2D barcode symbology QR with GS1 string format
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.MaxiCode">
      <summary>
            Specifies that the data should be encoded with <b>MaxiCode</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.DotCode">
      <summary>
            Specifies that the data should be encoded with <b>DotCode</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.AustraliaPost">
      <summary>
            Represents Australia Post Customer BarCode
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.Postnet">
      <summary>
            Specifies that the data should be encoded with <b>Postnet</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.Planet">
      <summary>
            Specifies that the data should be encoded with <b>Planet</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.OneCode">
      <summary>
            Specifies that the data should be encoded with USPS <b>OneCode</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.RM4SCC">
      <summary>
            Represents RM4SCC barcode. RM4SCC (Royal Mail 4-state Customer Code) is used for automated mail sort process in UK.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.Mailmark">
      <summary>
            Represents Royal Mail Mailmark barcode.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.DatabarOmniDirectional">
      <summary>
            Specifies that the data should be encoded with <b>GS1 Databar omni-directional</b> barcode specification.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.DatabarTruncated">
      <summary>
            Specifies that the data should be encoded with <b>GS1 Databar truncated</b> barcode specification.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.DatabarLimited">
      <summary>
            Represents GS1 Databar limited barcode.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.DatabarExpanded">
      <summary>
            Represents GS1 Databar expanded barcode.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.DatabarExpandedStacked">
      <summary>
            Represents GS1 Databar expanded stacked barcode.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.DatabarStacked">
      <summary>
            Represents GS1 Databar stacked barcode.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.DatabarStackedOmniDirectional">
      <summary>
            Represents GS1 Databar stacked omni-directional barcode.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.SingaporePost">
      <summary>
            Specifies that the data should be encoded with <b>Singapore Post Barcode</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.AustralianPosteParcel">
      <summary>
            Specifies that the data should be encoded with <b>Australian Post Domestic eParcel Barcode</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.SwissPostParcel">
      <summary>
            Specifies that the data should be encoded with <b>Swiss Post Parcel Barcode</b> barcode specification. Supported types: Domestic Mail, International Mail, Additional Services (new) 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.PatchCode">
      <summary>
            Represents Patch code barcode
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.Code32">
      <summary>
            Specifies that the data should be encoded with <b>Code32</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.DataLogic2of5">
      <summary>
            Specifies that the data should be encoded with <b>DataLogic 2 of 5</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.DutchKIX">
      <summary>
            Specifies that the data should be encoded with <b>Dutch KIX</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.UpcaGs1Code128Coupon">
      <summary>
            Specifies that the data should be encoded with <b>UPC coupon with GS1-128 Extended Code</b> barcode specification.
            An example of the input string:
            BarcodeGenerator.Codetext = "514141100906(8102)03",
            where UPCA part is "514141100906", GS1Code128 part is (8102)03.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.UpcaGs1DatabarCoupon">
      <summary>
            Specifies that the data should be encoded with <b>UPC coupon with GS1 DataBar addition</b> barcode specification.
            An example of the input string:
            BarcodeGenerator.Codetext = "514141100906(8110)106141416543213500110000310123196000",
            where UPCA part is "514141100906", Databar part is "(8110)106141416543213500110000310123196000".
            To change the caption, use Parameters.CaptionAbove.Text = "company prefix + offer code";
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.CodablockF">
      <summary>
            Specifies that the data should be encoded with <b>Codablock-F</b> barcode specification.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EncodeTypes.GS1CodablockF">
      <summary>
            Specifies that the data should be encoded with <b>GS1 Codablock-F</b> barcode specification. The codetext must contains parentheses for AI.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.EncodeTypes.AllEncodeTypes">
      <summary>
            Specifies that data will be checked with all available symbologies.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Generation.EncodeTypes.GetNames">
      <summary>
            Retrieves an array of the names of the encode types.
            </summary>
      <returns>A string array of the names of the encode types.</returns>
    </member>
    <member name="M:Aspose.BarCode.Generation.EncodeTypes.Parse(System.String,Aspose.BarCode.Generation.BaseEncodeType@)">
      <summary>
            Converts the string representation of a BaseEncodeType to its instance.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="parsingType">A string containing a BaseEncodeType representation to convert.</param>
      <param name="result">An actual BaseEncodeType returns, when conversion has completed successfully; 
            <para>otherwise it returns null.</para></param>
      <returns>
        <b>true</b> if s was converted successfully; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.Generation.EncodeTypes.TryParse(System.String,Aspose.BarCode.Generation.BaseEncodeType@)">
      <summary>
            Converts the string representation of a BaseEncodeType to its instance.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="parsingType">A string in the format as "Index:-1; Name:None" to convert.</param>
      <param name="result">An actual SingleEncodeType returns, when conversion has completed successfully; 
            <para>otherwise it returns null.</para></param>
      <returns>
        <b>true</b> if s was converted successfully; otherwise, <b>false</b>.</returns>
    </member>
    <member name="T:Aspose.BarCode.Generation.SymbologyEncodeType">
      <summary>
            Symbology encode type. See EncodeTypes to get instance.
            </summary>
      <example>
            This sample shows how to get instance of SymbologyEncodeType class.
            <code>
            [C#]
            SymbologyEncodeType symbologyType = EncodeTypes.QR 
             
            [VB.NET]
            Dim symbologyType As SymbologyEncodeType 
            symbologyType = EncodeTypes.QR
            </code></example>
    </member>
    <member name="T:Aspose.BarCode.Generation.AutoSizeMode">
      <summary>
            Specifies the different types of automatic sizing modes.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.AutoSizeMode.None">
      <summary>
            Automatic resizing is disabled.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.AutoSizeMode.Nearest">
      <summary>
            Resizes barcode to nearest lowest possible size specified by BarCodeWidth and BarCodeHeight properties.
            Preserves default aspect ratio.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.AutoSizeMode.Interpolation">
      <summary>
            Resizes barcode to specified size.
            Size can be specified by BarCodeWidth and BarCodeHeight properties.
            Generated barcode may be invalid (not readable) after scaling.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.AztecSymbolMode">
      <summary>
            Specifies the Aztec symbol mode.
            </summary>
      <example>
            This sample shows how to change Aztec Symbol mode and save a BarCode image.
            <code>
            [C#]
            using (Aspose.BarCode.Generation.BarcodeGenerator generator = new Aspose.BarCode.Generation.BarcodeGenerator(EncodeTypes.Aztec))
            {
                generator.CodeText = "125";
                generator.Parameters.Barcode.Aztec.AztecSymbolMode = AztecSymbolMode.Rune;
                generator.Save("test.png");
            }
            [VB.NET]
            Using generator As New Aspose.BarCode.Generation.BarcodeGenerator(EncodeTypes.Aztec)
                generator.CodeText = "125"
                generator.Parameters.Barcode.Aztec.AztecSymbolMode = AztecSymbolMode.Rune
                generator.Save("test.png")
            End Using
            </code></example>
    </member>
    <member name="F:Aspose.BarCode.Generation.AztecSymbolMode.Auto">
      <summary>
            Specifies to automatically pick up the best symbol (Compact or Full-range) for Aztec.
            This is default value.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.AztecSymbolMode.Compact">
      <summary>
            Specifies the Compact symbol for Aztec.
            Aztec Compact symbol permits only 1, 2, 3 or 4 layers.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.AztecSymbolMode.FullRange">
      <summary>
            Specifies the Full-range symbol for Aztec.
            Aztec Full-range symbol permits from 1 to 32 layers.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.AztecSymbolMode.Rune">
      <summary>
            Specifies the Rune symbol for Aztec.
            Aztec Runes are a series of small but distinct machine-readable marks. It permits only number value from 0 to 255.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.BarCodeImageFormat">
      <summary>
            Specifies the file format of the image.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.BarCodeImageFormat.Bmp">
      <summary>
            Specifies the bitmap (BMP) image format.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.BarCodeImageFormat.Gif">
      <summary>
            Specifies the Graphics Interchange Format (GIF) image format.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.BarCodeImageFormat.Jpeg">
      <summary>
            Specifies the Joint Photographic Experts Group (JPEG) image format.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.BarCodeImageFormat.Png">
      <summary>
            Specifies the W3C Portable Network Graphics (PNG) image format.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.BarCodeImageFormat.Tiff">
      <summary>
            Specifies the Tagged Image File Format (TIFF) image format.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.BarCodeImageFormat.TiffInCmyk">
      <summary>
            Specifies the Tagged Image File Format (TIFF) image format in CMYK color model. 
            (Supported only on Windows platform, on *nix platforms is saved as Tiff)
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.BarCodeImageFormat.Emf">
      <summary>
            Specifies the Enhanced Metafile (EMF) image format.
            (Supported only on Windows platform, on *nix platforms is saved as PNG)
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.BarCodeImageFormat.Svg">
      <summary>
            Specifies the Scalable Vector Graphics (SVG) image format.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.BarcodeParameters">
      <summary>
            Barcode generation parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.XDimension">
      <summary>
            x-dimension is the smallest width of the unit of BarCode bars or spaces.
            Increase this will increase the whole barcode image width.
            Ignored if <see cref="P:Aspose.BarCode.Generation.BarcodeParameters.AutoSizeMode" /> property is set to AutoSizeMode.Nearest or AutoSizeMode.Interpolation.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.BarHeight">
      <summary>
            Height of 1D barcodes' bars in <see cref="T:Aspose.BarCode.Generation.Unit" /> value.
            Ignored if <see cref="P:Aspose.BarCode.Generation.BarcodeParameters.AutoSizeMode" /> property is set to AutoSizeMode.Nearest or AutoSizeMode.Interpolation.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.AutoSizeMode">
      <summary>
            Specifies the different types of automatic sizing modes.
            Default value: AutoSizeMode.None.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.BarCodeHeight">
      <summary>
            BarCode image height when <see cref="P:Aspose.BarCode.Generation.BarcodeParameters.AutoSizeMode" /> property is set to AutoSizeMode.Nearest or AutoSizeMode.Interpolation.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.BarCodeWidth">
      <summary>
            BarCode image width when <see cref="P:Aspose.BarCode.Generation.BarcodeParameters.AutoSizeMode" /> property is set to AutoSizeMode.Nearest or AutoSizeMode.Interpolation.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.ForeColor">
      <summary>
            Bars color.
            Default value: Color.Black.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.BarColor">
      <summary>
            Bars color.
            Default value: Color.Black.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.Padding">
      <summary>
            Barcode paddings.
            Default value: 5pt 5pt 5pt 5pt.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.ChecksumAlwaysShow">
      <summary>
             Always display checksum digit in the human readable text for Code128 and GS1Code128 barcodes.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.IsChecksumEnabled">
      <summary>
        <para>Enable checksum during generation 1D barcodes.</para>
        <para>Default is treated as Yes for symbology which must contain checksum, as No where checksum only possible.</para>
        <para>Checksum is possible: Code39 Standard/Extended, Standard2of5, Interleaved2of5, Matrix2of5, ItalianPost25, DeutschePostIdentcode, DeutschePostLeitcode, VIN, Codabar</para>
        <para>Checksum always used: Rest symbology</para>
      </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.EnableEscape">
      <summary>
            Indicates whether explains the character "\" as an escape character in CodeText property. Used for Pdf417, DataMatrix, Code128 only
            If the EnableEscape is true, "\" will be explained as a special escape character. Otherwise, "\" acts as normal characters.
            <remarks>Aspose.BarCode supports inputing decimal ascii code and mnemonic for ASCII control-code characters. For example, \013 and \\CR stands for CR.</remarks></summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.ThrowExceptionWhenCodeTextIncorrect">
      <summary>
            Only for 1D barcodes.
            If codetext is incorrect and value set to true - exception will be thrown. Otherwise codetext will be corrected to match barcode's specification.
            Exception always will be thrown for: Databar symbology if codetext is incorrect.
            Exception always will not be thrown for: AustraliaPost, SingapurePost, Code39Extended, Code93Extended, Code16K, Code128 symbology if codetext is incorrect.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.WideNarrowRatio">
      <summary>
            Wide bars to Narrow bars ratio.
            Default value: 3, that is, wide bars are 3 times as wide as narrow bars.
            Used for ITF, PZN, PharmaCode, Standard2of5, Interleaved2of5, Matrix2of5, ItalianPost25, IATA2of5, VIN, DeutschePost, OPC, Code32, DataLogic2of5, PatchCode, Code39Extended, Code39Standard
            </summary>
      <exception cref="T:System.ArgumentException">
        <p>The <b>WideNarrowRatio</b> parameter value is less than or equal to 0.</p>
      </exception>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.CodeTextParameters">
      <summary>
            Codetext parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.FilledBars">
      <summary>
            Gets or sets a value indicating whether bars filled.
            Only for 1D barcodes.
            Default value: true.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.BarWidthReduction">
      <summary>
            Get or sets bars reduction value that is used to compensate ink spread while printing.
            Default value: 0
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.Postal">
      <summary>
            Postal parameters. Used for Postnet, Planet.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.PatchCode">
      <summary>
            PatchCode parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.AustralianPost">
      <summary>
            AustralianPost barcode parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.DataBar">
      <summary>
            Databar parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.Codablock">
      <summary>
            Codablock parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.DataMatrix">
      <summary>
            DataMatrix parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.Code16K">
      <summary>
            Code16K parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.DotCode">
      <summary>
            DotCode parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.ITF">
      <summary>
            ITF parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.Pdf417">
      <summary>
            PDF417 parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.QR">
      <summary>
            QR parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.Supplement">
      <summary>
            Supplement parameters. Used for Interleaved2of5, Standard2of5, EAN13, EAN8, UPCA, UPCE, ISBN, ISSN, ISMN.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.MaxiCode">
      <summary>
            MaxiCode parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.Aztec">
      <summary>
            Aztec parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.Codabar">
      <summary>
            Codabar parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BarcodeParameters.Coupon">
      <summary>
            Coupon parameters. Used for UpcaGs1DatabarCoupon, UpcaGs1Code128Coupon.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.CouponParameters">
      <summary>
            Coupon parameters. Used for UpcaGs1DatabarCoupon, UpcaGs1Code128Coupon.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.CouponParameters.SupplementSpace">
      <summary>
            Space between main the BarCode and supplement BarCode in <see cref="T:Aspose.BarCode.Generation.Unit" /> value.
            </summary>
      <exception cref="T:System.ArgumentException">
        <p>The <b>Space</b> parameter value is less than 0.</p>
      </exception>
    </member>
    <member name="M:Aspose.BarCode.Generation.CouponParameters.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.Generation.CouponParameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.Generation.CouponParameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.Generation.CodabarParameters">
      <summary>
            Codabar parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.CodabarParameters.CodabarChecksumMode">
      <summary>
            Get or set the checksum algorithm for Codabar barcodes.
            Default value: CodabarChecksumMode.Mod16.
            To enable checksum calculation set value EnableChecksum.Yes to property EnableChecksum.
            See <see cref="P:Aspose.BarCode.Generation.CodabarParameters.CodabarChecksumMode" />.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.CodabarParameters.CodabarStartSymbol">
      <summary>
            Start symbol (character) of Codabar symbology.
            Default value: CodabarSymbol.A
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.CodabarParameters.CodabarStopSymbol">
      <summary>
            Stop symbol (character) of Codabar symbology.
            Default value: CodabarSymbol.A
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Generation.CodabarParameters.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.Generation.CodabarParameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.Generation.CodabarParameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.Generation.AztecParameters">
      <summary>
            Aztec parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.AztecParameters.AztecErrorLevel">
      <summary>
            Level of error correction of Aztec types of barcode.
            Value should between 5 to 95.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.AztecParameters.AztecSymbolMode">
      <summary>
            Gets or sets a Aztec Symbol mode.
            Default value: AztecSymbolMode.Auto.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.AztecParameters.AspectRatio">
      <summary>
            Height/Width ratio of 2D BarCode module.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.AztecParameters.CodeTextEncoding">
      <summary>
            Gets or sets the encoding of codetext.
            Default value: UTF-8
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Generation.AztecParameters.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.Generation.AztecParameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.Generation.AztecParameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.Generation.MaxiCodeParameters">
      <summary>
            MaxiCode parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.MaxiCodeParameters.MaxiCodeEncodeMode">
      <summary>
            Gets or sets a MaxiCode encode mode.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.MaxiCodeParameters.AspectRatio">
      <summary>
            Height/Width ratio of 2D BarCode module.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Generation.MaxiCodeParameters.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.Generation.MaxiCodeParameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.Generation.MaxiCodeParameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.Generation.SupplementParameters">
      <summary>
            Supplement parameters. Used for Interleaved2of5, Standard2of5, EAN13, EAN8, UPCA, UPCE, ISBN, ISSN, ISMN.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.SupplementParameters.SupplementData">
      <summary>
            Supplement data following BarCode.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.SupplementParameters.SupplementSpace">
      <summary>
            Space between main the BarCode and supplement BarCode in <see cref="T:Aspose.BarCode.Generation.Unit" /> value.
            </summary>
      <exception cref="T:System.ArgumentException">
        <p>The <b>Space</b> parameter value is less than 0.</p>
      </exception>
    </member>
    <member name="M:Aspose.BarCode.Generation.SupplementParameters.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.Generation.SupplementParameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.Generation.SupplementParameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.Generation.QrParameters">
      <summary>
            QR parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.QrParameters.QrECIEncoding">
      <summary>
            Extended Channel Interpretation Identifiers. It is used to tell the barcode reader details
            about the used references for encoding the data in the symbol.
            Current implementation consists all well known charset encodings.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.QrParameters.QrEncodeMode">
      <summary>
            QR symbology type of BarCode's encoding mode.
            Default value: QREncodeMode.Auto.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.QrParameters.QrEncodeType">
      <summary>
            QR / MicroQR selector mode. Select ForceQR for standard QR symbols, Auto for MicroQR.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.QrParameters.QrErrorLevel">
      <summary>
             Level of Reed-Solomon error correction for QR barcode.
             From low to high: LevelL, LevelM, LevelQ, LevelH. see QRErrorLevel.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.QrParameters.QrVersion">
      <summary>
            Version of QR Code.
            From Version1 to Version40 for QR code and from M1 to M4 for MicroQr.
            Default value is QRVersion.Auto.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.QrParameters.AspectRatio">
      <summary>
            Height/Width ratio of 2D BarCode module.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.QrParameters.CodeTextEncoding">
      <summary>
            Gets or sets the encoding of codetext.
            Default value: UTF-8
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.QrParameters.StructuredAppend">
      <summary>
            QR structured append parameters.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Generation.QrParameters.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.Generation.QrParameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.Generation.QrParameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.Generation.QrStructuredAppendParameters">
      <summary>
            QR structured append parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.QrStructuredAppendParameters.ParityByte">
      <summary>
            Gets or sets the QR structured append mode parity data.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.QrStructuredAppendParameters.SequenceIndicator">
      <summary>
            Gets or sets the index of the QR structured append mode barcode. Index starts from 0.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.QrStructuredAppendParameters.TotalCount">
      <summary>
            Gets or sets the QR structured append mode barcodes quantity. Max value is 16.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.Pdf417Parameters">
      <summary>
            PDF417 parameters. Contains PDF417, MacroPDF417 and MicroPDF417 parameters.
            MacroPDF417 requires two fields: Pdf417MacroFileID and Pdf417MacroSegmentID. All other fields are optional.
            MicroPDF417 in Structured Append mode (same as MacroPDF417 mode) requires two fields: Pdf417MacroFileID and Pdf417MacroSegmentID. All other fields are optional.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Pdf417Parameters.Pdf417CompactionMode">
      <summary>
            Pdf417 symbology type of BarCode's compaction mode.
            Default value: Pdf417CompactionMode.Auto.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Pdf417Parameters.Pdf417ErrorLevel">
      <summary>
            Gets or sets Pdf417 symbology type of BarCode's error correction level
            ranging from level0 to level8, level0 means no error correction info,
            level8 means best error correction which means a larger picture.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Pdf417Parameters.Pdf417Truncate">
      <summary>
            Whether Pdf417 symbology type of BarCode is truncated (to reduce space). 
            Also known as CompactPDF417. Rigth row indicator and right stop pattern are removed in this mode.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Pdf417Parameters.Columns">
      <summary>
            Columns count.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Pdf417Parameters.Rows">
      <summary>
            Rows count.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Pdf417Parameters.AspectRatio">
      <summary>
            Height/Width ratio of 2D BarCode module.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Pdf417Parameters.Pdf417MacroFileID">
      <summary>
            MacroPdf417 barcode's file ID (Required field).
            MicroPDF417 barcode's file ID (Required field for Structured Append mode)
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Pdf417Parameters.Pdf417MacroSegmentID">
      <summary>
            MacroPdf417 barcode's segment ID (Required field), which starts from 0, to MacroSegmentsCount - 1.
            MicroPDF417 barcode's segment ID (Required field for Structured Append mode)
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Pdf417Parameters.Pdf417MacroSegmentsCount">
      <summary>
            MacroPdf417 barcode segments count (optional field).
            MicroPDF417 barcode segments count (optional field for Structured Append mode)
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Pdf417Parameters.Pdf417MacroFileName">
      <summary>
            MacroPdf417 barcode file name (optional field).
            MicroPDF417 barcode file name (optional field for Structured Append mode)
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Pdf417Parameters.Pdf417MacroTimeStamp">
      <summary>
            MacroPdf417 barcode time stamp (optional field).
            MicroPDF417 barcode time stamp (optional field for Structured Append mode)
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Pdf417Parameters.Pdf417MacroSender">
      <summary>
            MacroPdf417 barcode sender name (optional field).
            MicroPDF417 barcode sender name (optional field for Structured Append mode)
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Pdf417Parameters.Pdf417MacroAddressee">
      <summary>
            MacroPdf417 barcode addressee name (optional field).
            MicroPDF417 barcode addressee name (optional field for Structured Append mode)
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Pdf417Parameters.Pdf417MacroFileSize">
      <summary>
            MacroPdf417 file size (optional field).
            MicroPDF417 file size (optional field for Structured Append mode)
            The file size field contains the size in bytes of the entire source file.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Pdf417Parameters.Pdf417MacroChecksum">
      <summary>
            MacroPdf417 barcode checksum (optional field).
            MicroPDF417 barcode checksum (optional field for Structured Append mode)
            The checksum field contains the value of the 16-bit (2 bytes) CRC checksum using the CCITT-16 polynomial. x^16 + x^12 + x^5 + 1
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Pdf417Parameters.CodeTextEncoding">
      <summary>
            Gets or sets the encoding of codetext.
            Default value: UTF-8
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Pdf417Parameters.Pdf417ECIEncoding">
      <summary>
            Extended Channel Interpretation Identifiers. It is used to tell the barcode reader details
            about the used references for encoding the data in the symbol. Not applied for Macro PDF417 text fields.
            Current implementation consists all well known charset encodings.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Pdf417Parameters.Pdf417MacroECIEncoding">
      <summary>
            Extended Channel Interpretation Identifiers. Applies for Macro PDF417 text fields.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Pdf417Parameters.IsReaderInitialization">
      <summary>
            Used to instruct the reader to interpret the data contained within the symbol
            as programming for reader initialization.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Pdf417Parameters.Code128Emulation">
      <summary>
            Function codeword for Code 128 emulation. Applied for MicroPDF417 only.  Ignored for PDF417 and MacroPDF417 barcodes.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Generation.Pdf417Parameters.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.Generation.Pdf417Parameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.Generation.Pdf417Parameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.Generation.ITFParameters">
      <summary>
            ITF parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.ITFParameters.ItfBorderThickness">
      <summary>
            Gets or sets an ITF border (bearer bar) thickness in Unit value.
            Default value: 12pt.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.ITFParameters.ItfBorderType">
      <summary>
            Border type of ITF barcode.
            Default value: ITF14BorderType.Bar.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.ITFParameters.QuietZoneCoef">
      <summary>
            Size of the quiet zones in xDimension.
            Default value: 10, meaning if xDimension = 2px than quiet zones will be 20px.
            </summary>
      <exception cref="T:System.ArgumentException">
        <p>The <b>QuietZoneCoef</b> parameter value is less than 10.</p>
      </exception>
    </member>
    <member name="M:Aspose.BarCode.Generation.ITFParameters.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.Generation.ITFParameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.Generation.ITFParameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.Generation.DotCodeParameters">
      <summary>
            DotCode parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.DotCodeParameters.DotCodeMask">
      <summary>
            Mask of Dotcode barcode.
            Default value: -1.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.DotCodeParameters.AspectRatio">
      <summary>
            Height/Width ratio of 2D BarCode module.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Generation.DotCodeParameters.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.Generation.DotCodeParameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.Generation.DotCodeParameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.Generation.Code16KParameters">
      <summary>
            Code16K parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Code16KParameters.AspectRatio">
      <summary>
            Height/Width ratio of 2D BarCode module.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Code16KParameters.QuietZoneLeftCoef">
      <summary>
            Size of the left quiet zone in xDimension.
            Default value: 10, meaning if xDimension = 2px than left quiet zone will be 20px.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Code16KParameters.QuietZoneRightCoef">
      <summary>
            Size of the right quiet zone in xDimension.
            Default value: 1, meaning if xDimension = 2px than right quiet zone will be 2px.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Generation.Code16KParameters.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.Generation.Code16KParameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.Generation.Code16KParameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.Generation.DataMatrixParameters">
      <summary>
            DataMatrix parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.DataMatrixParameters.DataMatrixEcc">
      <summary>
            Gets or sets a Datamatrix ECC type.
            Default value: DataMatrixEccType.Ecc200.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.DataMatrixParameters.DataMatrixEncodeMode">
      <summary>
            Encode mode of Datamatrix barcode.
            Default value: DataMatrixEncodeMode.Auto.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.DataMatrixParameters.MacroCharacters">
      <summary>
            Macro Characters 05 and 06 values are used to obtain more compact encoding in special modes.
            Can be used only with DataMatrixEccType.Ecc200 or DataMatrixEccType.EccAuto.
            Cannot be used with EncodeTypes.GS1DataMatrix
            Default value: MacroCharacters.None.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.DataMatrixParameters.Columns">
      <summary>
            Columns count.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.DataMatrixParameters.Rows">
      <summary>
            Rows count.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.DataMatrixParameters.AspectRatio">
      <summary>
            Height/Width ratio of 2D BarCode module.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.DataMatrixParameters.CodeTextEncoding">
      <summary>
            Gets or sets the encoding of codetext.
            Default value: UTF-8
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Generation.DataMatrixParameters.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.Generation.DataMatrixParameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.Generation.DataMatrixParameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.Generation.CodablockParameters">
      <summary>
            Codablock parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.CodablockParameters.Columns">
      <summary>
            Columns count.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.CodablockParameters.Rows">
      <summary>
            Rows count.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.CodablockParameters.AspectRatio">
      <summary>
            Height/Width ratio of 2D BarCode module.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Generation.CodablockParameters.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.Generation.CodablockParameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.Generation.CodablockParameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.Generation.DataBarParameters">
      <summary>
            Databar parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.DataBarParameters.Is2DCompositeComponent">
      <summary>
            Enables flag of 2D composite component with DataBar barcode
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.DataBarParameters.IsAllowOnlyGS1Encoding">
      <summary>
            If this flag is set, it allows only GS1 encoding standard for Databar barcode types
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.DataBarParameters.Columns">
      <summary>
            Columns count.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.DataBarParameters.Rows">
      <summary>
            Rows count.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.DataBarParameters.AspectRatio">
      <summary>
            Height/Width ratio of 2D BarCode module.
            Used for DataBar stacked.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Generation.DataBarParameters.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.Generation.DataBarParameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.Generation.DataBarParameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.Generation.AustralianPostParameters">
      <summary>
            AustralianPost barcode parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.AustralianPostParameters.AustralianPostShortBarHeight">
      <summary>
            Short bar's height of AustralianPost barcode.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.AustralianPostParameters.AustralianPostEncodingTable">
      <summary>
            Interpreting type for the Customer Information of AustralianPost, default to CustomerInformationInterpretingType.Other"
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Generation.AustralianPostParameters.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.Generation.AustralianPostParameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.Generation.AustralianPostParameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.Generation.PostalParameters">
      <summary>
            Postal parameters. Used for Postnet, Planet.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.PostalParameters.PostalShortBarHeight">
      <summary>
            Short bar's height of Postal barcodes.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Generation.PostalParameters.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.Generation.PostalParameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.Generation.PostalParameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.Generation.PatchCodeParameters">
      <summary>
            PatchCode parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.PatchCodeParameters.ExtraBarcodeText">
      <summary>
            Specifies codetext for an extra QR barcode, when PatchCode is generated in page mode.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.PatchCodeParameters.PatchFormat">
      <summary>
            PatchCode format. Choose PatchOnly to generate single PatchCode. Use page format to generate Patch page with PatchCodes as borders.
            Default value: PatchFormat.PatchOnly
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Generation.PatchCodeParameters.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.Generation.PatchCodeParameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.Generation.PatchCodeParameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.Generation.BaseGenerationParameters">
      <summary>
            Barcode image generation parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BaseGenerationParameters.BackColor">
      <summary>
            Background color of the barcode image.
            Default value: Color.White.
            See <see cref="T:System.Drawing.Color" />.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BaseGenerationParameters.Resolution">
      <summary>
            Gets or sets the resolution of the BarCode image.
            One value for both dimensions.
            Default value: 96 dpi.
            </summary>
      <exception cref="T:System.ArgumentException">
        <p>The <b>Resolution</b> parameter value is less than or equal to 0.</p>
      </exception>
    </member>
    <member name="P:Aspose.BarCode.Generation.BaseGenerationParameters.RotationAngle">
      <summary>
            BarCode image rotation angle, measured in degree, e.g. RotationAngle = 0 or RotationAngle = 360 means no rotation.
            If RotationAngle NOT equal to 90, 180, 270 or 0, it may increase the difficulty for the scanner to read the image.
            Default value: 0.
            </summary>
      <example>
            This sample shows how to create and save a BarCode image.
            <code>
            [C#]
              using (var generator = new BarcodeGenerator(EncodeTypes.DataMatrix))
              {
                  generator.Parameters.RotationAngle = 7f;
                  generator.Save("test.png");
              }
            </code></example>
    </member>
    <member name="P:Aspose.BarCode.Generation.BaseGenerationParameters.CaptionAbove">
      <summary>
            Caption Above the BarCode image. See <see cref="T:Aspose.BarCode.Generation.CaptionParameters" />.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BaseGenerationParameters.CaptionBelow">
      <summary>
            Caption Below the BarCode image. See <see cref="T:Aspose.BarCode.Generation.CaptionParameters" />.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BaseGenerationParameters.AutoSizeMode">
      <summary>
            Specifies the different types of automatic sizing modes.
            Default value: AutoSizeMode.None.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BaseGenerationParameters.ImageHeight">
      <summary>
            BarCode image height when <see cref="P:Aspose.BarCode.Generation.BaseGenerationParameters.AutoSizeMode" /> property is set to AutoSizeMode.Nearest or AutoSizeMode.Interpolation.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BaseGenerationParameters.ImageWidth">
      <summary>
            BarCode image width when <see cref="P:Aspose.BarCode.Generation.BaseGenerationParameters.AutoSizeMode" /> property is set to AutoSizeMode.Nearest or AutoSizeMode.Interpolation.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BaseGenerationParameters.Barcode">
      <summary>
            Gets the <see cref="T:Aspose.BarCode.Generation.BarcodeParameters" /> that contains all barcode properties.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BaseGenerationParameters.Border">
      <summary>
            Gets the <see cref="T:Aspose.BarCode.Generation.BorderParameters" /> that contains all configuration properties for barcode border.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.BorderDashStyle">
      <summary>
            Specifies the style of dashed border lines.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.BorderDashStyle.Solid">
      <summary>
            Specifies a solid line.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.BorderDashStyle.Dash">
      <summary>
            Specifies a line consisting of dashes.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.BorderDashStyle.Dot">
      <summary>
            Specifies a line consisting of dots.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.BorderDashStyle.DashDot">
      <summary>
            Specifies a line consisting of a repeating pattern of dash-dot.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.BorderDashStyle.DashDotDot">
      <summary>
            Specifies a line consisting of a repeating pattern of dash-dot-dot.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.BorderParameters">
      <summary>
            Barcode image border parameters
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BorderParameters.Visible">
      <summary>
            Border visibility. If false than parameter Width is always ignored (0).
            Default value: false.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BorderParameters.Width">
      <summary>
            Border width.
            Default value: 0.
            Ignored if Visible is set to false.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Generation.BorderParameters.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.Generation.BorderParameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.Generation.BorderParameters" />.</returns>
    </member>
    <member name="P:Aspose.BarCode.Generation.BorderParameters.DashStyle">
      <summary>
            Border dash style.
            Default value: BorderDashStyle.Solid.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.BorderParameters.Color">
      <summary>
            Border color.
            Default value: Color.Black.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.CaptionParameters">
      <summary>
            Caption parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.CaptionParameters.Text">
      <summary>
            Caption text.
            Default value: empty string.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.CaptionParameters.Font">
      <summary>
            Caption font.
            Default value: Arial 8pt regular.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.CaptionParameters.Visible">
      <summary>
            Caption text visibility.
            Default value: false.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.CaptionParameters.TextColor">
      <summary>
            Caption text color.
            Default value: Color.Black.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.CaptionParameters.Padding">
      <summary>
            Captions paddings.
            Default value for CaptionAbove: 5pt 5pt 0 5pt.
            Default value for CaptionBelow: 0 5pt 5pt 5pt.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.CaptionParameters.Alignment">
      <summary>
            Caption test horizontal alignment.
            Default value: StringAlignment.Center.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.CaptionParameters.NoWrap">
      <summary>
            Specify word wraps (line breaks) within text.
            Default value: false.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.CodabarChecksumMode">
      <summary>
            Specifies the checksum algorithm for Codabar
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.CodabarChecksumMode.Mod10">
      <summary>
            Specifies Mod 10 algorithm for Codabar.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.CodabarChecksumMode.Mod16">
      <summary>
            Specifies Mod 16 algorithm for Codabar (recomended AIIM).
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.CodabarSymbol">
      <summary>
            Specifies the start or stop symbol of the Codabar barcode specification.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.CodabarSymbol.A">
      <summary>
            Specifies character A as the start or stop symbol of the Codabar barcode specification.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.CodabarSymbol.B">
      <summary>
            Specifies character B as the start or stop symbol of the Codabar barcode specification.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.CodabarSymbol.C">
      <summary>
            Specifies character C as the start or stop symbol of the Codabar barcode specification.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.CodabarSymbol.D">
      <summary>
            Specifies character D as the start or stop symbol of the Codabar barcode specification.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.FontMode">
      <summary>
            Font size mode.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.FontMode.Auto">
      <summary>
            Automatically calculate Font size based on barcode size.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.FontMode.Manual">
      <summary>
            Use Font sized defined by user.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.CodeLocation">
      <summary>
            Codetext location
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.CodeLocation.Below">
      <summary>
            Codetext below barcode.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.CodeLocation.Above">
      <summary>
            Codetext above barcode.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.CodeLocation.None">
      <summary>
            Hide codetext.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.CodetextParameters">
      <summary>
            Codetext parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.CodetextParameters.TwoDDisplayText">
      <summary>
            Text that will be displayed instead of codetext in 2D barcodes.
            Used for: Aztec, Pdf417, DataMatrix, QR, MaxiCode, DotCode
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.CodetextParameters.FontMode">
      <summary>
            Specify FontMode. If FontMode is set to Auto, font size will be calculated automatically based on xDimension value.
            It is recommended to use FontMode.Auto especially in AutoSizeMode.Nearest or AutoSizeMode.Interpolation.
            Default value: FontMode.Auto.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.CodetextParameters.Font">
      <summary>
            Specify the displaying CodeText's font.
            Default value: Arial 5pt regular.
            Ignored if FontMode is set to FontMode.Auto.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.CodetextParameters.Space">
      <summary>
            Space between the CodeText and the BarCode in <see cref="T:Aspose.BarCode.Generation.Unit" /> value.
            Default value: 2pt.
            Ignored for EAN8, EAN13, UPCE, UPCA, ISBN, ISMN, ISSN, UpcaGs1DatabarCoupon.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.CodetextParameters.Alignment">
      <summary>
            Gets or sets the alignment of the code text.
            Default value: StringAlignment.Center.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.CodetextParameters.Color">
      <summary>
            Specify the displaying CodeText's Color.
            Default value: Color.Black.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.CodetextParameters.Location">
      <summary>
            Specify the displaying CodeText Location, set to CodeLocation.None to hide CodeText.
            Default value: CodeLocation.Below.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.CodetextParameters.NoWrap">
      <summary>
            Specify word wraps (line breaks) within text.
            Default value: false.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Generation.CodetextParameters.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.Generation.CodetextParameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.Generation.CodetextParameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.Generation.DataMatrixEccType">
      <summary>
            Specify the type of the ECC to encode.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.DataMatrixEccType.EccAuto">
      <summary>
            Specifies that encoded Ecc type is defined by default Reed-Solomon error correction or ECC 200.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.DataMatrixEccType.Ecc000">
      <summary>
            Specifies that encoded Ecc type is defined ECC 000.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.DataMatrixEccType.Ecc050">
      <summary>
            Specifies that encoded Ecc type is defined ECC 050.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.DataMatrixEccType.Ecc080">
      <summary>
            Specifies that encoded Ecc type is defined ECC 080.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.DataMatrixEccType.Ecc100">
      <summary>
            Specifies that encoded Ecc type is defined ECC 100.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.DataMatrixEccType.Ecc140">
      <summary>
            Specifies that encoded Ecc type is defined ECC 140.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.DataMatrixEccType.Ecc200">
      <summary>
            Specifies that encoded Ecc type is defined ECC 200. Recommended to use.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.DataMatrixEncodeMode">
      <summary>
            DataMatrix encoder's encoding mode, default to Auto
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.DataMatrixEncodeMode.Auto">
      <summary>
            Automatically pick up the best encode mode for Datamatrix encoding
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.DataMatrixEncodeMode.ASCII">
      <summary>
            Encodes one alphanumeric or two numeric characters per byte
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.DataMatrixEncodeMode.Full">
      <summary>
            Encode 8 bit values
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.DataMatrixEncodeMode.Custom">
      <summary>
            Encode with the encoding specified in BarcodeGenerator.Parameters.Barcode.DataMatrix.CodeTextEncoding
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.DataMatrixEncodeMode.C40">
      <summary>
            Uses C40 encoding. Encodes Upper-case alphanumeric, Lower case and special characters
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.DataMatrixEncodeMode.Text">
      <summary>
            Uses Text encoding. Encodes Lower-case alphanumeric, Upper case and special characters
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.DataMatrixEncodeMode.EDIFACT">
      <summary>
            Uses EDIFACT encoding. Uses six bits per character, encodes digits, upper-case letters, and many punctuation marks, but has no support for lower-case letters.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.DataMatrixEncodeMode.ANSIX12">
      <summary>
            Uses ANSI X12 encoding.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.DataMatrixEncodeMode.ExtendedCodetext">
      <summary>
        <para>ExtendedCodetext mode allows to manually switch encodation schemes in codetext.</para>
        <para>Format : "\Encodation_scheme_name:text\Encodation_scheme_name:text".</para>
        <para>Allowed encodation schemes are: EDIFACT, ANSIX12, ASCII, C40, Text, Auto.</para>
        <para>Extended codetext example: @"\ansix12:ANSIX12TEXT\ascii:backslash must be \\ doubled\edifact:EdifactEncodedText"</para>
        <para>All backslashes (\) must be doubled in text.</para>
      </summary>
      <example>
            This sample shows how to do codetext in Extended Mode.
            <code>
            [C#]
            using (Aspose.BarCode.Generation.BarcodeGenerator generator = new Aspose.BarCode.Generation.BarcodeGenerator(EncodeTypes.DataMatrix))
            {
                generator.CodeText = @"\ansix12:ANSIX12TEXT\ascii:backslash must be \\ doubled\edifact:EdifactEncodedText";
                generator.Parameters.Barcode.DataMatrix.DataMatrixEncodeMode = DataMatrixEncodeMode.ExtendedCodetext;
                generator.Parameters.Barcode.CodeTextParameters.TwoDDisplayText = "My Text";
                generator.Save("test.png");
            }
            [VB.NET]
            Using generator As New Aspose.BarCode.Generation.BarcodeGenerator(EncodeTypes.DataMatrix)
                generator.CodeText = "\\ansix12:ANSIX12TEXT\\ascii:backslash must be \\\\ escaped and doubled\\edifact:EdifactEncodedText"
                generator.Parameters.Barcode.DataMatrix.DataMatrixEncodeMode = DataMatrixEncodeMode.ExtendedCodetext
                generator.Parameters.Barcode.CodeTextParameters.TwoDDisplayText = "My Text"
                generator.Save("test.png")
            End Using
            </code></example>
    </member>
    <member name="T:Aspose.BarCode.Generation.ECIEncodings">
      <summary>
        <para>
            Extended Channel Interpretation Identifiers. It is used to tell the barcode reader details 
            about the used references for encoding the data in the symbol.
            Current implementation consists all well known charset encodings.
            Currently, it is used only for QR 2D barcode.
            </para>
      </summary>
      <example>
            This sample shows how to use ECI encoding and save a BarCode image.
            <code>
            [C#]
            using (Aspose.BarCode.Generation.BarcodeGenerator generator = new Aspose.BarCode.Generation.BarcodeGenerator(EncodeTypes.QR))
            {
                generator.CodeText = "12345TEXT";
                generator.Parameters.Barcode.QR.QrEncodeMode = QREncodeMode.ECIEncoding;
                generator.Parameters.Barcode.QR.QrEncodeType = QREncodeType.ForceQR;
                generator.Parameters.Barcode.QR.QrECIEncoding = ECIEncodings.UTF8;
                generator.Save("test.png");
            }
            [VB.NET]
            Using generator As New Aspose.BarCode.Generation.BarcodeGenerator(EncodeTypes.QR)
                generator.CodeText = "12345TEXT"
                generator.Parameters.Barcode.QR.QrEncodeMode = QREncodeMode.ECIEncoding
                generator.Parameters.Barcode.QR.QrEncodeType = QREncodeType.ForceQR
                generator.Parameters.Barcode.QR.QrECIEncoding = ECIEncodings.UTF8
                generator.Save("test.png")
            End Using
            </code></example>
    </member>
    <member name="F:Aspose.BarCode.Generation.ECIEncodings.ISO_8859_1">
      <summary>ISO/IEC 8859-1 Latin alphabet No. 1 encoding. ECI Id:"\000003"</summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ECIEncodings.ISO_8859_2">
      <summary>ISO/IEC 8859-2 Latin alphabet No. 2 encoding. ECI Id:"\000004"</summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ECIEncodings.ISO_8859_3">
      <summary>ISO/IEC 8859-3 Latin alphabet No. 3 encoding. ECI Id:"\000005"</summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ECIEncodings.ISO_8859_4">
      <summary>ISO/IEC 8859-4 Latin alphabet No. 4 encoding. ECI Id:"\000006"</summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ECIEncodings.ISO_8859_5">
      <summary>ISO/IEC 8859-5 Latin/Cyrillic alphabet encoding. ECI Id:"\000007"</summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ECIEncodings.ISO_8859_6">
      <summary>ISO/IEC 8859-6 Latin/Arabic alphabet encoding. ECI Id:"\000008"</summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ECIEncodings.ISO_8859_7">
      <summary>ISO/IEC 8859-7 Latin/Greek alphabet encoding. ECI Id:"\000009"</summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ECIEncodings.ISO_8859_8">
      <summary>ISO/IEC 8859-8 Latin/Hebrew alphabet encoding. ECI Id:"\000010"</summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ECIEncodings.ISO_8859_9">
      <summary>ISO/IEC 8859-9 Latin alphabet No. 5 encoding. ECI Id:"\000011"</summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ECIEncodings.ISO_8859_10">
      <summary>ISO/IEC 8859-10 Latin alphabet No. 6 encoding. ECI Id:"\000012"</summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ECIEncodings.ISO_8859_11">
      <summary>ISO/IEC 8859-11 Latin/Thai alphabet encoding. ECI Id:"\000013"</summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ECIEncodings.ISO_8859_13">
      <summary>ISO/IEC 8859-13 Latin alphabet No. 7 (Baltic Rim) encoding. ECI Id:"\000015"</summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ECIEncodings.ISO_8859_14">
      <summary>ISO/IEC 8859-14 Latin alphabet No. 8 (Celtic) encoding. ECI Id:"\000016"</summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ECIEncodings.ISO_8859_15">
      <summary>ISO/IEC 8859-15 Latin alphabet No. 9 encoding. ECI Id:"\000017"</summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ECIEncodings.ISO_8859_16">
      <summary>ISO/IEC 8859-16 Latin alphabet No. 10 encoding. ECI Id:"\000018"</summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ECIEncodings.Shift_JIS">
      <summary>Shift JIS (JIS X 0208 Annex 1 + JIS X 0201) encoding. ECI Id:"\000020"</summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ECIEncodings.Win1250">
      <summary>Windows 1250 Latin 2 (Central Europe) encoding. ECI Id:"\000021"</summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ECIEncodings.Win1251">
      <summary>Windows 1251 Cyrillic encoding. ECI Id:"\000022"</summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ECIEncodings.Win1252">
      <summary>Windows 1252 Latin 1 encoding. ECI Id:"\000023"</summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ECIEncodings.Win1256">
      <summary>Windows 1256 Arabic encoding. ECI Id:"\000024"</summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ECIEncodings.UTF16BE">
      <summary>ISO/IEC 10646 UCS-2 (High order byte first) encoding. ECI Id:"\000025"</summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ECIEncodings.UTF8">
      <summary>ISO/IEC 10646 UTF-8 encoding. ECI Id:"\000026"</summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ECIEncodings.US_ASCII">
      <summary>ISO/IEC 646:1991 International Reference Version of ISO 7-bit coded character set encoding. ECI Id:"\000027"</summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ECIEncodings.Big5">
      <summary>Big 5 (Taiwan) Chinese Character Set encoding. ECI Id:"\000028"</summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ECIEncodings.GB18030">
      <summary>GB (PRC) Chinese Character Set encoding. ECI Id:"\000029"</summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ECIEncodings.EUC_KR">
      <summary>Korean Character Set encoding. ECI Id:"\000030"</summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ECIEncodings.NONE">
      <summary>No Extended Channel Interpretation</summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.EnableChecksum">
      <summary>
        <para>Enable checksum during generation for 1D barcodes.</para>
        <para>Default is treated as Yes for symbologies which must contain checksum, as No where checksum only possible.</para>
        <para>Checksum never used: Codabar</para>
        <para>Checksum is possible: Code39 Standard/Extended, Standard2of5, Interleaved2of5, Matrix2of5, ItalianPost25, DeutschePostIdentcode, DeutschePostLeitcode, VIN</para>
        <para>Checksum always used: Rest symbologies</para>
      </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EnableChecksum.Default">
      <summary>
            If checksum is required by the specification - it will be attached.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EnableChecksum.Yes">
      <summary>
            Always use checksum if possible.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.EnableChecksum.No">
      <summary>
            Do not use checksum.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.ITF14BorderType">
      <summary>
            ITF14 border type of barcode
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ITF14BorderType.None">
      <summary>
            No border enclosing the barcode
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ITF14BorderType.Frame">
      <summary>
            Frame enclosing the barcode
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ITF14BorderType.Bar">
      <summary>
            Two horizontal bars enclosing the barcode
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ITF14BorderType.FrameOut">
      <summary>
            Frame enclosing the barcode. It drawn outside of the barcode, and does not affect the height
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.ITF14BorderType.BarOut">
      <summary>
            Two horizontal bars enclosing the barcode. It drawn outside of the barcode, and does not affect the height
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.MacroCharacter">
      <summary>
            Macro Characters 05 and 06 values are used to obtain more compact encoding in special modes.
            05 Macro craracter is translated to "[)&gt;\u001E05\u001D" as decoded data header and "\u001E\u0004" as decoded data trailer.
            06 Macro craracter is translated to "[)&gt;\u001E06\u001D" as decoded data header and "\u001E\u0004" as decoded data trailer.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.MacroCharacter.None">
      <summary>
            None of Macro Characters are added to barcode data
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.MacroCharacter.Macro05">
      <summary>
            05 Macro craracter is added to barcode data in first position.
            GS1 Data Identifier ISO 15434
            Character is translated to "[)&gt;\u001E05\u001D" as decoded data header and "\u001E\u0004" as decoded data trailer.
            </summary>
      <example>
            This sample shows how to detect Code39 and Code128 barcodes.
            <code>
            [C#]
            //to generate autoidentified GS1 message like this "(10)123ABC(10)123ABC" in ISO 15434 format you need:
            BarcodeGenerator generator = new BarcodeGenerator(EncodeTypes.DataMatrix, "10123ABC\u001D10123ABC");
            generator.Parameters.Barcode.DataMatrix.MacroCharacters = MacroCharacter.Macro05;
            BarCodeReader reader = new BarCodeReader(generator.GenerateBarCodeImage(), DecodeType.GS1DataMatrix);
            foreach (BarCodeResult result in reader.ReadBarCodes())
                Console.WriteLine("BarCode CodeText: " + result.CodeText);
            </code></example>
    </member>
    <member name="F:Aspose.BarCode.Generation.MacroCharacter.Macro06">
      <summary>
            06 Macro craracter is added to barcode data in first position.
            ASC MH10 Data Identifier ISO 15434
            Character is translated to "[)&gt;\u001E06\u001D" as decoded data header and "\u001E\u0004" as decoded data trailer.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.Padding">
      <summary>
            Paddings parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Padding.Top">
      <summary>
            Top padding.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Padding.Bottom">
      <summary>
            Bottom padding.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Padding.Right">
      <summary>
            Right padding.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Padding.Left">
      <summary>
            Left padding.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Generation.Padding.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.Generation.Padding" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.Generation.Padding" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.Generation.PatchFormat">
      <summary>
            PatchCode format. Choose PatchOnly to generate single PatchCode. Use page format to generate Patch page with PatchCodes as borders
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.PatchFormat.PatchOnly">
      <summary>
            Generates PatchCode only
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.PatchFormat.A4">
      <summary>
            Generates A4 format page with PatchCodes as borders and optional QR in the center
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.PatchFormat.A4_LANDSCAPE">
      <summary>
            Generates A4 landscape format page with PatchCodes as borders and optional QR in the center
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.PatchFormat.US_Letter">
      <summary>
            Generates US letter format page with PatchCodes as borders and optional QR in the center
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.PatchFormat.US_Letter_LANDSCAPE">
      <summary>
            Generates US letter landscape format page with PatchCodes as borders and optional QR in the center
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.Pdf417CompactionMode">
      <summary>
            Pdf417 barcode compaction mode
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.Pdf417CompactionMode.Auto">
      <summary>
            auto detect compaction mode
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.Pdf417CompactionMode.Text">
      <summary>
            text compaction
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.Pdf417CompactionMode.Numeric">
      <summary>
            numeric compaction mode
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.Pdf417CompactionMode.Binary">
      <summary>
            binary compaction mode
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.Pdf417ErrorLevel">
      <summary>
            pdf417 barcode's error correction level, from level 0 to level 9, level 0 means no error correction, level 9 means best error correction
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.Pdf417ErrorLevel.Level0">
      <summary>
            level = 0.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.Pdf417ErrorLevel.Level1">
      <summary>
            level = 1.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.Pdf417ErrorLevel.Level2">
      <summary>
            level = 2.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.Pdf417ErrorLevel.Level3">
      <summary>
            level = 3.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.Pdf417ErrorLevel.Level4">
      <summary>
            level = 4.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.Pdf417ErrorLevel.Level5">
      <summary>
            level = 5.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.Pdf417ErrorLevel.Level6">
      <summary>
            level = 6.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.Pdf417ErrorLevel.Level7">
      <summary>
            level = 7.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.Pdf417ErrorLevel.Level8">
      <summary>
            level = 8.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.QREncodeMode">
      <summary>
            Encoding mode for QR barcodes. It is recommended to Use Auto with CodeTextEncoding = Encoding.UTF8 for Latin symbols or digits and Utf8BOM for Unicode symbols.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QREncodeMode.Auto">
      <summary>
            Encode codetext as is non-Unicode charset. If there is any Unicode character, the codetext will be encoded with value which is set in CodeTextEncoding.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QREncodeMode.Bytes">
      <summary>
            Encode codetext as plain bytes. If it detects any Unicode character, the character will be encoded as two bytes, lower byte first.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QREncodeMode.Utf8BOM">
      <summary>
            Encode codetext with UTF8 encoding with first ByteOfMark character.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QREncodeMode.Utf16BEBOM">
      <summary>
            Encode codetext with UTF8 encoding with first ByteOfMark character. It can be problems with some barcode scanners.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QREncodeMode.ECIEncoding">
      <summary>
            Encode codetext with value set in the ECIEncoding property. It can be problems with some old (pre 2006) barcode scanners.
            </summary>
      <example>
            This sample shows how to use ECI encoding and save a BarCode image.
            <code>
            [C#]
            using (Aspose.BarCode.Generation.BarcodeGenerator generator = new Aspose.BarCode.Generation.BarcodeGenerator(EncodeTypes.QR))
            {
                generator.CodeText = "12345TEXT";
                generator.Parameters.Barcode.QR.QrEncodeMode = QREncodeMode.ECIEncoding;
                generator.Parameters.Barcode.QR.QrEncodeType = QREncodeType.ForceQR;
                generator.Parameters.Barcode.QR.QrECIEncoding = ECIEncodings.UTF8;
                generator.Save("test.png");
            }
            [VB.NET]
            Using generator As New Aspose.BarCode.Generation.BarcodeGenerator(EncodeTypes.QR)
                generator.CodeText = "12345TEXT"
                generator.Parameters.Barcode.QR.QrEncodeMode = QREncodeMode.ECIEncoding
                generator.Parameters.Barcode.QR.QrEncodeType = QREncodeType.ForceQR
                generator.Parameters.Barcode.QR.QrECIEncoding = ECIEncodings.UTF8
                generator.Save("test.png")
            End Using
            </code></example>
    </member>
    <member name="F:Aspose.BarCode.Generation.QREncodeMode.ExtendedCodetext">
      <summary>
        <para>Extended Channel mode which supports FNC1 first position, FNC1 second position and multi ECI modes.</para>
        <para>It is better to use QrExtCodetextBuilder for extended codetext generation.</para>
        <para>Use Display2DText property to set visible text to removing managing characters.</para>
        <para>Encoding Principles:</para>
        <para>All symbols "\" must be doubled "\\" in the codetext.</para>
        <para>FNC1 in first position is set in codetext as as "&lt;FNC1&gt;"</para>
        <para>FNC1 in second position is set in codetext as as "&lt;FNC1(value)&gt;". The value must be single symbols (a-z, A-Z) or digits from 0 to 99.</para>
        <para>Group Separator for FNC1 modes is set as 0x1D character '\\u001D' </para>
        <para> If you need to insert "&lt;FNC1&gt;" string into barcode write it as "&lt;\FNC1&gt;" </para>
        <para>ECI identifiers are set as single slash and six digits identifier "\000026" - UTF8 ECI identifier</para>
        <para>TO disable current ECI mode and convert to default JIS8 mode zero mode ECI indetifier is set. "\000000"</para>
        <para>All unicode characters after ECI identifier are automatically encoded into correct character codeset.</para>
      </summary>
      <example>
            This sample shows how to use FNC1 first position in Extended Mode.
            <code>
            [C#]
            //create codetext
            QrExtCodetextBuilder textBuilder = new QrExtCodetextBuilder();
            textBuilder.AddFNC1FirstPosition();
            textBuilder.AddPlainCodetext("000%89%%0");
            textBuilder.AddFNC1GroupSeparator();
            textBuilder.AddPlainCodetext("12345&lt;FNC1&gt;");
            //generate barcode
            using (Aspose.BarCode.Generation.BarcodeGenerator generator = new Aspose.BarCode.Generation.BarcodeGenerator(EncodeTypes.QR))
            {
                generator.CodeText = textBuilder.GetExtendedCodetext();
                generator.Parameters.Barcode.QR.QrEncodeMode = QREncodeMode.ExtendedCodetext;
                generator.Parameters.Barcode.CodeTextParameters.TwoDDisplayText = "My Text";
                generator.Save(@"d:\test.png");
            }
            [VB.NET]
            'create codetext
            Dim textBuilder As New QrExtCodetextBuilder()
            textBuilder.AddFNC1FirstPosition()
            textBuilder.AddPlainCodetext("000%89%%0")
            textBuilder.AddFNC1GroupSeparator()
            textBuilder.AddPlainCodetext("12345&lt;FNC1&gt;")
            'generate barcode
            Using generator As New Aspose.BarCode.Generation.BarcodeGenerator(EncodeTypes.QR)
                generator.CodeText = textBuilder.GetExtendedCodetext()
                generator.Parameters.Barcode.QR.QrEncodeMode = QREncodeMode.ExtendedCodetext
                generator.Parameters.Barcode.CodeTextParameters.TwoDDisplayText = "My Text"
                generator.Save("test.png")
            End Using
            </code></example>
      <example>
            This sample shows how to use FNC1 second position in Extended Mode.
            <code>
            [C#]
            //create codetext
            QrExtCodetextBuilder textBuilder = new QrExtCodetextBuilder();
            textBuilder.AddFNC1SecondPosition("12");
            textBuilder.AddPlainCodetext("TRUE3456"); 
            //generate barcode
            using (Aspose.BarCode.Generation.BarcodeGenerator generator = new Aspose.BarCode.Generation.BarcodeGenerator(EncodeTypes.QR))
            {
                generator.CodeText = textBuilder.GetExtendedCodetext();
                generator.Parameters.Barcode.QR.QrEncodeMode = QREncodeMode.ExtendedCodetext;
                generator.Parameters.Barcode.CodeTextParameters.TwoDDisplayText = "My Text";
                generator.Save(@"d:\test.png");
            }
            [VB.NET]
            'create codetext
            Dim textBuilder As New QrExtCodetextBuilder()
            textBuilder.AddFNC1SecondPosition("12")
            textBuilder.AddPlainCodetext("TRUE3456")
            'generate barcode
            Using generator As New Aspose.BarCode.Generation.BarcodeGenerator(EncodeTypes.QR)
                generator.CodeText = textBuilder.GetExtendedCodetext()
                generator.Parameters.Barcode.QR.QrEncodeMode = QREncodeMode.ExtendedCodetext
                generator.Parameters.Barcode.CodeTextParameters.TwoDDisplayText = "My Text"
                generator.Save("test.png")
            End Using        
            </code></example>
      <example>
            This sample shows how to use multi ECI mode in Extended Mode.
            <code>
            [C#]
            //create codetext
            QrExtCodetextBuilder textBuilder = new QrExtCodetextBuilder();
            textBuilder.AddECICodetext(ECIEncodings.Win1251, "Will");
            textBuilder.AddECICodetext(ECIEncodings.UTF8, "Right");
            textBuilder.AddECICodetext(ECIEncodings.UTF16BE, "Power");
            textBuilder.AddPlainCodetext(@"t\e\\st");   
            //generate barcode
            using (Aspose.BarCode.Generation.BarcodeGenerator generator = new Aspose.BarCode.Generation.BarcodeGenerator(EncodeTypes.QR))
            {
                generator.CodeText = textBuilder.GetExtendedCodetext();
                generator.Parameters.Barcode.QR.QrEncodeMode = QREncodeMode.ExtendedCodetext;
                generator.Parameters.Barcode.CodeTextParameters.TwoDDisplayText = "My Text";
                generator.Save(@"d:\test.png");
            }
            [VB.NET]
            'create codetext
            Dim textBuilder As New QrExtCodetextBuilder()
            textBuilder.AddECICodetext(ECIEncodings.Win1251, "Will")
            textBuilder.AddECICodetext(ECIEncodings.UTF8, "Right")
            textBuilder.AddECICodetext(ECIEncodings.UTF16BE, "Power")
            textBuilder.AddPlainCodetext(@"t\e\\st") 
            'generate barcode
            Using generator As New Aspose.BarCode.Generation.BarcodeGenerator(EncodeTypes.QR)
                generator.CodeText = textBuilder.GetExtendedCodetext()
                generator.Parameters.Barcode.QR.QrEncodeMode = QREncodeMode.ExtendedCodetext
                generator.Parameters.Barcode.CodeTextParameters.TwoDDisplayText = "My Text"
                generator.Save("test.png")
            End Using   
            </code></example>
    </member>
    <member name="T:Aspose.BarCode.Generation.QREncodeType">
      <summary>
            QR / MicroQR selector mode. Select ForceQR for standard QR symbols, Auto for MicroQR.
            ForceMicroQR is used for strongly MicroQR symbol generation if it is possible.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QREncodeType.Auto">
      <summary>
            Mode starts barcode version negotiation from MicroQR V1
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QREncodeType.ForceQR">
      <summary>
            Mode starts barcode version negotiation from QR V1
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QREncodeType.ForceMicroQR">
      <summary>
            Mode starts barcode version negotiation from from MicroQR V1 to V4. If data cannot be encoded into MicroQR, exception is thrown.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.QRErrorLevel">
      <summary>
            Level of Reed-Solomon error correction. From low to high: LevelL, LevelM, LevelQ, LevelH.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRErrorLevel.LevelL">
      <summary>
            Allows recovery of 7% of the code text
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRErrorLevel.LevelM">
      <summary>
            Allows recovery of 15% of the code text
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRErrorLevel.LevelQ">
      <summary>
            Allows recovery of 25% of the code text
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRErrorLevel.LevelH">
      <summary>
            Allows recovery of 30% of the code text
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.QRVersion">
      <summary>
            Version of QR Code.
            From Version1 to Version40 for QR code and from M1 to M4 for MicroQr.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Auto">
      <summary>
            Specifies to automatically pick up the best version for QR.
            This is default value.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version01">
      <summary>
            Specifies version 1 with 21 x 21 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version02">
      <summary>
            Specifies version 2 with 25 x 25 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version03">
      <summary>
            Specifies version 3 with 29 x 29 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version04">
      <summary>
            Specifies version 4 with 33 x 33 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version05">
      <summary>
            Specifies version 5 with 37 x 37 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version06">
      <summary>
            Specifies version 6 with 41 x 41 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version07">
      <summary>
            Specifies version 7 with 45 x 45 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version08">
      <summary>
            Specifies version 8 with 49 x 49 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version09">
      <summary>
            Specifies version 9 with 53 x 53 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version10">
      <summary>
            Specifies version 10 with 57 x 57 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version11">
      <summary>
            Specifies version 11 with 61 x 61 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version12">
      <summary>
            Specifies version 12 with 65 x 65 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version13">
      <summary>
            Specifies version 13 with 69 x 69 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version14">
      <summary>
            Specifies version 14 with 73 x 73 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version15">
      <summary>
            Specifies version 15 with 77 x 77 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version16">
      <summary>
            Specifies version 16 with 81 x 81 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version17">
      <summary>
            Specifies version 17 with 85 x 85 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version18">
      <summary>
            Specifies version 18 with 89 x 89 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version19">
      <summary>
            Specifies version 19 with 93 x 93 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version20">
      <summary>
            Specifies version 20 with 97 x 97 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version21">
      <summary>
            Specifies version 21 with 101 x 101 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version22">
      <summary>
            Specifies version 22 with 105 x 105 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version23">
      <summary>
            Specifies version 23 with 109 x 109 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version24">
      <summary>
            Specifies version 24 with 113 x 113 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version25">
      <summary>
            Specifies version 25 with 117 x 117 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version26">
      <summary>
            Specifies version 26 with 121 x 121 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version27">
      <summary>
            Specifies version 27 with 125 x 125 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version28">
      <summary>
            Specifies version 28 with 129 x 129 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version29">
      <summary>
            Specifies version 29 with 133 x 133 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version30">
      <summary>
            Specifies version 30 with 137 x 137 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version31">
      <summary>
            Specifies version 31 with 141 x 141 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version32">
      <summary>
            Specifies version 32 with 145 x 145 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version33">
      <summary>
            Specifies version 33 with 149 x 149 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version34">
      <summary>
            Specifies version 34 with 153 x 153 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version35">
      <summary>
            Specifies version 35 with 157 x 157 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version36">
      <summary>
            Specifies version 36 with 161 x 161 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version37">
      <summary>
            Specifies version 37 with 165 x 165 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version38">
      <summary>
            Specifies version 38 with 169 x 169 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version39">
      <summary>
            Specifies version 39 with 173 x 173 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.Version40">
      <summary>
            Specifies version 40 with 177 x 177 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.VersionM1">
      <summary>
            Specifies version M1 for Micro QR with 11 x 11 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.VersionM2">
      <summary>
            Specifies version M2 for Micro QR with 13 x 13 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.VersionM3">
      <summary>
            Specifies version M3 for Micro QR with 15 x 15 modules.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.QRVersion.VersionM4">
      <summary>
            Specifies version M4 for Micro QR with 17 x 17 modules.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.TextAlignment">
      <summary>
            Text alignment.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.TextAlignment.Left">
      <summary>
            Left position.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.TextAlignment.Center">
      <summary>
            Center position.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.TextAlignment.Right">
      <summary>
            Right position.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.FontUnit">
      <summary>
            Defines a particular format for text, including font face, size, and style attributes
            where size in Unit value property.
            </summary>
      <example>
            This sample shows how to create and save a BarCode image.
            <code>
            [C#]
              using (BarcodeGenerator generator = new BarcodeGenerator(EncodeTypes.Code128))
              {
                  generator.CodeTextStyle.Font.Style = FontStyle.Italic;
                  generator.CodeTextStyle.Font.Size.Point = 18;
                  generator.Save("test.png");
              }
            </code></example>
    </member>
    <member name="P:Aspose.BarCode.Generation.FontUnit.FamilyName">
      <summary>
            Gets or sets the face name of this Font.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.FontUnit.Style">
      <summary>
            Gets or sets style information for this FontUnit.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.FontUnit.Size">
      <summary>
            Gets or sets size of this FontUnit in Unit value.
            </summary>
      <exception cref="T:System.ArgumentException">
        <p>The <b>Size</b> parameter value is less than or equal to 0.</p>
      </exception>
    </member>
    <member name="T:Aspose.BarCode.Generation.Unit">
      <summary>
            Specifies the size value in different units (Pixel, Inches, etc.).
            </summary>
      <example>
            This sample shows how to create and save a BarCode image.
            <code>
            [C#]
              using (BarcodeGenerator generator = new BarcodeGenerator(EncodeTypes.Code128))
              {
                  generator.Parameters.Barcode.BarHeight.Millimeters = 10;
                  generator.Save("test.png");
              }
            </code></example>
    </member>
    <member name="P:Aspose.BarCode.Generation.Unit.Pixels">
      <summary>
            Gets or sets size value in pixels.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Unit.Inches">
      <summary>
            Gets or sets size value in inches.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Unit.Millimeters">
      <summary>
            Gets or sets size value in millimeters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Unit.Point">
      <summary>
            Gets or sets size value in point.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Generation.Unit.Document">
      <summary>
            Gets or sets size value in document units.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Generation.Unit.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.Generation.Unit" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.Generation.Unit" />.</returns>
    </member>
    <member name="M:Aspose.BarCode.Generation.Unit.Equals(System.Object)">
      <summary>
            Determines whether this instance and a specified object,
            which must also be a <see cref="T:Aspose.BarCode.Generation.Unit" /> object, have the same value.
            </summary>
      <param name="obj">The <see cref="T:Aspose.BarCode.Generation.Unit" /> to compare to this instance.</param>
      <returns>true if obj is a <see cref="T:Aspose.BarCode.Generation.Unit" /> and its value is the same as this instance;
            otherwise, false. If obj is null, the method returns false.</returns>
    </member>
    <member name="M:Aspose.BarCode.Generation.Unit.GetHashCode">
      <summary>
            Returns the hash code for this object.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:Aspose.BarCode.Generation.Unit.Resolution">
      <summary>
            Resolution
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.NamespaceDoc">
      <summary>
            The <b>Aspose.BarCode.Generation</b> containing general classes for the implementation of BarCode generation functions.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.Code128Emulation">
      <summary>
            Function codewords for Code 128 emulation. Applied for MicroPDF417 only. Ignored for PDF417 and MacroPDF417 barcodes.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.Code128Emulation.None">
      <summary>
            No Code 128 emulation
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.Code128Emulation.Code903">
      <summary>
            UCC/EAN-128 emulation. Text compactionmode implied.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.Code128Emulation.Code904">
      <summary>
            UCC/EAN-128 emulation. Numeric compactionmode implied.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.Generation.Code128Emulation.Code905">
      <summary>
            UCC/EAN-128 emulation. Implied “01” AI and 14-digit codetext.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Generation.ExtCodetextBuilder">
      <summary>
            Helper class for automatic codetext generation of the Extended Codetext Mode
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Generation.ExtCodetextBuilder.Clear">
      <summary>
            Clears extended codetext items
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Generation.ExtCodetextBuilder.AddPlainCodetext(System.String)">
      <summary>
            Adds plain codetext to the extended codetext items
            </summary>
      <param name="codetext">Codetext in unicode to add as extended codetext item</param>
    </member>
    <member name="M:Aspose.BarCode.Generation.ExtCodetextBuilder.AddECICodetext(Aspose.BarCode.Generation.ECIEncodings,System.String)">
      <summary>
            Adds codetext with Extended Channel Identifier
            </summary>
      <param name="ECIEncoding">Extended Channel Identifier</param>
      <param name="codetext">Codetext in unicode to add as extended codetext item with Extended Channel Identifier</param>
    </member>
    <member name="M:Aspose.BarCode.Generation.ExtCodetextBuilder.GetExtendedCodetext">
      <summary>
            Generate extended codetext from generation items list
            </summary>
      <returns>Return string of extended codetext</returns>
    </member>
    <member name="T:Aspose.BarCode.Generation.QrExtCodetextBuilder">
      <summary>
        <para>Extended codetext generator for 2D QR barcodes for ExtendedCodetext Mode of QrEncodeMode</para>
        <para>Use TwoDDisplayText property of BarcodeGenerator to set visible text to removing managing characters.</para>
      </summary>
      <example>
            This sample shows how to use FNC1 first position in Extended Mode.
            <code>
            [C#]
            //create codetext
            QrExtCodetextBuilder lTextBuilder = new QrExtCodetextBuilder();
            lTextBuilder.AddFNC1FirstPosition();
            lTextBuilder.AddPlainCodetext("000%89%%0");
            lTextBuilder.AddFNC1GroupSeparator();
            lTextBuilder.AddPlainCodetext("12345&lt;FNC1&gt;");
            
            //generate codetext
            string lCodetext = lTextBuilder.GetExtendedCodetext();
            
            //generate
            using(BarcodeGenerator generator = new BarcodeGenerator(EncodeTypes.QR))
            {
                generator.Parameters.Barcode.QR.QrEncodeMode = QREncodeMode.ExtendedCodetext;
                generator.Parameters.Barcode.QR.QrErrorLevel = QRErrorLevel.LevelL;
            	generator.CodeText = lCodetext;
                generator.Parameters.Barcode.CodeTextParameters.TwoDDisplayText = "My Text";
            	generator.Save("test.bmp");
            }
            </code></example>
      <example>
            This sample shows how to use FNC1 second position in Extended Mode.
            <code>
            [C#]
            //create codetext
            QrExtCodetextBuilder lTextBuilder = new QrExtCodetextBuilder();
            TextBuilder.AddFNC1SecondPosition("12");
            TextBuilder.AddPlainCodetext("TRUE3456"); 
            
            //generate codetext
            string lCodetext = lTextBuilder.GetExtendedCodetext();
            
            //generate
            using(BarcodeGenerator generator = new BarcodeGenerator(EncodeTypes.QR))
            {
                generator.Parameters.Barcode.QR.QrEncodeMode = QREncodeMode.ExtendedCodetext;
                generator.Parameters.Barcode.QR.QrErrorLevel = QRErrorLevel.LevelL;
            	generator.CodeText = lCodetext;
                generator.Parameters.Barcode.CodeTextParameters.TwoDDisplayText = "My Text";
            	generator.Save("test.bmp");
            }
            </code></example>
      <example>
            This sample shows how to use multi ECI mode in Extended Mode.
            <code>
            [C#]
            //create codetext
            QrExtCodetextBuilder lTextBuilder = new QrExtCodetextBuilder();
            TextBuilder.AddECICodetext(ECIEncodings.Win1251, "Will");
            TextBuilder.AddECICodetext(ECIEncodings.UTF8, "Right");
            TextBuilder.AddECICodetext(ECIEncodings.UTF16BE, "Power");
            TextBuilder.AddPlainCodetext(@"t\e\\st");   
            
            //generate codetext
            string lCodetext = lTextBuilder.GetExtendedCodetext();
            
            //generate
            using(BarcodeGenerator generator = new BarcodeGenerator(EncodeTypes.QR))
            {
                generator.Parameters.Barcode.QR.QrEncodeMode = QREncodeMode.ExtendedCodetext;
                generator.Parameters.Barcode.QR.QrErrorLevel = QRErrorLevel.LevelL;
            	generator.CodeText = lCodetext;
                generator.Parameters.Barcode.CodeTextParameters.TwoDDisplayText = "My Text";
            	generator.Save("test.bmp");
            }
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.Generation.QrExtCodetextBuilder.AddFNC1FirstPosition">
      <summary>
            Adds FNC1 in first position to the extended codetext items
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Generation.QrExtCodetextBuilder.AddFNC1SecondPosition(System.String)">
      <summary>
            Adds FNC1 in second position to the extended codetext items
            </summary>
      <param name="codetext">Value of the FNC1 in the second position</param>
    </member>
    <member name="M:Aspose.BarCode.Generation.QrExtCodetextBuilder.AddFNC1GroupSeparator">
      <summary>
            Adds Group Separator (GS - '\\u001D') to the extended codetext items
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Generation.QrExtCodetextBuilder.GetExtendedCodetext">
      <summary>
            Generates Extended codetext from the extended codetext list.
            </summary>
      <returns>Extended codetext as string</returns>
    </member>
    <!-- Badly formed XML comment ignored for member "F:Aspose.BarCode.BarCodeRecognition.Common.Algorithms.ContourTracing.ChainScanExtArrayLeft" -->
    <member name="T:Aspose.BarCode.BarCodeRecognition.NamespaceDoc">
      <summary>
            The <b>Aspose.BarCode.BarCodeRecognition</b> contains tools for the 1D/2D barcodes recognition.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.BarCodeRecognition.ChecksumValidation">
      <summary>
        <para>Enable checksum validation during recognition for 1D and Postal barcodes.</para>
        <para>Default is treated as Yes for symbologies which must contain checksum, as No where checksum only possible.</para>
        <para>Checksum never used: Codabar, PatchCode, Pharmacode, DataLogic2of5</para>
        <para>Checksum is possible: Code39 Standard/Extended, Standard2of5, Interleaved2of5, ItalianPost25, Matrix2of5, MSI, ItalianPost25, DeutschePostIdentcode, DeutschePostLeitcode, VIN</para>
        <para>Checksum always used: Rest symbologies</para>
      </summary>
      <example>
            This sample shows influence of ChecksumValidation on recognition quality and results
            <code> 
            [C#]
            using (BarcodeGenerator generator = new BarcodeGenerator(EncodeTypes.EAN13, "1234567890128"))
            {
                generator.Save(@"c:\test.png");
            }
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.EAN13))
            {
                //checksum disabled
                reader.BarcodeSettings.ChecksumValidation = ChecksumValidation.Off;
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                    Console.WriteLine("BarCode Value: " + result.Extended.OneD.Value);
                    Console.WriteLine("BarCode Checksum: " + result.Extended.OneD.CheckSum);
                }
            }
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.EAN13))
            {
                //checksum enabled
                reader.BarcodeSettings.ChecksumValidation = ChecksumValidation.On;
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                    Console.WriteLine("BarCode Value: " + result.Extended.OneD.Value);
                    Console.WriteLine("BarCode Checksum: " + result.Extended.OneD.CheckSum);
                }
            }
            [VB.NET]
            Using generator As New BarcodeGenerator(EncodeTypes.EAN13, "1234567890128")
                generator.Save("c:\test.png")
            End Using
            Using reader As New BarCodeReader("c:\test.png", DecodeType.EAN13)
                'checksum disabled
                reader.BarcodeSettings.ChecksumValidation = ChecksumValidation.Off
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Console.WriteLine("BarCode Value: " + result.Extended.OneD.Value)
                    Console.WriteLine("BarCode Checksum: " + result.Extended.OneD.CheckSum)
                Next
            End Using
            Using reader As New BarCodeReader("c:\test.png", DecodeType.EAN13)
                'checksum enabled
                reader.BarcodeSettings.ChecksumValidation = ChecksumValidation.On
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Console.WriteLine("BarCode Value: " + result.Extended.OneD.Value)
                    Console.WriteLine("BarCode Checksum: " + result.Extended.OneD.CheckSum)
                Next
            End Using
            </code></example>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.ChecksumValidation.Default">
      <summary>
            If checksum is required by the specification - it will be validated.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.ChecksumValidation.On">
      <summary>
            Always validate checksum if possible.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.ChecksumValidation.Off">
      <summary>
            Do not validate checksum.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.BarCodeRecognition.Code128DataPortion">
      <summary>
            Contains the data of subtype for Code128 type barcode
            </summary>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.Code128DataPortion.Data">
      <summary>
            Gets the part of code text related to subtype.
            </summary>
      <returns>The part of code text related to subtype</returns>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.Code128DataPortion.Code128SubType">
      <summary>
            Gets the type of Code128 subset
            </summary>
      <returns>The type of Code128 subset</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.Code128DataPortion.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Aspose.BarCode.BarCodeRecognition.Code128DataPortion" /> value.
            </summary>
      <param name="obj">An System.Object value to compare to this instance.</param>
      <returns>
        <b>true</b> if obj has the same value as this instance; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.Code128DataPortion.op_Equality(Aspose.BarCode.BarCodeRecognition.Code128DataPortion,Aspose.BarCode.BarCodeRecognition.Code128DataPortion)">
      <summary>
            Returns a value indicating whether the first <see cref="T:Aspose.BarCode.BarCodeRecognition.Code128DataPortion" /> value is equal to the second.
            </summary>
      <param name="first">A first compared value</param>
      <param name="second">A second compared value</param>
      <returns>
        <b>true</b> if first has the same value as second; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.Code128DataPortion.op_Inequality(Aspose.BarCode.BarCodeRecognition.Code128DataPortion,Aspose.BarCode.BarCodeRecognition.Code128DataPortion)">
      <summary>
            Returns a value indicating if the first <see cref="T:Aspose.BarCode.BarCodeRecognition.Code128DataPortion" /> value is different from the second.
            </summary>
      <param name="first">A first compared value</param>
      <param name="second">A second compared value</param>
      <returns>
        <b>true</b> if first has the different value from second; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.Code128DataPortion.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.Code128DataPortion.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.BarCodeRecognition.Code128DataPortion" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.BarCodeRecognition.Code128DataPortion" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.BarCodeRecognition.Code128SubType">
      <summary>
            Contains types of Code128 subset
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.Code128SubType.CodeSetA">
      <summary>
            ASCII characters 00 to 95 (0–9, A–Z and control codes), special characters, and FNC 1–4 ///</summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.Code128SubType.CodeSetB">
      <summary>
            ASCII characters 32 to 127 (0–9, A–Z, a–z), special characters, and FNC 1–4 ///</summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.Code128SubType.CodeSetC">
      <summary>
            00–99 (encodes two digits with a single code point) and FNC1 ///</summary>
    </member>
    <member name="T:Aspose.BarCode.BarCodeRecognition.BarCodeRecognitionException">
      <summary>
            General exception thrown by BarCodeReader, inherited from BarCodeException
            </summary>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeRecognitionException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeRecognitionException" /> class.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeRecognitionException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeRecognitionException" /> class.
            </summary>
      <param name="message">error message</param>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeRecognitionException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeRecognitionException" /> class with the specified error message and the current exception.
            </summary>
      <param name="message">The error message of the exception.</param>
      <param name="innerException">The current exception is thrown.</param>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeRecognitionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeRecognitionException" /> class.
            </summary>
      <param name="info">Holds the serialized object data about the exception being thrown.</param>
      <param name="context">Contains contextual information about the source or destination.</param>
    </member>
    <member name="T:Aspose.BarCode.BarCodeRecognition.BarCodeReader">
      <summary>
            BarCodeReader encapsulates an image which may contain one or several barcodes, it then can perform ReadBarCodes operation to detect barcodes.
            </summary>
      <example>
            This sample shows how to detect Code39 and Code128 barcodes.
            <code>
            [C#]
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.Code39Standard, DecodeType.Code128))
            {
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            [VB.NET]
            Using reader As New BarCodeReader("c:\test.png", DecodeType.Code39Standard, DecodeType.Code128)
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                Next
            End Using
            </code></example>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarCodeReader.ProcessorSettings">
      <summary>
            Gets a settings of using processor cores.
            </summary>
      <example>
            This sample shows how to use ProcessorSettings to add maximum multi-threaded performnce
            <code> 
            [C#]
            //this allows to use all cores for single BarCodeReader call
            BarCodeReader.ProcessorSettings.UseAllCores = true;
            //this allows to use current count of cores
            BarCodeReader.ProcessorSettings.UseAllCores = false;
            BarCodeReader.ProcessorSettings.UseOnlyThisCoresCount = Math.Max(1, Environment.ProcessorCount / 2);
            [VB.NET]
            'this allows to use all cores for single BarCodeReader call
            BarCodeReader.ProcessorSettings.UseAllCores = True
            'this allows to use current count of cores
            BarCodeReader.ProcessorSettings.UseAllCores = False
            BarCodeReader.ProcessorSettings.UseOnlyThisCoresCount = Math.Max(1, Environment.ProcessorCount / 2)
            </code></example>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarCodeReader.Timeout">
      <summary>
            Gets or sets the timeout of recognition process in milliseconds.
            </summary>
      <value>
            The timeout.
            </value>
      <example>
            This sample shows how to avoid recogntion hungs with timeount on large images
            <code>
            [C#]
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png"))
            {
                reader.Timeout = 5000;
                foreach (BarCodeResult result in reader.ReadBarCodes())
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
            }
            [VB.NET]
            Using reader As New BarCodeReader("c:\test.png")
                reader.Timeout = 5000
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                Next
            End Using
            </code></example>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarCodeReader.ChecksumValidation">
      <summary>
        <para>Enable checksum validation during recognition for 1D barcodes.</para>
        <para>Default is treated as Yes for symbologies which must contain checksum, as No where checksum only possible.</para>
        <para>Checksum never used: Codabar</para>
        <para>Checksum is possible: Code39 Standard/Extended, Standard2of5, Interleaved2of5, Matrix2of5, ItalianPost25, DeutschePostIdentcode, DeutschePostLeitcode, VIN</para>
        <para>Checksum always used: Rest symbologies</para>
      </summary>
      <value>
            The checksum validation flag.
            </value>
      <example>
            This sample shows influence of ChecksumValidation on recognition quality and results
            <code> 
            [C#]
            using (BarcodeGenerator generator = new BarcodeGenerator(EncodeTypes.EAN13, "1234567890128"))
            {
                generator.Save(@"c:\test.png");
            }
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.EAN13))
            {
                //checksum disabled
                reader.ChecksumValidation = ChecksumValidation.Off;
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                    Console.WriteLine("BarCode Value: " + result.Extended.OneD.Value);
                    Console.WriteLine("BarCode Checksum: " + result.Extended.OneD.CheckSum);
                }
            }
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.EAN13))
            {
                //checksum enabled
                reader.ChecksumValidation = ChecksumValidation.On;
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                    Console.WriteLine("BarCode Value: " + result.Extended.OneD.Value);
                    Console.WriteLine("BarCode Checksum: " + result.Extended.OneD.CheckSum);
                }
            }
            [VB.NET]
            Using generator As New BarcodeGenerator(EncodeTypes.EAN13, "1234567890128")
                generator.Save("c:\test.png")
            End Using
            Using reader As New BarCodeReader("c:\test.png", DecodeType.EAN13)
                'checksum disabled
                reader.ChecksumValidation = ChecksumValidation.Off
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Console.WriteLine("BarCode Value: " + result.Extended.OneD.Value)
                    Console.WriteLine("BarCode Checksum: " + result.Extended.OneD.CheckSum)
                Next
            End Using
            Using reader As New BarCodeReader("c:\test.png", DecodeType.EAN13)
                'checksum enabled
                reader.ChecksumValidation = ChecksumValidation.On
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Console.WriteLine("BarCode Value: " + result.Extended.OneD.Value)
                    Console.WriteLine("BarCode Checksum: " + result.Extended.OneD.CheckSum)
                Next
            End Using
            </code></example>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarCodeReader.StripFNC">
      <summary>
            Strip FNC1, FNC2, FNC3 characters from codetext. Default value is false.
            </summary>
      <example>
            This sample shows how to strip FNC characters
            <code> 
            [C#]
            using (BarcodeGenerator generator = new BarcodeGenerator(EncodeTypes.GS1Code128, "(02)04006664241007(37)1(400)7019590754"))
            {
                generator.Save(@"c:\test.png");
            }
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.Code128))
            {
                //StripFNC disabled
                reader.StripFNC = false;
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.Code128))
            {
                //StripFNC enabled
                reader.StripFNC = true;
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            [VB.NET]
            Using generator As New BarcodeGenerator(EncodeTypes.GS1Code128, "(02)04006664241007(37)1(400)7019590754")
                generator.Save("c:\test.png")
            End Using
            Using reader As New BarCodeReader("c:\test.png", DecodeType.Code128)
                'StripFNC disabled
                reader.StripFNC = False
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                Next
            End Using
            Using reader As New BarCodeReader("c:\test.png", DecodeType.Code128)
                'StripFNC enabled
                reader.StripFNC = True
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                Next
            End Using
            </code></example>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarCodeReader.CustomerInformationInterpretingType">
      <summary>
            Gets or sets the Interpreting Type for the Customer Information of AustralianPost BarCode.Default is CustomerInformationInterpretingType.Other.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeReader.Abort">
      <summary>
            Function requests termination of current recognition session from other thread. Abort is unblockable method and returns control just after calling. 
            The method should be used when recognition process is too long.
            </summary>
      <example>
            This sample shows how to call Abort function from other thread
            <code> 
            [C#]
            private static void ThreadRecognize(object readerObj)
            {
                BarCodeReader reader = (BarCodeReader)readerObj;
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeType);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            
            BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.Code39Standard, DecodeType.Code128);
            Thread thread1 = new Thread(ThreadRecognize);
            thread1.Start(reader);
            Thread.Sleep(100);
            reader.Abort();
            [VB.NET]
            Private Shared Sub ThreadRecognize(readerObj As Object)
                Dim reader As BarCodeReader = readerObj
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                Next
            End Sub
            
            Dim reader As New BarCodeReader("c:\test.png", DecodeType.Code39Standard, DecodeType.Code128)
            Dim thread1 As New Thread(AddressOf ThreadRecognize)
            thread1.Start(reader)
            Thread.Sleep(100)
            reader.Abort()
            </code></example>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarCodeReader.FoundBarCodes">
      <summary>Gets recognized <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeResult" />s array</summary>
      <value>The recognized <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeResult" />s array</value>
      <example>
            This sample shows how to read barcodes with BarCodeReader
            <code>
            [C#]
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.Code39Standard, DecodeType.Code128))
            {
                reader.ReadBarCodes();
                for(int i = 0; reader.FoundCount &gt; i; ++i)
                    Console.WriteLine("BarCode CodeText: " + reader.FoundBarCodes[i].CodeText);
            }
            [VB.NET]
            Using reader As New BarCodeReader("c:\test.png", DecodeType.Code39Standard, DecodeType.Code128)
                reader.ReadBarCodes()
                For i As Integer = 0 To reader.FoundCount - 1 Step 1
                    Console.WriteLine("BarCode CodeText: " + reader.FoundBarCodes(i).CodeText)
                Next
            End Using
            </code></example>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarCodeReader.FoundCount">
      <summary>Gets recognized barcodes count</summary>
      <value>The recognized barcodes count</value>
      <example>
            This sample shows how to read barcodes with BarCodeReader
            <code>
            [C#]
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.Code39Standard, DecodeType.Code128))
            {
                reader.ReadBarCodes();
                for(int i = 0; reader.FoundCount &gt; i; ++i)
                    Console.WriteLine("BarCode CodeText: " + reader.FoundBarCodes[i].CodeText);
            }
            [VB.NET]
            Using reader As New BarCodeReader("c:\test.png", DecodeType.Code39Standard, DecodeType.Code128)
                reader.ReadBarCodes()
                For i As Integer = 0 To reader.FoundCount - 1 Step 1
                    Console.WriteLine("BarCode CodeText: " + reader.FoundBarCodes(i).CodeText)
                Next
            End Using
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeReader.ReadBarCodes">
      <summary>
            Reads <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeResult" />s from the image.
            </summary>
      <example>
            This sample shows how to read barcodes with BarCodeReader
            <code>
            [C#]
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.Code39Standard, DecodeType.Code128))
            {
                foreach (BarCodeResult result in reader.ReadBarCodes())
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
            }
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.Code39Standard, DecodeType.Code128))
            {
                reader.ReadBarCodes();
                for(int i = 0; reader.FoundCount &gt; i; ++i)
                    Console.WriteLine("BarCode CodeText: " + reader.FoundBarCodes[i].CodeText);
            }
            [VB.NET]
            Using reader As New BarCodeReader("c:\test.png", DecodeType.Code39Standard, DecodeType.Code128)
                reader.ReadBarCodes()
                For i As Integer = 0 To reader.FoundCount - 1 Step 1
                    Console.WriteLine("BarCode CodeText: " + reader.FoundBarCodes(i).CodeText)
                Next
            End Using
            
            Using reader As New BarCodeReader("c:\test.png", DecodeType.Code39Standard, DecodeType.Code128)
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                Next
            End Using
            </code></example>
      <returns>Returns array of recognized <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeResult" />s on the image. If nothing is recognized, zero array is returned.</returns>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarCodeReader.QualitySettings">
      <summary>
            QualitySettings allows to configure recognition quality and speed manually.
            You can quickly set up QualitySettings by embedded presets: HighPerformance, NormalQuality, 
            HighQuality, MaxBarCodes or you can manually configure separate options.
            Default value of QualitySettings is NormalQuality.
            </summary>
      <value>
            QualitySettings to configure recognition quality and speed.
            </value>
      <example>
            This sample shows how to use QualitySettings with BarCodeReader
            <code>
            [C#]
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.Code39Standard, DecodeType.Code128))
            {
               //set high performance mode
               reader.QualitySettings = QualitySettings.HighPerformance;
               foreach (BarCodeResult result in reader.ReadBarCodes())
                  Console.WriteLine("BarCode CodeText: " + result.CodeText);
            }
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.Code39Standard, DecodeType.Code128))
            {
               //normal quality mode is set by default
               foreach (BarCodeResult result in reader.ReadBarCodes())
                  Console.WriteLine("BarCode CodeText: " + result.CodeText);
            }
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.Code39Standard, DecodeType.Code128))
            {
               //set high performance mode
               reader.QualitySettings = QualitySettings.HighPerformance;
               //set separate options
               reader.QualitySettings.AllowMedianSmoothing = true;
               reader.QualitySettings.MedianSmoothingWindowSize = 5;
               foreach (BarCodeResult result in reader.ReadBarCodes())
                  Console.WriteLine("BarCode CodeText: " + result.CodeText);
            }
            [VB.NET]
            Using reader As New BarCodeReader("c:\test.png", DecodeType.Code39Standard, DecodeType.Code128)
                'set high performance mode
                reader.QualitySettings = QualitySettings.HighPerformance
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                Next
            End Using
            Using reader As New BarCodeReader("c:\test.png", DecodeType.Code39Standard, DecodeType.Code128)
                'normal quality mode is set by default
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                Next
            End Using
            Using reader As New BarCodeReader("c:\test.png", DecodeType.Code39Standard, DecodeType.Code128)
               'set high performance mode
               reader.QualitySettings = QualitySettings.HighPerformance
               'set separate options
               reader.QualitySettings.AllowMedianSmoothing = True
               reader.QualitySettings.MedianSmoothingWindowSize = 5
               For Each result As BarCodeResult In reader.ReadBarCodes()
                   Console.WriteLine("BarCode Type: " + result.CodeTypeName)
               Next
            End Using
            </code></example>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarCodeReader.BarcodeSettings">
      <summary>
            The main BarCode decoding parameters. Contains parameters which make influence on recognized data.
            </summary>
      <value>The main BarCode decoding parameters</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarCodeReader.DetectEncoding">
      <summary>
            A flag which force engine to detect codetext encoding for Unicode codesets.
            </summary>
      <example>
            This sample shows how to detect text encoding on the fly if DetectEncoding is enabled
            <code>
            [C#]
            using (MemoryStream ms = new MemoryStream())
            {
                using (BarcodeGenerator generator = new BarcodeGenerator(EncodeTypes.QR, "Ñëîâî"))
                {
                    generator.Parameters.Barcode.QR.CodeTextEncoding = Encoding.UTF8;
                    generator.Save(ms, BarCodeImageFormat.Png);
                }
                //detects encoding for Unicode codesets is enabled
                ms.Position = 0;
                using (BarCodeReader reader = new BarCodeReader(ms, DecodeType.QR))
                {
                    reader.DetectEncoding = true;
                    foreach (BarCodeResult result in reader.ReadBarCodes())
                        Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
                //detect encoding is disabled
                ms.Position = 0;
                using (BarCodeReader reader = new BarCodeReader(ms, DecodeType.QR))
                {
                    reader.DetectEncoding = false;
                    foreach (BarCodeResult result in reader.ReadBarCodes())
                        Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            [VB.NET]
            Using ms As New MemoryStream
                Using generator As New BarcodeGenerator(EncodeTypes.QR, "Ñëîâî")
                    generator.Parameters.Barcode.QR.CodeTextEncoding = System.Text.Encoding.UTF8
                    generator.Save(ms, BarCodeImageFormat.Png)
                End Using
                'detects encoding for Unicode codesets is enabled
                ms.Position = 0
                Using reader As New BarCodeReader("c:\test.png", DecodeType.Code39Standard, DecodeType.Code128)
                    reader.DetectEncoding = True
                    For Each result As BarCodeResult In reader.ReadBarCodes()
                        Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Next
                End Using
                'detect encoding is disabled
                ms.Position = 0
                Using reader As New BarCodeReader("c:\test.png", DecodeType.Code39Standard, DecodeType.Code128)
                    reader.DetectEncoding = False
                    For Each result As BarCodeResult In reader.ReadBarCodes()
                        Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Next
                End Using
            End Using
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeReader.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeReader" /> class with default values.
            Requires to set image (SetBitmapImage()) before to call ReadBarCodes() method.
            </summary>
      <example>
            This sample shows how to detect Code39 and Code128 barcodes.
            <code>
            [C#]
            using (BarCodeReader reader = new BarCodeReader())
            {
                reader.SetBarCodeReadType(DecodeType.Code39Standard, DecodeType.Code128);
                reader.SetBarCodeImage(@"c:\test.png");
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            [VB.NET]
            Using reader As New BarCodeReader()
                reader.SetBarCodeReadType(DecodeType.Code39Standard, DecodeType.Code128)
                reader.SetBarCodeImage("c:\test.png")
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                Next
            End Using
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeReader.SetBarCodeImage(System.Drawing.Bitmap)">
      <summary>
            Sets bitmap image for recognition. 
            Must be called before ReadBarCodes() method. 
            </summary>
      <param name="value">The bitmap image for recognition.</param>
      <example>
            This sample shows how to detect Code39 and Code128 barcodes.
            <code>
            [C#]
            using (Bitmap bmp = new Bitmap(@"c:\test.png"))
            using (BarCodeReader reader = new BarCodeReader())
            {
                reader.SetBarCodeReadType(DecodeType.Code39Standard, DecodeType.Code128);
                reader.SetBarCodeImage(bmp);
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            [VB.NET]
            Using bmp = New Bitmap("c:\test.png")
                Using reader As New BarCodeReader()
                    reader.SetBarCodeReadType(DecodeType.Code39Standard, DecodeType.Code128)
                    reader.SetBarCodeImage(bmp)
                    For Each result As BarCodeResult In reader.ReadBarCodes()
                        Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                        Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Next
                End Using
            End Using
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeReader.SetBarCodeImage(System.Drawing.Bitmap,System.Drawing.Rectangle[])">
      <summary>
            Sets bitmap image and areas for recognition. 
            Must be called before ReadBarCodes() method. 
            </summary>
      <param name="value">The bitmap image for recognition.</param>
      <param name="areas">areas list for recognition</param>
      <example>
            This sample shows how to detect Code39 and Code128 barcodes.
            <code>
            [C#]
            using (Bitmap bmp = new Bitmap(@"c:\test.png"))
            using (BarCodeReader reader = new BarCodeReader())
            {
                reader.SetBarCodeReadType(DecodeType.Code39Standard, DecodeType.Code128);
                reader.SetBarCodeImage(bmp, new Rectangle[] { new Rectangle(0, 0, bmp.Width, bmp.Height) });
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            [VB.NET]
            Using bmp = New Bitmap("c:\test.png")
                Using reader As New BarCodeReader()
                    reader.SetBarCodeReadType(DecodeType.Code39Standard, DecodeType.Code128)
                    reader.SetBarCodeImage(bmp, New Rectangle() {New Rectangle(0, 0, bmp.Width, bmp.Height)})
                    For Each result As BarCodeResult In reader.ReadBarCodes()
                        Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                        Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Next
                End Using
            End Using
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeReader.SetBarCodeImage(System.Drawing.Bitmap,System.Drawing.Rectangle)">
      <summary>
            Sets bitmap image and area for recognition. 
            Must be called before ReadBarCodes() method. 
            </summary>
      <param name="value">The bitmap image for recognition.</param>
      <param name="area">area for recognition</param>
      <example>
            This sample shows how to detect Code39 and Code128 barcodes.
            <code>
            [C#]
            using (Bitmap bmp = new Bitmap(@"c:\test.png"))
            using (BarCodeReader reader = new BarCodeReader())
            {
                reader.SetBarCodeReadType(DecodeType.Code39Standard, DecodeType.Code128);
                reader.SetBarCodeImage(bmp, new Rectangle(0, 0, bmp.Width, bmp.Height));
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            [VB.NET]
            Using bmp = New Bitmap("c:\test.png")
                Using reader As New BarCodeReader()
                    reader.SetBarCodeReadType(DecodeType.Code39Standard, DecodeType.Code128)
                    reader.SetBarCodeImage(bmp, New Rectangle(0, 0, bmp.Width, bmp.Height))
                    For Each result As BarCodeResult In reader.ReadBarCodes()
                        Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                        Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Next
                End Using
            End Using
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeReader.SetBarCodeImage(System.String)">
      <summary>
            Sets image file for recognition. 
            Must be called before ReadBarCodes() method. 
            </summary>
      <param name="filename">The image file for recogniton.</param>
      <example>
            This sample shows how to detect Code39 and Code128 barcodes.
            <code>
            [C#]
            using (BarCodeReader reader = new BarCodeReader())
            {
                reader.SetBarCodeReadType(DecodeType.Code39Standard, DecodeType.Code128);
                reader.SetBarCodeImage(@"c:\test.png");
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            [VB.NET]
            Using reader As New BarCodeReader()
                reader.SetBarCodeReadType(DecodeType.Code39Standard, DecodeType.Code128)
                reader.SetBarCodeImage("c:\test.png")
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                Next
            End Using
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeReader.SetBarCodeImage(System.IO.Stream)">
      <summary>
            Sets image stream for recognition. 
            Must be called before ReadBarCodes() method. 
            </summary>
      <param name="stream">The image stream for recogniton.</param>
      <example>
            This sample shows how to detect Code39 and Code128 barcodes.
            <code>
            [C#]
            using (FileStream fstr = new FileStream(@"c:\test.png", FileMode.Open))
            using (BarCodeReader reader = new BarCodeReader())
            {
                reader.SetBarCodeReadType(DecodeType.Code39Standard, DecodeType.Code128);
                reader.SetBarCodeImage(fstr);
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            [VB.NET]
            Using fstr = New FileStream("c:\test.png", FileMode.Open)
                Using reader As New BarCodeReader()
                    reader.SetBarCodeReadType(DecodeType.Code39Standard, DecodeType.Code128)
                    reader.SetBarCodeImage(fstr)
                    For Each result As BarCodeResult In reader.ReadBarCodes()
                        Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                        Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Next
                End Using
            End Using
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeReader.SetBarCodeReadType(Aspose.BarCode.BarCodeRecognition.SingleDecodeType[])">
      <summary>
            Sets <see cref="T:Aspose.BarCode.BarCodeRecognition.SingleDecodeType" /> type array for recognition. 
            Must be called before ReadBarCodes() method. 
            </summary>
      <param name="barcodeTypes">The <see cref="T:Aspose.BarCode.BarCodeRecognition.SingleDecodeType" /> type array to read.</param>
      <example>
            This sample shows how to detect Code39 and Code128 barcodes.
            <code>
            [C#]
            using (BarCodeReader reader = new BarCodeReader())
            {
                reader.SetBarCodeReadType(DecodeType.Code39Standard, DecodeType.Code128);
                reader.SetBarCodeImage(@"c:\test.png");
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            [VB.NET]
            Using reader As New BarCodeReader()
                reader.SetBarCodeReadType(DecodeType.Code39Standard, DecodeType.Code128)
                reader.SetBarCodeImage("c:\test.png")
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                Next
            End Using
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeReader.SetBarCodeReadType(Aspose.BarCode.BarCodeRecognition.BaseDecodeType)">
      <summary>
            Sets decode type for recognition. 
            Must be called before ReadBarCodes() method. 
            </summary>
      <param name="type">The type of barcode to read.</param>
      <example>
            This sample shows how to detect Code39 and Code128 barcodes.
            <code>
            [C#]
            using (BarCodeReader reader = new BarCodeReader())
            {
                reader.SetBarCodeReadType(new MultyDecodeType(DecodeType.Code39Standard, DecodeType.Code128));
                reader.SetBarCodeImage(@"c:\test.png");
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            [VB.NET]
            Using reader As New BarCodeReader()
                reader.SetBarCodeReadType(New MultyDecodeType(DecodeType.Code39Standard, DecodeType.Code128))
                reader.SetBarCodeImage("c:\test.png")
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                Next
            End Using
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeReader.#ctor(System.Drawing.Bitmap)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeReader" /> class from an image.
            </summary>
      <param name="image">A Bitmap instance containing the image</param>
      <example>
            This sample shows how to detect Code39 and Code128 barcodes.
            <code>
            [C#]
            using (Bitmap bmp = new Bitmap(@"c:\test.png"))
            using (BarCodeReader reader = new BarCodeReader(bmp))
            {
                reader.SetBarCodeReadType(DecodeType.Code39Standard, DecodeType.Code128);
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            [VB.NET]
            Using bmp = New Bitmap("c:\test.png")
                Using reader As New BarCodeReader(bmp)
                    reader.SetBarCodeReadType(DecodeType.Code39Standard, DecodeType.Code128)
                    For Each result As BarCodeResult In reader.ReadBarCodes()
                        Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                        Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Next
                End Using
            End Using
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeReader.#ctor(System.Drawing.Bitmap,Aspose.BarCode.BarCodeRecognition.BaseDecodeType[])">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeReader" /> class.
            </summary>
      <param name="image">The image.</param>
      <param name="decodeTypes">Decode types.</param>
      <example>
            This sample shows how to detect Code39 and Code128 barcodes.
            <code>
            [C#]
            using (Bitmap bmp = new Bitmap(@"c:\test.png"))
            using (BarCodeReader reader = new BarCodeReader(bmp, DecodeType.Code39Standard, DecodeType.Code128))
            {
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            [VB.NET]
            Using bmp = New Bitmap("c:\test.png")
                Using reader As New BarCodeReader(bmp, DecodeType.Code39Standard, DecodeType.Code128)
                    For Each result As BarCodeResult In reader.ReadBarCodes()
                        Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                        Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Next
                End Using
            End Using
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeReader.#ctor(System.Drawing.Bitmap,Aspose.BarCode.BarCodeRecognition.BaseDecodeType)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeReader" /> class.
            </summary>
      <param name="image">The image.</param>
      <param name="type">The decode type1. It can be single or multy</param>
      <example>
            This sample shows how to detect Code39 and Code128 barcodes.
            <code>
            [C#]
            using (Bitmap bmp = new Bitmap(@"c:\test.png"))
            using (BarCodeReader reader = new BarCodeReader(bmp, new MultyDecodeType(DecodeType.Code39Standard, DecodeType.Code128))
            {
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            [VB.NET]
            Using bmp = New Bitmap("c:\test.png")
                Using reader As New BarCodeReader(bmp, New MultyDecodeType(DecodeType.Code39Standard, DecodeType.Code128))
                    For Each result As BarCodeResult In reader.ReadBarCodes()
                        Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                        Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Next
                End Using
            End Using
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeReader.#ctor(System.Drawing.Bitmap,System.Drawing.Rectangle,Aspose.BarCode.BarCodeRecognition.BaseDecodeType[])">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeReader" /> class.
            </summary>
      <param name="image">The image.</param>
      <param name="area">The area for recognition.</param>
      <param name="decodeTypes">Decode types.</param>
      <example>
            This sample shows how to detect Code39 and Code128 barcodes.
            <code>
            [C#]
            using (Bitmap bmp = new Bitmap(@"c:\test.png"))
            using (BarCodeReader reader = new BarCodeReader(bmp, new Rectangle(0, 0, bmp.Width, bmp.Height), DecodeType.Code39Standard, DecodeType.Code128)
            {
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            [VB.NET]
            Using bmp = New Bitmap("c:\test.png")
                Using reader As New BarCodeReader(bmp, New Rectangle(0, 0, bmp.Width, bmp.Height), DecodeType.Code39Standard, DecodeType.Code128)
                    For Each result As BarCodeResult In reader.ReadBarCodes()
                        Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                        Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Next
                End Using
            End Using
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeReader.#ctor(System.Drawing.Bitmap,System.Drawing.Rectangle,Aspose.BarCode.BarCodeRecognition.BaseDecodeType)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeReader" /> class.
            </summary>
      <param name="image">The image.</param>
      <param name="area">The area for recognition.</param>
      <param name="type">The decode type.</param>
      <example>
            This sample shows how to detect Code39 and Code128 barcodes.
            <code>
            [C#]
            using (Bitmap bmp = new Bitmap(@"c:\test.png"))
            using (BarCodeReader reader = new BarCodeReader(bmp, new Rectangle(0, 0, bmp.Width, bmp.Height), new MultyDecodeType(DecodeType.Code39Standard, DecodeType.Code128))
            {
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            [VB.NET]
            Using bmp = New Bitmap("c:\test.png")
                Using reader As New BarCodeReader(bmp, New Rectangle(0, 0, bmp.Width, bmp.Height), New MultyDecodeType(DecodeType.Code39Standard, DecodeType.Code128))
                    For Each result As BarCodeResult In reader.ReadBarCodes()
                        Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                        Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Next
                End Using
            End Using
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeReader.#ctor(System.Drawing.Bitmap,System.Drawing.Rectangle[],Aspose.BarCode.BarCodeRecognition.BaseDecodeType[])">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeReader" /> class.
            </summary>
      <param name="image">The image to read</param>
      <param name="areas">The array of recognition areas</param>
      <param name="decodeTypes">The decode types applicable for all the areas specified.</param>
      <example>
            This sample shows how to detect Code39 and Code128 barcodes.
            <code>
            [C#]
            using (Bitmap bmp = new Bitmap(@"c:\test.png"))
            using (BarCodeReader reader = new BarCodeReader(bmp, new Rectangle[] { new Rectangle(0, 0, bmp.Width, bmp.Height) }, DecodeType.Code39Standard, DecodeType.Code128)
            {
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            [VB.NET]
            Using bmp = New Bitmap("c:\test.png")
                Using reader As New BarCodeReader(bmp, New Rectangle() {New Rectangle(0, 0, bmp.Width, bmp.Height)}, DecodeType.Code39Standard, DecodeType.Code128)
                    For Each result As BarCodeResult In reader.ReadBarCodes()
                        Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                        Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Next
                End Using
            End Using
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeReader.#ctor(System.Drawing.Bitmap,System.Drawing.Rectangle[],Aspose.BarCode.BarCodeRecognition.BaseDecodeType)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeReader" /> class.
            </summary>
      <param name="image">The image to read</param>
      <param name="areas">The array of recognition areas</param>
      <param name="type">The decode type applicable for all the areas specified.</param>
      <example>
            This sample shows how to detect Code39 and Code128 barcodes.
            <code>
            [C#]
            using (Bitmap bmp = new Bitmap(@"c:\test.png"))
            using (BarCodeReader reader = new BarCodeReader(bmp, new Rectangle[] { new Rectangle(0, 0, bmp.Width, bmp.Height) }, new MultyDecodeType(DecodeType.Code39Standard, DecodeType.Code128))
            {
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            [VB.NET]
            Using bmp = New Bitmap("c:\test.png")
                Using reader As New BarCodeReader(bmp, New Rectangle() {New Rectangle(0, 0, bmp.Width, bmp.Height)}, New MultyDecodeType(DecodeType.Code39Standard, DecodeType.Code128))
                    For Each result As BarCodeResult In reader.ReadBarCodes()
                        Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                        Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Next
                End Using
            End Using
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeReader.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeReader" /> class from file.
            </summary>
      <param name="filename">The filename.</param>
      <example>
            This sample shows how to detect Code39 and Code128 barcodes.
            <code>
            [C#]
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png"))
            {
                reader.SetBarCodeReadType(DecodeType.Code39Standard, DecodeType.Code128);
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            [VB.NET]
            Using reader As New BarCodeReader("c:\test.png")
                reader.SetBarCodeReadType(DecodeType.Code39Standard, DecodeType.Code128)
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                Next
            End Using
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeReader.#ctor(System.String,Aspose.BarCode.BarCodeRecognition.BaseDecodeType[])">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeReader" /> class.
            </summary>
      <param name="filename">The filename.</param>
      <param name="decodeTypes">Decode types.</param>
      <example>
            This sample shows how to detect Code39 and Code128 barcodes.
            <code>
            [C#]
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.Code39Standard, DecodeType.Code128))
            {
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            [VB.NET]
            Using reader As New BarCodeReader("c:\test.png", DecodeType.Code39Standard, DecodeType.Code128)
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                Next
            End Using
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeReader.#ctor(System.String,Aspose.BarCode.BarCodeRecognition.BaseDecodeType)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeReader" /> class.
            </summary>
      <param name="filename">The filename.</param>
      <param name="type">The decode type.</param>
      <example>
            This sample shows how to detect Code39 and Code128 barcodes.
            <code>
            [C#]
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", new MultyDecodeType(DecodeType.Code39Standard, DecodeType.Code128)))
            {
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            [VB.NET]
            Using reader As New BarCodeReader("c:\test.png", New MultyDecodeType(DecodeType.Code39Standard, DecodeType.Code128))
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                Next
            End Using
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeReader.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeReader" /> class.
            </summary>
      <param name="stream">The stream.</param>
      <example>
            This sample shows how to detect Code39 and Code128 barcodes.
            <code>
            [C#]
            using (FileStream fstr = new FileStream(@"c:\test.png", FileMode.Open))
            using (BarCodeReader reader = new BarCodeReader(fstr))
            {
                reader.SetBarCodeReadType(DecodeType.Code39Standard, DecodeType.Code128);
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            [VB.NET]
            Using fstr = New FileStream("c:\test.png", FileMode.Open)
                Using reader As New BarCodeReader(fstr)
                    reader.SetBarCodeReadType(DecodeType.Code39Standard, DecodeType.Code128)
                    For Each result As BarCodeResult In reader.ReadBarCodes()
                        Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                        Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Next
                End Using
            End Using
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeReader.#ctor(System.IO.Stream,Aspose.BarCode.BarCodeRecognition.BaseDecodeType)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeReader" /> class.
            </summary>
      <param name="stream">The stream.</param>
      <param name="type">The decode type.</param>
      <example>
            This sample shows how to detect Code39 and Code128 barcodes.
            <code>
            [C#]
            using (FileStream fstr = new FileStream(@"c:\test.png", FileMode.Open))
            using (BarCodeReader reader = new BarCodeReader(fstr, new MultyDecodeType(DecodeType.Code39Standard, DecodeType.Code128)))
            {
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            [VB.NET]
            Using fstr = New FileStream("c:\test.png", FileMode.Open)
                Using reader As New BarCodeReader(fstr, New MultyDecodeType(DecodeType.Code39Standard, DecodeType.Code128))
                    For Each result As BarCodeResult In reader.ReadBarCodes()
                        Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                        Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Next
                End Using
            End Using
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeReader.#ctor(System.IO.Stream,Aspose.BarCode.BarCodeRecognition.BaseDecodeType[])">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeReader" /> class.
            </summary>
      <param name="stream">The stream.</param>
      <param name="decodeTypes">Decode types.</param>
      <example>
            This sample shows how to detect Code39 and Code128 barcodes.
            <code>
            [C#]
            using (FileStream fstr = new FileStream(@"c:\test.png", FileMode.Open))
            using (BarCodeReader reader = new BarCodeReader(fstr, DecodeType.Code39Standard, DecodeType.Code128))
            {
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            [VB.NET]
            Using fstr = New FileStream("c:\test.png", FileMode.Open)
                Using reader As New BarCodeReader(fstr, DecodeType.Code39Standard, DecodeType.Code128)
                    For Each result As BarCodeResult In reader.ReadBarCodes()
                        Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                        Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Next
                End Using
            End Using
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeReader.Dispose(System.Boolean)">
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeReader.ExportToXml(System.String)">
      <summary>
            Exports BarCode properties to the xml-file specified
            </summary>
      <param name="xmlFile">The name for the file</param>
      <returns>Whether or not export completed successfully.
            <para>Returns <b>True</b> in case of success; <b>False</b> Otherwise </para></returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeReader.ExportToXml(System.IO.Stream)">
      <summary>
            Exports BarCode properties to the xml-stream specified
            </summary>
      <param name="xmlStream">The xml-stream for saving</param>
      <returns>Whether or not export completed successfully.
            <para>Returns <b>True</b> in case of success; <b>False</b> Otherwise </para></returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeReader.ImportFromXml(System.String)">
      <summary>
            Imports BarCode properties from the xml-file specified and applies them to the current BarCodeReader instance. 
            </summary>
      <param name="xmlFile">The name for the file</param>
      <returns>Returns <b>True</b> in case of success; <para><b>False</b> Otherwise </para></returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeReader.ImportFromXml(System.IO.Stream)">
      <summary>
            Imports BarCode properties from the xml-stream specified and applies them to the current BarCodeReader instance. 
            </summary>
      <param name="xmlStream">The xml-stream for loading</param>
      <returns>Returns <b>True</b> in case of success; <para><b>False</b> Otherwise </para></returns>
    </member>
    <member name="T:Aspose.BarCode.BarCodeRecognition.BarCodeConfidence">
      <summary>
            Contains recognition confidence level
            </summary>
      <example>
            This sample shows how BarCodeConfidence changed, depending on barcode type
            <code>
            [C#]
            //Moderate confidence
            using (BarcodeGenerator generator = new BarcodeGenerator(EncodeTypes.Code128, "12345"))
            {
                generator.Save(@"c:\test.png");
            }
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.Code39Standard, DecodeType.Code128))
            {
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                    Console.WriteLine("BarCode Confidence: " + result.Confidence);
                    Console.WriteLine("BarCode ReadingQuality: " + result.ReadingQuality);
                }
            }
            
            //Strong confidence
            using (BarcodeGenerator generator = new BarcodeGenerator(EncodeTypes.QR, "12345"))
            {
                generator.Save(@"c:\test.png");
            }
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.Code39Standard, DecodeType.QR))
            {
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                    Console.WriteLine("BarCode Confidence: " + result.Confidence);
                    Console.WriteLine("BarCode ReadingQuality: " + result.ReadingQuality);
                }
            }
            [VB.NET]
            'Moderate confidence
            Using generator As New BarcodeGenerator(EncodeTypes.Code128, "12345")
                generator.Save("c:\test.png")
            End Using
            Using reader As New BarCodeReader("c:\test.png", DecodeType.Code39Standard, DecodeType.Code128)
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Console.WriteLine("BarCode Confidence: " + result.Confidence)
                    Console.WriteLine("BarCode ReadingQuality: " + result.ReadingQuality)
                Next
            End Using
            
            'Strong confidence
            Using generator As New BarcodeGenerator(EncodeTypes.QR, "12345")
                generator.Save("c:\test.png")
            End Using
            Using reader As New BarCodeReader("c:\test.png", DecodeType.Code39Standard, DecodeType.QR)
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Console.WriteLine("BarCode Confidence: " + result.Confidence)
                    Console.WriteLine("BarCode ReadingQuality: " + result.ReadingQuality)
                Next
            End Using
            </code></example>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.BarCodeConfidence.None">
      <summary>
            Recognition confidence of barcode where codetext was not recognized correctly or barcode was detected as posible fake
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.BarCodeConfidence.Moderate">
      <summary>
            Recognition confidence of barcode (mostly 1D barcodes) with weak checksumm or even without it. Could contains some misrecognitions in codetext
            or even fake recognitions if <seealso cref="P:Aspose.BarCode.BarCodeRecognition.BarCodeResult.ReadingQuality" /> is low
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.BarCodeConfidence.Strong">
      <summary>
            Recognition confidence which was confirmed with BCH codes like Reed–Solomon. There must not be errors in read codetext or fake recognitions
            </summary>
    </member>
    <member name="T:Aspose.BarCode.BarCodeRecognition.BarCodeExtendedParameters">
      <summary>
            Stores extended parameters of recognized barcode
            </summary>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarCodeExtendedParameters.OneD">
      <summary>Gets a special data <see cref="T:Aspose.BarCode.BarCodeRecognition.OneDExtendedParameters" /> of 1D recognized barcode</summary>
      <value>A special data <see cref="T:Aspose.BarCode.BarCodeRecognition.OneDExtendedParameters" /> of 1D recognized barcode</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarCodeExtendedParameters.Code128">
      <summary>Gets a special data <see cref="T:Aspose.BarCode.BarCodeRecognition.Code128ExtendedParameters" /> of Code128 recognized barcode</summary>
      <value>A special data <see cref="T:Aspose.BarCode.BarCodeRecognition.Code128ExtendedParameters" /> of Code128 recognized barcode</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarCodeExtendedParameters.QR">
      <summary>Gets a QR Structured Append information <see cref="T:Aspose.BarCode.BarCodeRecognition.QRExtendedParameters" /> of recognized barcode</summary>
      <value>A QR Structured Append information <see cref="T:Aspose.BarCode.BarCodeRecognition.QRExtendedParameters" /> of recognized barcode</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarCodeExtendedParameters.Pdf417">
      <summary>Gets a MacroPdf417 metadata information <see cref="T:Aspose.BarCode.BarCodeRecognition.Pdf417ExtendedParameters" /> of recognized barcode</summary>
      <value>A MacroPdf417 metadata information <see cref="T:Aspose.BarCode.BarCodeRecognition.Pdf417ExtendedParameters" /> of recognized barcode</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarCodeExtendedParameters.DataBar">
      <summary>Gets a DataBar additional information<see cref="T:Aspose.BarCode.BarCodeRecognition.DataBarExtendedParameters" /> of recognized barcode</summary>
      <value>A DataBar additional information<see cref="T:Aspose.BarCode.BarCodeRecognition.DataBarExtendedParameters" /> of recognized barcode</value>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeExtendedParameters.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeExtendedParameters" /> value.
            </summary>
      <param name="obj">An System.Object value to compare to this instance.</param>
      <returns>
        <b>true</b> if obj has the same value as this instance; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeExtendedParameters.op_Equality(Aspose.BarCode.BarCodeRecognition.BarCodeExtendedParameters,Aspose.BarCode.BarCodeRecognition.BarCodeExtendedParameters)">
      <summary>
            Returns a value indicating whether the first <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeExtendedParameters" /> value is equal to the second.
            </summary>
      <param name="first">A first compared value</param>
      <param name="second">A second compared value</param>
      <returns>
        <b>true</b> if first has the same value as second; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeExtendedParameters.op_Inequality(Aspose.BarCode.BarCodeRecognition.BarCodeExtendedParameters,Aspose.BarCode.BarCodeRecognition.BarCodeExtendedParameters)">
      <summary>
            Returns a value indicating if the first <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeExtendedParameters" /> value is different from the second.
            </summary>
      <param name="first">A first compared value</param>
      <param name="second">A second compared value</param>
      <returns>
        <b>true</b> if first has the different value from second; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeExtendedParameters.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeExtendedParameters.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeExtendedParameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeExtendedParameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.BarCodeRecognition.BarCodeRegionParameters">
      <summary>
            Represents the recognized barcode's region and barcode angle
            </summary>
      <example>
            This sample shows how to get barcode Angle and bounding quadrangle values
            <code>
            [C#]
            using (BarcodeGenerator generator = new BarcodeGenerator(EncodeTypes.Code128, "12345"))
            {
                generator.Save(@"c:\test.png");
            }
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.Code39Standard, DecodeType.Code128))
            {
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                    Console.WriteLine("BarCode Angle: " + result.Region.Angle);
                    Console.WriteLine("BarCode Quadrangle: " + result.Region.Quadrangle);
                }
            }
            [VB.NET]
            Using generator As New BarcodeGenerator(EncodeTypes.Code128, "12345")
                generator.Save("c:\test.png")
            End Using
            Using reader As New BarCodeReader("c:\test.png", DecodeType.Code39Standard, DecodeType.Code128)
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Console.WriteLine("BarCode Angle: " + result.Region.Angle)
                    Console.WriteLine("BarCode Quadrangle: " + result.Region.Quadrangle)
                Next
            End Using
            </code></example>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarCodeRegionParameters.Quadrangle">
      <summary>Gets <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> bounding barcode region</summary>
      <value>Returns <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> bounding barcode region</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarCodeRegionParameters.Angle">
      <summary>Gets the angle of the barcode (0-360).</summary>
      <value>The angle for barcode (0-360).</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarCodeRegionParameters.Points">
      <summary>Gets <see cref="T:System.Drawing.Point" />s array bounding barcode region</summary>
      <value>Returns <see cref="T:System.Drawing.Point" />s array bounding barcode region</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarCodeRegionParameters.Rectangle">
      <summary>Gets <see cref="T:System.Drawing.Rectangle" /> bounding barcode region</summary>
      <value>Returns <see cref="T:System.Drawing.Rectangle" /> bounding barcode region</value>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeRegionParameters.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeRegionParameters" /> value.
            </summary>
      <param name="obj">An System.Object value to compare to this instance.</param>
      <returns>
        <b>true</b> if obj has the same value as this instance; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeRegionParameters.op_Equality(Aspose.BarCode.BarCodeRecognition.BarCodeRegionParameters,Aspose.BarCode.BarCodeRecognition.BarCodeRegionParameters)">
      <summary>
            Returns a value indicating whether the first <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeRegionParameters" /> value is equal to the second.
            </summary>
      <param name="first">A first compared value</param>
      <param name="second">A second compared value</param>
      <returns>
        <b>true</b> if first has the same value as second; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeRegionParameters.op_Inequality(Aspose.BarCode.BarCodeRecognition.BarCodeRegionParameters,Aspose.BarCode.BarCodeRecognition.BarCodeRegionParameters)">
      <summary>
            Returns a value indicating if the first <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeRegionParameters" /> value is different from the second.
            </summary>
      <param name="first">A first compared value</param>
      <param name="second">A second compared value</param>
      <returns>
        <b>true</b> if first has the different value from second; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeRegionParameters.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeRegionParameters.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeRegionParameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeRegionParameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.BarCodeRecognition.BarCodeResult">
      <summary>
            Stores recognized barcode data like <see cref="T:Aspose.BarCode.BarCodeRecognition.SingleDecodeType" /> type, <see cref="T:System.String" /> codetext, 
            <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeRegionParameters" /> region and other parameters
            </summary>
      <example>
            This sample shows how to obtain BarCodeResult.
            <code>
            [C#]
            using (BarcodeGenerator generator = new BarcodeGenerator(EncodeTypes.Code128, "12345"))
            {
                generator.Save(@"c:\test.png");
            }
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.Code39Standard, DecodeType.Code128))
            {
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                    Console.WriteLine("BarCode Confidence: " + result.Confidence);
                    Console.WriteLine("BarCode ReadingQuality: " + result.ReadingQuality);
                    Console.WriteLine("BarCode Angle: " + result.Region.Angle);
                }
            }
            [VB.NET]
            Using generator As New BarcodeGenerator(EncodeTypes.Code128, "12345")
                generator.Save("c:\test.png")
            End Using
            Using reader As New BarCodeReader("c:\test.png", DecodeType.Code39Standard, DecodeType.Code128)
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Console.WriteLine("BarCode Confidence: " + result.Confidence)
                    Console.WriteLine("BarCode ReadingQuality: " + result.ReadingQuality)
                    Console.WriteLine("BarCode Angle: " + result.Region.Angle)
                Next
            End Using
            </code></example>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarCodeResult.ReadingQuality">
      <summary>Gets the reading quality. Works for 1D and postal barcodes.</summary>
      <value>The reading quality percent</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarCodeResult.Confidence">
      <summary>Gets recognition confidence level of the recognized barcode</summary>
      <value>
        <see cref="F:Aspose.BarCode.BarCodeRecognition.BarCodeConfidence.Strong" /> does not have fakes or misrecognitions, <see cref="F:Aspose.BarCode.BarCodeRecognition.BarCodeConfidence.Moderate" />
            could sometimes have fakes or incorrect codetext because this confidence level for barcodews with weak cheksum or even without it, 
            <see cref="F:Aspose.BarCode.BarCodeRecognition.BarCodeConfidence.None" /> always has incorrect codetext and could be fake recognitions</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarCodeResult.CodeText">
      <summary>Gets the code text</summary>
      <value>The code text of the barcode</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarCodeResult.CodeBytes">
      <summary>Gets the encoded code bytes</summary>
      <value>The code bytes of the barcode</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarCodeResult.CodeType">
      <summary>Gets the barcode type</summary>
      <value>The type information of the recognized barcode</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarCodeResult.CodeTypeName">
      <summary>Gets the name of the barcode type</summary>
      <value>The type name of the recognized barcode</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarCodeResult.Region">
      <summary>Gets the barcode region</summary>
      <value>The region of the recognized barcode</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarCodeResult.Extended">
      <summary>Gets extended parameters of recognized barcode</summary>
      <value>The extended parameters of recognized barcode</value>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeResult.GetCodeText(System.Text.Encoding)">
      <summary>
            Gets the code text with encoding.
            </summary>
      <param name="encoding">The encoding for codetext.</param>
      <returns>A string containing recognized code text.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeResult.Equals(Aspose.BarCode.BarCodeRecognition.BarCodeResult)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeResult" /> value.
            </summary>
      <param name="other">An <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeResult" /> value to compare to this instance.</param>
      <returns>
        <b>true</b> if obj has the same value as this instance; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeResult.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeResult" /> value.
            </summary>
      <param name="obj">An System.Object value to compare to this instance.</param>
      <returns>
        <b>true</b> if obj has the same value as this instance; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeResult.op_Equality(Aspose.BarCode.BarCodeRecognition.BarCodeResult,Aspose.BarCode.BarCodeRecognition.BarCodeResult)">
      <summary>
            Returns a value indicating whether the first <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeResult" /> value is equal to the second.
            </summary>
      <param name="first">A first compared value</param>
      <param name="second">A second compared value</param>
      <returns>
        <b>true</b> if first has the same value as second; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeResult.op_Inequality(Aspose.BarCode.BarCodeRecognition.BarCodeResult,Aspose.BarCode.BarCodeRecognition.BarCodeResult)">
      <summary>
            Returns a value indicating if the first <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeResult" /> value is different from the second.
            </summary>
      <param name="first">A first compared value</param>
      <param name="second">A second compared value</param>
      <returns>
        <b>true</b> if first has the different value from second; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeResult.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeResult.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeResult" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeResult" />.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeResult.Clone">
      <summary>
            Creates a copy of <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeResult" /> class.
            </summary>
      <returns>Returns copy of <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeResult" /> class.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BarCodeResult.#ctor(Aspose.BarCode.BarCodeRecognition.BarCodeResult)">
      <summary>
            Creates a a copy of the <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeResult" /> class.
            </summary>
      <param name="result">An copy <see cref="T:Aspose.BarCode.BarCodeRecognition.BarCodeResult" /> instance.</param>
    </member>
    <member name="T:Aspose.BarCode.BarCodeRecognition.BaseExtendedParameters">
      <summary>
            Basic class for extended parameters of recognized barcode storing 
            </summary>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BaseExtendedParameters.IsEmpty">
      <summary>Tests whether all parameters has only default values</summary>
      <value>Returns <b>true</b> if all parameters has only default values; otherwise, <b>false</b>.</value>
    </member>
    <member name="T:Aspose.BarCode.BarCodeRecognition.Code128ExtendedParameters">
      <summary>
            Stores special data of Code128 recognized barcode
            </summary>
      <summary>
            Represents the recognized barcode's region and barcode angle
            </summary>
      <example>
            This sample shows how to get code128 raw values
            <code>
            [C#]
            using (BarcodeGenerator generator = new BarcodeGenerator(EncodeTypes.Code128, "12345"))
            {
                generator.Save(@"c:\test.png");
            }
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.Code128))
            {
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                    Console.WriteLine("Code128 Data Portions: " + result.Extended.Code128);
                }
            }
            [VB.NET]
            Using generator As New BarcodeGenerator(EncodeTypes.Code128, "12345")
                generator.Save("c:\test.png")
            End Using
            Using reader As New BarCodeReader("c:\test.png", DecodeType.Code128)
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Console.WriteLine("Code128 Data Portions: " + result.Extended.Code128)
                Next
            End Using
            </code></example>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.Code128ExtendedParameters.Code128DataPortions">
      <summary>Gets <see cref="T:Aspose.BarCode.BarCodeRecognition.Code128DataPortion" /> array of recognized Code128 barcode</summary>
      <value>Array of the <see cref="T:Aspose.BarCode.BarCodeRecognition.Code128DataPortion" />.</value>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.Code128ExtendedParameters.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Aspose.BarCode.BarCodeRecognition.Code128ExtendedParameters" /> value.
            </summary>
      <param name="obj">An System.Object value to compare to this instance.</param>
      <returns>
        <b>true</b> if obj has the same value as this instance; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.Code128ExtendedParameters.op_Equality(Aspose.BarCode.BarCodeRecognition.Code128ExtendedParameters,Aspose.BarCode.BarCodeRecognition.Code128ExtendedParameters)">
      <summary>
            Returns a value indicating whether the first <see cref="T:Aspose.BarCode.BarCodeRecognition.Code128ExtendedParameters" /> value is equal to the second.
            </summary>
      <param name="first">A first compared value</param>
      <param name="second">A second compared value</param>
      <returns>
        <b>true</b> if first has the same value as second; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.Code128ExtendedParameters.op_Inequality(Aspose.BarCode.BarCodeRecognition.Code128ExtendedParameters,Aspose.BarCode.BarCodeRecognition.Code128ExtendedParameters)">
      <summary>
            Returns a value indicating if the first <see cref="T:Aspose.BarCode.BarCodeRecognition.Code128ExtendedParameters" /> value is different from the second.
            </summary>
      <param name="first">A first compared value</param>
      <param name="second">A second compared value</param>
      <returns>
        <b>true</b> if first has the different value from second; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.Code128ExtendedParameters.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.Code128ExtendedParameters.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.BarCodeRecognition.Code128ExtendedParameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.BarCodeRecognition.Code128ExtendedParameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.BarCodeRecognition.DataBarExtendedParameters">
      <summary>
            Stores a DataBar additional information of recognized barcode
            </summary>
      <example>
            This sample shows how to get DataBar additional information
            <code>
            [C#]
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.DatabarOmniDirectional))
            {
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                    Console.WriteLine("QR Structured Append Quantity: " + result.Extended.QR.QRStructuredAppendModeBarCodesQuantity);
                }
            }
            [VB.NET]
            Using reader As New BarCodeReader("c:\test.png", DecodeType.DatabarOmniDirectional)
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Console.WriteLine("QR Structured Append Quantity: " + result.Extended.QR.QRStructuredAppendModeBarCodesQuantity)
                Next
            End Using
            </code></example>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.DataBarExtendedParameters.Is2DCompositeComponent">
      <summary>Gets the DataBar 2D composite component flag. Default value is false.</summary>
      <value>The DataBar 2D composite component flag.</value>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.DataBarExtendedParameters.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Aspose.BarCode.BarCodeRecognition.DataBarExtendedParameters" /> value.
            </summary>
      <param name="obj">An System.Object value to compare to this instance.</param>
      <returns>
        <b>true</b> if obj has the same value as this instance; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.DataBarExtendedParameters.op_Equality(Aspose.BarCode.BarCodeRecognition.DataBarExtendedParameters,Aspose.BarCode.BarCodeRecognition.DataBarExtendedParameters)">
      <summary>
            Returns a value indicating whether the first <see cref="T:Aspose.BarCode.BarCodeRecognition.DataBarExtendedParameters" /> value is equal to the second.
            </summary>
      <param name="first">A first compared value</param>
      <param name="second">A second compared value</param>
      <returns>
        <b>true</b> if first has the same value as second; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.DataBarExtendedParameters.op_Inequality(Aspose.BarCode.BarCodeRecognition.DataBarExtendedParameters,Aspose.BarCode.BarCodeRecognition.DataBarExtendedParameters)">
      <summary>
            Returns a value indicating if the first <see cref="T:Aspose.BarCode.BarCodeRecognition.DataBarExtendedParameters" /> value is different from the second.
            </summary>
      <param name="first">A first compared value</param>
      <param name="second">A second compared value</param>
      <returns>
        <b>true</b> if first has the different value from second; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.DataBarExtendedParameters.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.DataBarExtendedParameters.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.BarCodeRecognition.DataBarExtendedParameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.BarCodeRecognition.DataBarExtendedParameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.BarCodeRecognition.OneDExtendedParameters">
      <summary>
            Stores special data of 1D recognized barcode like separate codetext and checksum
            </summary>
      <example>
            This sample shows how to get 1D barcode value and checksum
            <code>
            [C#]
            using (BarcodeGenerator generator = new BarcodeGenerator(EncodeTypes.EAN13, "1234567890128"))
            {
                generator.Save(@"c:\test.png");
            }
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.EAN13))
            {
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                    Console.WriteLine("BarCode Value: " + result.Extended.OneD.Value);
                    Console.WriteLine("BarCode Checksum: " + result.Extended.OneD.CheckSum);
                }
            }
            [VB.NET]
            Using generator As New BarcodeGenerator(EncodeTypes.EAN13, "1234567890128")
                generator.Save("c:\test.png")
            End Using
            Using reader As New BarCodeReader("c:\test.png", DecodeType.EAN13)
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Console.WriteLine("BarCode Value: " + result.Extended.OneD.Value)
                    Console.WriteLine("BarCode Checksum: " + result.Extended.OneD.CheckSum)
                Next
            End Using
            </code></example>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.OneDExtendedParameters.Value">
      <summary>Gets the codetext of 1D barcodes without checksum.</summary>
      <value>The codetext of 1D barcodes without checksum.</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.OneDExtendedParameters.CheckSum">
      <summary>Gets the checksum for 1D barcodes.</summary>
      <value>The checksum for 1D barcode.</value>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.OneDExtendedParameters.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Aspose.BarCode.BarCodeRecognition.OneDExtendedParameters" /> value.
            </summary>
      <param name="obj">An System.Object value to compare to this instance.</param>
      <returns>
        <b>true</b> if obj has the same value as this instance; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.OneDExtendedParameters.op_Equality(Aspose.BarCode.BarCodeRecognition.OneDExtendedParameters,Aspose.BarCode.BarCodeRecognition.OneDExtendedParameters)">
      <summary>
            Returns a value indicating whether the first <see cref="T:Aspose.BarCode.BarCodeRecognition.OneDExtendedParameters" /> value is equal to the second.
            </summary>
      <param name="first">A first compared value</param>
      <param name="second">A second compared value</param>
      <returns>
        <b>true</b> if first has the same value as second; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.OneDExtendedParameters.op_Inequality(Aspose.BarCode.BarCodeRecognition.OneDExtendedParameters,Aspose.BarCode.BarCodeRecognition.OneDExtendedParameters)">
      <summary>
            Returns a value indicating if the first <see cref="T:Aspose.BarCode.BarCodeRecognition.OneDExtendedParameters" /> value is different from the second.
            </summary>
      <param name="first">A first compared value</param>
      <param name="second">A second compared value</param>
      <returns>
        <b>true</b> if first has the different value from second; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.OneDExtendedParameters.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.OneDExtendedParameters.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.BarCodeRecognition.OneDExtendedParameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.BarCodeRecognition.OneDExtendedParameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.BarCodeRecognition.Pdf417ExtendedParameters">
      <summary>
            Stores a MacroPdf417 metadata information of recognized barcode
            </summary>
      <example>
            This sample shows how to get Macro Pdf417 metadata
            <code>
            [C#]
            using (BarcodeGenerator generator = new BarcodeGenerator(EncodeTypes.MacroPdf417, "12345"))
            {
                generator.Parameters.Barcode.Pdf417.Pdf417MacroFileID = 10;
                generator.Parameters.Barcode.Pdf417.Pdf417MacroSegmentsCount = 2;
                generator.Parameters.Barcode.Pdf417.Pdf417MacroSegmentID = 1;
                generator.Save(@"c:\test.png");
            }
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.MacroPdf417))
            {
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                    Console.WriteLine("Macro Pdf417 FileID: " + result.Extended.Pdf417.MacroPdf417FileID);
                    Console.WriteLine("Macro Pdf417 Segments: " + result.Extended.Pdf417.MacroPdf417SegmentsCount);
                    Console.WriteLine("Macro Pdf417 SegmentID: " + result.Extended.Pdf417.MacroPdf417SegmentID);
                }
            }
            [VB.NET]
            Using generator As New BarcodeGenerator(EncodeTypes.MacroPdf417, "12345")
                generator.Parameters.Barcode.Pdf417.Pdf417MacroFileID = 10
                generator.Parameters.Barcode.Pdf417.Pdf417MacroSegmentsCount = 2
                generator.Parameters.Barcode.Pdf417.Pdf417MacroSegmentID = 1
                generator.Save("c:\test.png")
            End Using
            Using reader As New BarCodeReader("c:\test.png", DecodeType.MacroPdf417)
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Console.WriteLine("Macro Pdf417 FileID: " + result.Extended.Pdf417.MacroPdf417FileID)
                    Console.WriteLine("Macro Pdf417 Segments: " + result.Extended.Pdf417.MacroPdf417SegmentsCount)
                    Console.WriteLine("Macro Pdf417 SegmentID: " + result.Extended.Pdf417.MacroPdf417SegmentID)
                Next
            End Using
            </code></example>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.Pdf417ExtendedParameters.MacroPdf417FileID">
      <summary>Gets the file ID of the barcode, only available with MacroPdf417.</summary>
      <value>The file ID for MacroPdf417</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.Pdf417ExtendedParameters.MacroPdf417SegmentID">
      <summary>Gets the segment ID of the barcode,only available with MacroPdf417.</summary>
      <value>The segment ID of the barcode.</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.Pdf417ExtendedParameters.MacroPdf417SegmentsCount">
      <summary>Gets macro pdf417 barcode segments count. Default value is -1.</summary>
      <value>Segments count.</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.Pdf417ExtendedParameters.MacroPdf417FileName">
      <summary>Macro PDF417 file name (optional).</summary>
      <value>File name.</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.Pdf417ExtendedParameters.MacroPdf417FileSize">
      <summary>Macro PDF417 file size (optional).</summary>
      <value>File size.</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.Pdf417ExtendedParameters.MacroPdf417Sender">
      <summary>Macro PDF417 sender name (optional).</summary>
      <value>Sender name</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.Pdf417ExtendedParameters.MacroPdf417Addressee">
      <summary>Macro PDF417 addressee name (optional).</summary>
      <value>Addressee name.</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.Pdf417ExtendedParameters.MacroPdf417TimeStamp">
      <summary>Macro PDF417 time stamp (optional).</summary>
      <value>Time stamp.</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.Pdf417ExtendedParameters.MacroPdf417Checksum">
      <summary>Macro PDF417 checksum (optional).</summary>
      <value>Checksum.</value>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.Pdf417ExtendedParameters.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Aspose.BarCode.BarCodeRecognition.Pdf417ExtendedParameters" /> value.
            </summary>
      <param name="obj">An System.Object value to compare to this instance.</param>
      <returns>
        <b>true</b> if obj has the same value as this instance; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.Pdf417ExtendedParameters.op_Equality(Aspose.BarCode.BarCodeRecognition.Pdf417ExtendedParameters,Aspose.BarCode.BarCodeRecognition.Pdf417ExtendedParameters)">
      <summary>
            Returns a value indicating whether the first <see cref="T:Aspose.BarCode.BarCodeRecognition.Pdf417ExtendedParameters" /> value is equal to the second.
            </summary>
      <param name="first">A first compared value</param>
      <param name="second">A second compared value</param>
      <returns>
        <b>true</b> if first has the same value as second; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.Pdf417ExtendedParameters.op_Inequality(Aspose.BarCode.BarCodeRecognition.Pdf417ExtendedParameters,Aspose.BarCode.BarCodeRecognition.Pdf417ExtendedParameters)">
      <summary>
            Returns a value indicating if the first <see cref="T:Aspose.BarCode.BarCodeRecognition.Pdf417ExtendedParameters" /> value is different from the second.
            </summary>
      <param name="first">A first compared value</param>
      <param name="second">A second compared value</param>
      <returns>
        <b>true</b> if first has the different value from second; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.Pdf417ExtendedParameters.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.Pdf417ExtendedParameters.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.BarCodeRecognition.Pdf417ExtendedParameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.BarCodeRecognition.Pdf417ExtendedParameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.BarCodeRecognition.QRExtendedParameters">
      <summary>
            Stores a QR Structured Append information of recognized barcode
            </summary>
      <example>
            This sample shows how to get QR Structured Append data
            <code>
            [C#]
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.QR))
            {
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                    Console.WriteLine("QR Structured Append Quantity: " + result.Extended.QR.QRStructuredAppendModeBarCodesQuantity);
                    Console.WriteLine("QR Structured Append Index: " + result.Extended.QR.QRStructuredAppendModeBarCodeIndex);
                    Console.WriteLine("QR Structured Append ParityData: " + result.Extended.QR.QRStructuredAppendModeParityData);
                }
            }
            [VB.NET]
            Using reader As New BarCodeReader("c:\test.png", DecodeType.QR)
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Console.WriteLine("QR Structured Append Quantity: " + result.Extended.QR.QRStructuredAppendModeBarCodesQuantity)
                    Console.WriteLine("QR Structured Append Index: " + result.Extended.QR.QRStructuredAppendModeBarCodeIndex)
                    Console.WriteLine("QR Structured Append ParityData: " + result.Extended.QR.QRStructuredAppendModeParityData)
                Next
            End Using
            </code></example>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QRExtendedParameters.QRStructuredAppendModeBarCodesQuantity">
      <summary>Gets the QR structured append mode barcodes quantity. Default value is -1.</summary>
      <value>The quantity of the QR structured append mode barcode.</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QRExtendedParameters.QRStructuredAppendModeBarCodeIndex">
      <summary>Gets the index of the QR structured append mode barcode. Index starts from 0. Default value is -1.</summary>
      <value>The quantity of the QR structured append mode barcode.</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QRExtendedParameters.QRStructuredAppendModeParityData">
      <summary>Gets the QR structured append mode parity data. Default value is -1.</summary>
      <value>The index of the QR structured append mode barcode.</value>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.QRExtendedParameters.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Aspose.BarCode.BarCodeRecognition.QRExtendedParameters" /> value.
            </summary>
      <param name="obj">An System.Object value to compare to this instance.</param>
      <returns>
        <b>true</b> if obj has the same value as this instance; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.QRExtendedParameters.op_Equality(Aspose.BarCode.BarCodeRecognition.QRExtendedParameters,Aspose.BarCode.BarCodeRecognition.QRExtendedParameters)">
      <summary>
            Returns a value indicating whether the first <see cref="T:Aspose.BarCode.BarCodeRecognition.QRExtendedParameters" /> value is equal to the second.
            </summary>
      <param name="first">A first compared value</param>
      <param name="second">A second compared value</param>
      <returns>
        <b>true</b> if first has the same value as second; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.QRExtendedParameters.op_Inequality(Aspose.BarCode.BarCodeRecognition.QRExtendedParameters,Aspose.BarCode.BarCodeRecognition.QRExtendedParameters)">
      <summary>
            Returns a value indicating if the first <see cref="T:Aspose.BarCode.BarCodeRecognition.QRExtendedParameters" /> value is different from the second.
            </summary>
      <param name="first">A first compared value</param>
      <param name="second">A second compared value</param>
      <returns>
        <b>true</b> if first has the different value from second; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.QRExtendedParameters.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.QRExtendedParameters.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.BarCodeRecognition.QRExtendedParameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.BarCodeRecognition.QRExtendedParameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.BarCodeRecognition.Quadrangle">
      <summary>
            Stores a set of four <see cref="T:System.Drawing.Point" />s that represent a <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> region.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.Quadrangle.Empty">
      <summary>Represents a <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> structure with its properties left uninitialized.</summary>
      <value>
        <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" />
      </value>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.Quadrangle.#ctor(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> structure with the describing points.
            </summary>
      <param name="leftTop">A <see cref="T:System.Drawing.Point" /> that represents the left-top corner of the Quadrangle.</param>
      <param name="rightTop">A <see cref="T:System.Drawing.Point" /> that represents the right-top corner of the Quadrangle.</param>
      <param name="rightBottom">A <see cref="T:System.Drawing.Point" /> that represents the right-bottom corner of the Quadrangle.</param>
      <param name="leftBottom">A <see cref="T:System.Drawing.Point" /> that represents the left-bottom corner of the Quadrangle.</param>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.Quadrangle.LeftTop">
      <summary>Gets left-top corner <see cref="T:System.Drawing.Point" /> of <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> region</summary>
      <value>A left-top corner <see cref="T:System.Drawing.Point" /> of <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> region</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.Quadrangle.RightTop">
      <summary>Gets right-top corner <see cref="T:System.Drawing.Point" /> of <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> region</summary>
      <value>A right-top corner <see cref="T:System.Drawing.Point" /> of <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> region</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.Quadrangle.RightBottom">
      <summary>Gets right-bottom corner <see cref="T:System.Drawing.Point" /> of <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> region</summary>
      <value>A right-bottom corner <see cref="T:System.Drawing.Point" /> of <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> region</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.Quadrangle.LeftBottom">
      <summary>Gets left-bottom corner <see cref="T:System.Drawing.Point" /> of <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> region</summary>
      <value>A left-bottom corner <see cref="T:System.Drawing.Point" /> of <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> region</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.Quadrangle.IsEmpty">
      <summary>Tests whether all <see cref="T:System.Drawing.Point" />s of this <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> have values of zero.</summary>
      <value>Returns <b>true</b> if all <see cref="T:System.Drawing.Point" />s of this <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> have values of zero; otherwise, <b>false</b>.</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.Quadrangle.BoundingRectangle">
      <summary>Gets <see cref="T:System.Drawing.Rectangle" /> bounding this <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /></summary>
      <value>Returns <see cref="T:System.Drawing.Rectangle" /> bounding this <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /></value>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.Quadrangle.Contains(System.Drawing.Point)">
      <summary>
            Determines if the specified <see cref="T:System.Drawing.Point" /> is contained within this <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> structure.
            </summary>
      <param name="pt">The <see cref="T:System.Drawing.Point" /> to test.</param>
      <returns>Returns <b>true</b> if <see cref="T:System.Drawing.Point" /> is contained within this <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> structure; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.Quadrangle.Contains(System.Int32,System.Int32)">
      <summary>
            Determines if the specified point is contained within this <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> structure.
            </summary>
      <param name="x">The x point cordinate.</param>
      <param name="y">The y point cordinate.</param>
      <returns>Returns <b>true</b> if point is contained within this <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> structure; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.Quadrangle.Contains(Aspose.BarCode.BarCodeRecognition.Quadrangle)">
      <summary>
            Determines if the specified <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> is contained or intersect this <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> structure.
            </summary>
      <param name="quad">The <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> to test.</param>
      <returns>Returns <b>true</b> if <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> is contained or intersect this <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> structure; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.Quadrangle.Contains(System.Drawing.Rectangle)">
      <summary>
            Determines if the specified <see cref="T:System.Drawing.Rectangle" /> is contained or intersect this <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> structure.
            </summary>
      <param name="rect">The <see cref="T:System.Drawing.Rectangle" /> to test.</param>
      <returns>Returns <b>true</b> if <see cref="T:System.Drawing.Rectangle" /> is contained or intersect this <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> structure; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.Quadrangle.Equals(Aspose.BarCode.BarCodeRecognition.Quadrangle)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> value.
            </summary>
      <param name="other">An <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> value to compare to this instance.</param>
      <returns>
        <b>true</b> if obj has the same value as this instance; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.Quadrangle.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> value.
            </summary>
      <param name="obj">An System.Object value to compare to this instance.</param>
      <returns>
        <b>true</b> if obj has the same value as this instance; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.Quadrangle.op_Equality(Aspose.BarCode.BarCodeRecognition.Quadrangle,Aspose.BarCode.BarCodeRecognition.Quadrangle)">
      <summary>
            Returns a value indicating whether the first <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> value is equal to the second.
            </summary>
      <param name="first">A first compared value</param>
      <param name="second">A second compared value</param>
      <returns>
        <b>true</b> if first has the same value as second; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.Quadrangle.op_Inequality(Aspose.BarCode.BarCodeRecognition.Quadrangle,Aspose.BarCode.BarCodeRecognition.Quadrangle)">
      <summary>
            Returns a value indicating if the first <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" /> value is different from the second.
            </summary>
      <param name="first">A first compared value</param>
      <param name="second">A second compared value</param>
      <returns>
        <b>true</b> if first has the different value from second; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.Quadrangle.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.Quadrangle.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.BarCodeRecognition.Quadrangle" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.BarCodeRecognition.AustraliaPostCustomerInformationDecoder">
      <summary>
            Public interface for Customer Information Field decoding which is used in AustraliaPost symbology. Implementation should be provided by user. 
            </summary>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.AustraliaPostCustomerInformationDecoder.Decode(System.String)">
      <summary>
            Decode Customer Information Field from AustraliaPost symbology. 
            Can be used for different data interpretation from NTable and CTable encoding.
            Data is provided as a row of bar values: 0, 1, 2 or 3.
            </summary>
      <param name="customerInformationField">The Customer Information Field encoded as row of raw bar values: 0, 1, 2 or 3</param>
      <returns>the decoded Customer Information Field string</returns>
      <example>
            This sample shows how to decode data with AustraliaPostCustomerInformationDecoder interface
            <code> 
            [C#]
            string[] N_Table = { "00", "01", "02", "10", "11", "12", "20", "21", "22", "30" };
            public string Decode(string customerInformationField)
            {
                StringBuilder bd = new StringBuilder();
                for (int i = 0; customerInformationField.Length &gt; i; i += 2)
                {
                    if (customerInformationField.Length &gt;= i + 2)
                    {
                        string tmp = customerInformationField.Substring(i, 2);
                        for (int j = 0; N_Table.Length &gt; j; j++)
                        {
                            if (N_Table[j].Equals(tmp))
                            {
                                bd.Append(j);
                                break;
                            }
                        }
                    }
                }
                 return bd.ToString();
            }
            </code></example>
    </member>
    <member name="T:Aspose.BarCode.BarCodeRecognition.AustraliaPostSettings">
      <summary>
            AustraliaPost decoding parameters. Contains parameters which make influence on recognized data of AustraliaPost symbology.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.AustraliaPostSettings.CustomerInformationInterpretingType">
      <summary>
            Gets or sets the Interpreting Type for the Customer Information of AustralianPost BarCode.Default is CustomerInformationInterpretingType.Other.
            </summary>
      <value>The interpreting type (CTable, NTable or Other) of customer information for AustralianPost BarCode</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.AustraliaPostSettings.IgnoreEndingFillingPatternsForCTable">
      <summary>
            The flag which force AustraliaPost decoder to ignore last filling patterns in Customer Information Field during decoding as CTable method.
            CTable encoding method does not have any gaps in encoding table and sequnce "333" of filling paterns is decoded as letter "z".
            </summary>
      <value>The flag which force AustraliaPost decoder to ignore last filling patterns during CTable method decoding</value>
      <example>
            This sample shows how to generate and recognize Australia Post barcode with CTable Interpreting Type and ignoring filling patterns.
            <code>
            [C#]
            using (BarcodeGenerator generator = new BarcodeGenerator(EncodeTypes.AustraliaPost, "5912345678AB"))
            {
                generator.Parameters.Barcode.AustralianPost.AustralianPostEncodingTable = CustomerInformationInterpretingType.CTable;
                using (Bitmap image = generator.GenerateBarCodeImage())
                using (BarCodeReader reader = new BarCodeReader(image, DecodeType.AustraliaPost))
                 {
                    reader.BarcodeSettings.AustraliaPost.CustomerInformationInterpretingType = CustomerInformationInterpretingType.CTable;
                    reader.BarcodeSettings.AustraliaPost.IgnoreEndingFillingPatternsForCTable = true;
                    foreach (BarCodeResult result in reader.ReadBarCodes())
                    {
                        Console.WriteLine("BarCode Type: " + result.CodeType);
                        Console.WriteLine("BarCode CodeText: " + result.CodeText);
                    }
                }
            }
            [VB.NET]
            Using generator As New BarcodeGenerator(EncodeTypes.AustraliaPost, "5912345678AB")
                generator.Parameters.Barcode.AustralianPost.AustralianPostEncodingTable = CustomerInformationInterpretingType.CTable
                Using image As Bitmap = generator.GenerateBarCodeImage()
                    Using reader As New BarCodeReader(image, DecodeType.AustraliaPost)
                        reader.BarcodeSettings.AustraliaPost.CustomerInformationInterpretingType = CustomerInformationInterpretingType.CTable
                        reader.BarcodeSettings.AustraliaPost.IgnoreEndingFillingPatternsForCTable = True
                        For Each result As BarCodeResult In reader.ReadBarCodes()
                            Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                            Console.WriteLine("BarCode CodeText: " + result.CodeText)
                        Next
                    End Using
                End Using
            End Using
            </code></example>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.AustraliaPostSettings.CustomerInformationDecoder">
      <summary>
            Public interface for Customer Information Field decoding which is used in AustraliaPost symbology.
            </summary>
      <value>Public interface for Customer Information Field decoding which is used in AustraliaPost symbology.</value>
    </member>
    <member name="T:Aspose.BarCode.BarCodeRecognition.BarcodeSettings">
      <summary>
            The main BarCode decoding parameters. Contains parameters which make influence on recognized data.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarcodeSettings.ChecksumValidation">
      <summary>
        <para>Enable checksum validation during recognition for 1D and Postal barcodes.</para>
        <para>Default is treated as Yes for symbologies which must contain checksum, as No where checksum only possible.</para>
        <para>Checksum never used: Codabar, PatchCode, Pharmacode, DataLogic2of5</para>
        <para>Checksum is possible: Code39 Standard/Extended, Standard2of5, Interleaved2of5, ItalianPost25, Matrix2of5, MSI, ItalianPost25, DeutschePostIdentcode, DeutschePostLeitcode, VIN</para>
        <para>Checksum always used: Rest symbologies</para>
      </summary>
      <example>
            This sample shows influence of ChecksumValidation on recognition quality and results
            <code> 
            [C#]
            using (BarcodeGenerator generator = new BarcodeGenerator(EncodeTypes.EAN13, "1234567890128"))
            {
                generator.Save(@"c:\test.png");
            }
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.EAN13))
            {
                //checksum disabled
                reader.BarcodeSettings.ChecksumValidation = ChecksumValidation.Off;
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                    Console.WriteLine("BarCode Value: " + result.Extended.OneD.Value);
                    Console.WriteLine("BarCode Checksum: " + result.Extended.OneD.CheckSum);
                }
            }
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.EAN13))
            {
                //checksum enabled
                reader.BarcodeSettings.ChecksumValidation = ChecksumValidation.On;
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                    Console.WriteLine("BarCode Value: " + result.Extended.OneD.Value);
                    Console.WriteLine("BarCode Checksum: " + result.Extended.OneD.CheckSum);
                }
            }
            [VB.NET]
            Using generator As New BarcodeGenerator(EncodeTypes.EAN13, "1234567890128")
                generator.Save("c:\test.png")
            End Using
            Using reader As New BarCodeReader("c:\test.png", DecodeType.EAN13)
                'checksum disabled
                reader.BarcodeSettings.ChecksumValidation = ChecksumValidation.Off
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Console.WriteLine("BarCode Value: " + result.Extended.OneD.Value)
                    Console.WriteLine("BarCode Checksum: " + result.Extended.OneD.CheckSum)
                Next
            End Using
            Using reader As New BarCodeReader("c:\test.png", DecodeType.EAN13)
                'checksum enabled
                reader.BarcodeSettings.ChecksumValidation = ChecksumValidation.On
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Console.WriteLine("BarCode Value: " + result.Extended.OneD.Value)
                    Console.WriteLine("BarCode Checksum: " + result.Extended.OneD.CheckSum)
                Next
            End Using
            </code></example>
      <value>Enable checksum validation during recognition for 1D and Postal barcodes.</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarcodeSettings.StripFNC">
      <summary>
            Strip FNC1, FNC2, FNC3 characters from codetext. Default value is false.
            </summary>
      <example>
            This sample shows how to strip FNC characters
            <code> 
            [C#]
            using (BarcodeGenerator generator = new BarcodeGenerator(EncodeTypes.GS1Code128, "(02)04006664241007(37)1(400)7019590754"))
            {
                generator.Save(@"c:\test.png");
            }
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.Code128))
            {
                //StripFNC disabled
                reader.BarcodeSettings.StripFNC = false;
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.Code128))
            {
                //StripFNC enabled
                reader.BarcodeSettings.StripFNC = true;
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            [VB.NET]
            Using generator As New BarcodeGenerator(EncodeTypes.GS1Code128, "(02)04006664241007(37)1(400)7019590754")
                generator.Save("c:\test.png")
            End Using
            Using reader As New BarCodeReader("c:\test.png", DecodeType.Code128)
                'StripFNC disabled
                reader.BarcodeSettings.StripFNC = False
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                Next
            End Using
            Using reader As New BarCodeReader("c:\test.png", DecodeType.Code128)
                'StripFNC enabled
                reader.BarcodeSettings.StripFNC = True
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                Next
            End Using
            </code></example>
      <value>Strip FNC1, FNC2, FNC3 characters from codetext. Default value is false.</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarcodeSettings.DetectEncoding">
      <summary>
            The flag which force engine to detect codetext encoding for Unicode codesets. Default value is true.
            </summary>
      <example>
            This sample shows how to detect text encoding on the fly if DetectEncoding is enabled
            <code>
            [C#]
            using (MemoryStream ms = new MemoryStream())
            {
                using (BarcodeGenerator generator = new BarcodeGenerator(EncodeTypes.QR, "Слово"))
                {
                    generator.Parameters.Barcode.QR.CodeTextEncoding = Encoding.UTF8;
                    generator.Save(ms, BarCodeImageFormat.Png);
                }
                //detects encoding for Unicode codesets is enabled
                ms.Position = 0;
                using (BarCodeReader reader = new BarCodeReader(ms, DecodeType.QR))
                {
                    reader.BarcodeSettings.DetectEncoding = true;
                    foreach (BarCodeResult result in reader.ReadBarCodes())
                        Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
                //detect encoding is disabled
                ms.Position = 0;
                using (BarCodeReader reader = new BarCodeReader(ms, DecodeType.QR))
                {
                    reader.BarcodeSettings.DetectEncoding = false;
                    foreach (BarCodeResult result in reader.ReadBarCodes())
                        Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            [VB.NET]
            Using ms As New MemoryStream
                Using generator As New BarcodeGenerator(EncodeTypes.QR, "Слово")
                    generator.Parameters.Barcode.QR.CodeTextEncoding = System.Text.Encoding.UTF8
                    generator.Save(ms, BarCodeImageFormat.Png)
                End Using
                'detects encoding for Unicode codesets is enabled
                ms.Position = 0
                Using reader As New BarCodeReader("c:\test.png", DecodeType.Code39Standard, DecodeType.Code128)
                    reader.BarcodeSettings.DetectEncoding = True
                    For Each result As BarCodeResult In reader.ReadBarCodes()
                        Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Next
                End Using
                'detect encoding is disabled
                ms.Position = 0
                Using reader As New BarCodeReader("c:\test.png", DecodeType.Code39Standard, DecodeType.Code128)
                    reader.BarcodeSettings.DetectEncoding = False
                    For Each result As BarCodeResult In reader.ReadBarCodes()
                        Console.WriteLine("BarCode CodeText: " + result.CodeText)
                    Next
                End Using
            End Using
            </code></example>
      <value>The flag which force engine to detect codetext encoding for Unicode codesets</value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarcodeSettings.AustraliaPost">
      <summary>
            Gets AustraliaPost decoding parameters
            </summary>
      <value>The AustraliaPost decoding parameters which make influence on recognized data of AustraliaPost symbology</value>
    </member>
    <member name="T:Aspose.BarCode.BarCodeRecognition.BaseDecodeType">
      <summary>
            Base class for MultyDecodeType and SingleDecodeType.
            </summary>
      <example>
            This sample shows how to use BaseDecodeType with SingleDecodeType and MultyDecodeType
            <code> 
            [C#]
            BaseDecodeType decodeOne = DecodeType.Code128;
            BaseDecodeType decodeTwo = new MultyDecodeType(DecodeType.Code128, DecodeType.Code39Standard, DecodeType.Code39Extended);
            [VB.NET]
            Dim decodeOne As BaseDecodeType = DecodeType.Code128
            Dim decodeTwo As BaseDecodeType = New MultyDecodeType(DecodeType.Code128, DecodeType.Code39Standard, DecodeType.Code39Extended)
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BaseDecodeType.ContainsAny(Aspose.BarCode.BarCodeRecognition.BaseDecodeType[])">
      <summary>
            Determines whether any of the given decode types is included into 
            </summary>
      <param name="types">Types to verify</param>
      <returns>Value is a true if any types are included into</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BaseDecodeType.Equals(Aspose.BarCode.BarCodeRecognition.SingleDecodeType)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Aspose.BarCode.BarCodeRecognition.SingleDecodeType" /> value.
            </summary>
      <param name="other">An <see cref="T:Aspose.BarCode.BarCodeRecognition.SingleDecodeType" /> value to compare to this instance.</param>
      <returns>
        <b>true</b> if obj has the same value as this instance; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BaseDecodeType.Equals(Aspose.BarCode.BarCodeRecognition.MultyDecodeType)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Aspose.BarCode.BarCodeRecognition.MultyDecodeType" /> value.
            </summary>
      <param name="other">An <see cref="T:Aspose.BarCode.BarCodeRecognition.MultyDecodeType" /> value to compare to this instance.</param>
      <returns>
        <b>true</b> if obj has the same value as this instance; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BaseDecodeType.Equals(Aspose.BarCode.BarCodeRecognition.BaseDecodeType)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Aspose.BarCode.BarCodeRecognition.BaseDecodeType" /> value.
            </summary>
      <param name="other">An <see cref="T:Aspose.BarCode.BarCodeRecognition.BaseDecodeType" /> value to compare to this instance.</param>
      <returns>
        <b>true</b> if obj has the same value as this instance; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BaseDecodeType.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Aspose.BarCode.BarCodeRecognition.BaseDecodeType" /> value.
            </summary>
      <param name="obj">An System.Object value to compare to this instance.</param>
      <returns>
        <b>true</b> if obj has the same value as this instance; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BaseDecodeType.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BaseDecodeType.TryParse(System.String,Aspose.BarCode.BarCodeRecognition.SingleDecodeType@)">
      <summary>
            Converts the string representation of a SingleDecodeType to its instance.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="parsingType">A string containing a SingleDecodeType representation to convert.</param>
      <param name="result">An actual SingleDecodeType is returned, when conversion has completed successfully; 
            <para>otherwise it returns indefinite type. <seealso cref="F:Aspose.BarCode.BarCodeRecognition.DecodeType.None" /> or  SingleDecodeType (-1, "None").</para></param>
      <returns>
        <b>true</b> if s was converted successfully; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BaseDecodeType.TryParse(System.String,Aspose.BarCode.BarCodeRecognition.MultyDecodeType@)">
      <summary>
            Converts the string representation of a MultyDecodeType to its instance.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="parsingType">A string containing a MultyDecodeType representation to convert.</param>
      <param name="result">An actual MultyDecodeType is returned, when conversion has completed successfully; 
            <para>otherwise it returns indefinite type. <seealso cref="F:Aspose.BarCode.BarCodeRecognition.DecodeType.None" /> or MultyDecodeType ("None").</para></param>
      <returns>
        <b>true</b> if s was converted successfully; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.BaseDecodeType.TryParse(System.String,Aspose.BarCode.BarCodeRecognition.BaseDecodeType@)">
      <summary>
            Converts the string representation of a BaseDecodeType to its instance, having determined the concrete type.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="parsingType">A string containing a MultyDecodeType representation to convert.</param>
      <param name="result">An actual MultyDecodeType is returned, when conversion has completed successfully; 
            <para>otherwise it returns indefinite type. <seealso cref="F:Aspose.BarCode.BarCodeRecognition.DecodeType.None" /> or MultyDecodeType ("None").</para></param>
      <returns>
        <b>true</b> if s was converted successfully; otherwise, <b>false</b>.</returns>
    </member>
    <member name="T:Aspose.BarCode.BarCodeRecognition.DecodeType">
      <summary>
            Specify the type of barcode to read. 
            </summary>
      <example>
            This sample shows how to detect Code39 and Code128 barcodes.
            <code>
            [C#]
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.Code39Standard, DecodeType.Code128))
            {
                foreach (BarCodeResult result in reader.ReadBarCodes())
                {
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName);
                    Console.WriteLine("BarCode CodeText: " + result.CodeText);
                }
            }
            [VB.NET]
            Using reader As New BarCodeReader("c:\test.png", DecodeType.Code39Standard, DecodeType.Code128)
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                    Console.WriteLine("BarCode CodeText: " + result.CodeText)
                Next
            End Using
            </code></example>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.None">
      <summary>
            Unspecified decode type. 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.Codabar">
      <summary>
            Specifies that the data should be decoded with <b>CODABAR</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.Code11">
      <summary>
            Specifies that the data should be decoded with <b>CODE 11</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.Code39Standard">
      <summary>
            Specifies that the data should be decoded with <b>Standard CODE 39</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.Code39Extended">
      <summary>
            Specifies that the data should be decoded with <b>Extended CODE 39</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.Code93Standard">
      <summary>
            Specifies that the data should be decoded with <b>Standard CODE 93</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.Code93Extended">
      <summary>
            Specifies that the data should be decoded with <b>Extended CODE 93</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.Code128">
      <summary>
            Specifies that the data should be decoded with <b>CODE 128</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.GS1Code128">
      <summary>
            Specifies that the data should be decoded with <b>GS1 CODE 128</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.EAN8">
      <summary>
            Specifies that the data should be decoded with <b>EAN-8</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.EAN13">
      <summary>
            Specifies that the data should be decoded with <b>EAN-13</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.EAN14">
      <summary>
            Specifies that the data should be decoded with <b>EAN14</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.SCC14">
      <summary>
            Specifies that the data should be decoded with <b>SCC14</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.SSCC18">
      <summary>
            Specifies that the data should be decoded with <b>SSCC18</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.UPCA">
      <summary>
            Specifies that the data should be decoded with <b>UPC-A</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.UPCE">
      <summary>
            Specifies that the data should be decoded with <b>UPC-E</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.ISBN">
      <summary>
            Specifies that the data should be decoded with <b>ISBN</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.Standard2of5">
      <summary>
            Specifies that the data should be decoded with <b>Standard 2 of 5</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.Interleaved2of5">
      <summary>
            Specifies that the data should be decoded with <b>INTERLEAVED 2 of 5</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.Matrix2of5">
      <summary>
            Specifies that the data should be decoded with <b>Matrix 2 of 5</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.ItalianPost25">
      <summary>
            Specifies that the data should be decoded with <b>Italian Post 25</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.IATA2of5">
      <summary>
            Specifies that the data should be decoded with <b>IATA 2 of 5</b> barcode specification. IATA (International Air Transport Association) uses this barcode for the management of air cargo.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.ITF14">
      <summary>
            Specifies that the data should be decoded with <b>ITF14</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.ITF6">
      <summary>
            Specifies that the data should be decoded with <b>ITF6</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.MSI">
      <summary>
            Specifies that the data should be decoded with <b>MSI Plessey</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.VIN">
      <summary>
            Specifies that the data should be decoded with <b>VIN</b> (Vehicle Identification Number) barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.DeutschePostIdentcode">
      <summary>
            Specifies that the data should be decoded with <b>DeutschePost Ident code</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.DeutschePostLeitcode">
      <summary>
            Specifies that the data should be decoded with <b>DeutschePost Leit code</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.OPC">
      <summary>
            Specifies that the data should be decoded with <b>OPC</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.PZN">
      <summary>
             Specifies that the data should be decoded with <b>PZN</b> barcode specification. This symbology is also known as Pharma Zentral Nummer
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.Pharmacode">
      <summary>
            Specifies that the data should be decoded with <b>Pharmacode</b> barcode. This symbology is also known as Pharmaceutical Binary Code
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.DataMatrix">
      <summary>
            Specifies that the data should be decoded with <b>DataMatrix</b> barcode symbology
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.GS1DataMatrix">
      <summary>
            Specifies that the data should be decoded with <b>GS1DataMatrix</b> barcode symbology
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.QR">
      <summary>
            Specifies that the data should be decoded with <b>QR Code</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.Aztec">
      <summary>
            Specifies that the data should be decoded with <b>Aztec</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.Pdf417">
      <summary>
            Specifies that the data should be decoded with <b>Pdf417</b> barcode symbology
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.MacroPdf417">
      <summary>
            Specifies that the data should be decoded with <b>MacroPdf417</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.MicroPdf417">
      <summary>
            Specifies that the data should be decoded with <b>MicroPdf417</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.CodablockF">
      <summary>
            Specifies that the data should be decoded with <b>CodablockF</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.AustraliaPost">
      <summary>
            Specifies that the data should be decoded with <b>Australia Post</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.Postnet">
      <summary>
            Specifies that the data should be decoded with <b>Postnet</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.Planet">
      <summary>
            Specifies that the data should be decoded with <b>Planet</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.OneCode">
      <summary>
            Specifies that the data should be decoded with USPS <b>OneCode</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.RM4SCC">
      <summary>
            Specifies that the data should be decoded with <b>RM4SCC</b> barcode specification. RM4SCC (Royal Mail 4-state Customer Code) is used for automated mail sort process in UK.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.Mailmark">
      <summary>
            Specifies that the data should be decoded with <b>Royal Mail Mailmark</b> barcode specification.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.DatabarOmniDirectional">
      <summary>
            Specifies that the data should be decoded with <b>GS1 Databar omni-directional</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.DatabarTruncated">
      <summary>
            Specifies that the data should be decoded with <b>GS1 Databar truncated</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.DatabarLimited">
      <summary>
            Specifies that the data should be decoded with <b>GS1 Databar limited</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.DatabarExpanded">
      <summary>
            Specifies that the data should be decoded with <b>GS1 Databar expanded</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.DatabarStackedOmniDirectional">
      <summary>
            Specifies that the data should be decoded with <b>GS1 Databar stacked omni-directional</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.DatabarStacked">
      <summary>
            Specifies that the data should be decoded with <b>GS1 Databar stacked</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.DatabarExpandedStacked">
      <summary>
            Specifies that the data should be decoded with <b>GS1 Databar expanded stacked</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.PatchCode">
      <summary>
            Specifies that the data should be decoded with <b>Patch code</b> barcode specification. Barcode symbology is used for automated scanning
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.ISSN">
      <summary>
            Specifies that the data should be decoded with <b>ISSN</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.ISMN">
      <summary>
            Specifies that the data should be decoded with <b>ISMN</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.Supplement">
      <summary>
            Specifies that the data should be decoded with <b>Supplement(EAN2, EAN5)</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.AustralianPosteParcel">
      <summary>
            Specifies that the data should be decoded with <b>Australian Post Domestic eParcel Barcode</b> barcode specification 
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.SwissPostParcel">
      <summary>
            Specifies that the data should be decoded with <b>Swiss Post Parcel Barcode</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.Code16K">
      <summary>
            Specifies that the data should be decoded with <b>SCode16K</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.MicroQR">
      <summary>
            Specifies that the data should be decoded with <b>MicroQR Code</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.CompactPdf417">
      <summary>
            Specifies that the data should be decoded with <b>CompactPdf417</b> (Pdf417Truncated) barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.GS1QR">
      <summary>
            Specifies that the data should be decoded with <b>GS1 QR</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.MaxiCode">
      <summary>
            Specifies that the data should be decoded with <b>MaxiCode</b> barcode specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.MicrE13B">
      <summary>
            Specifies that the data should be decoded with <b>MICR E-13B</b> blank specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.Code32">
      <summary>
            Specifies that the data should be decoded with <b>Code32</b> blank specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.DataLogic2of5">
      <summary>
            Specifies that the data should be decoded with <b>DataLogic 2 of 5</b> blank specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.DotCode">
      <summary>
            Specifies that the data should be decoded with <b>DotCode</b> blank specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.DutchKIX">
      <summary>
            Specifies that the data should be decoded with <b>DotCode</b> blank specification
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.Types1D">
      <summary>
            Specifies that data will be checked with all of <b>1D</b> barcode symbologies
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.Types2D">
      <summary>
            Specifies that data will be checked with all of <b>2D</b> barcode symbologies
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.PostalTypes">
      <summary>
            Specifies that data will be checked with all of <b>1.5D Postal</b> barcode symbologies, like <b>Planet, Postnet, AustraliaPost, OneCode, RM4SCC, DutchKIX</b></summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.MostCommonTypes">
      <summary>
            Specifies that data will be checked with most commonly used symbologies
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BarCodeRecognition.DecodeType.AllSupportedTypes">
      <summary>
            Specifies that data will be checked with all available symbologies
            </summary>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.DecodeType.AllSupportedTypesArray">
      <summary>
            Gets an array that represents AllSupportedTypes
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.DecodeType.ScanSets(Aspose.BarCode.BarCodeRecognition.BaseDecodeType[])">
      <summary>
            Specify scan sets by barcodeTypes
            </summary>
      <param name="barcodeTypes">Array of single and multy decode types</param>
      <returns>A multi decode type</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.DecodeType.GetNames">
      <summary>
            Retrieves an array of the names of the decode types.
            </summary>
      <returns>A string array of the names of the decode types.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.DecodeType.Parse(System.String,Aspose.BarCode.BarCodeRecognition.SingleDecodeType@)">
      <summary>
            Converts the string representation of a SingleDecodeType to its instance.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="parsingType">A string containing a SingleDecodeType representation to convert.</param>
      <param name="result">An actual SingleDecodeType returns, when conversion has completed successfully; 
            <para>otherwise it returns indefinite type. <seealso cref="F:Aspose.BarCode.BarCodeRecognition.DecodeType.None" /> or  SingleDecodeType (-1, "None").</para></param>
      <returns>
        <b>true</b> if s was converted successfully; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.DecodeType.TryParse(System.String,Aspose.BarCode.BarCodeRecognition.SingleDecodeType@)">
      <summary>
            Converts the string representation of a SingleDecodeType to its instance.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="parsingType">A string in the format as "Index:-1; Name:None" to convert.</param>
      <param name="result">An actual SingleDecodeType returns, when conversion has completed successfully; 
            <para>otherwise it returns indefinite type. <seealso cref="F:Aspose.BarCode.BarCodeRecognition.DecodeType.None" /> or  SingleDecodeType (-1, "None").</para></param>
      <returns>
        <b>true</b> if s was converted successfully; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.DecodeType.TryParse(System.String,Aspose.BarCode.BarCodeRecognition.MultyDecodeType@)">
      <summary>
            Converts the string representation of a MultyDecodeType to its instance.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="parsingType">A string in the format as either "AllSupportedTypes" or "EAN8,EAN13,CodaBar" to convert.</param>
      <param name="result">An actual MultyDecodeType is returned, when conversion has completed successfully; 
            <para>otherwise it returns indefinite type. <seealso cref="F:Aspose.BarCode.BarCodeRecognition.DecodeType.None" /> or  MultyDecodeType ("None").</para></param>
      <returns>
        <b>true</b> if s was converted successfully; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.DecodeType.Is1D(Aspose.BarCode.BarCodeRecognition.BaseDecodeType)">
      <summary>
            Determines if the specified <see cref="T:Aspose.BarCode.BarCodeRecognition.BaseDecodeType" /> contains any 1D barcode symbology
            </summary>
      <param name="symbology">The <see cref="T:Aspose.BarCode.BarCodeRecognition.BaseDecodeType" /> to test.</param>
      <returns>Returns <b>true</b> if <see cref="T:Aspose.BarCode.BarCodeRecognition.BaseDecodeType" /> contains any 1D barcode symbology; otherwise, returns <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.DecodeType.IsPostal(Aspose.BarCode.BarCodeRecognition.BaseDecodeType)">
      <summary>
            Determines if the specified <see cref="T:Aspose.BarCode.BarCodeRecognition.BaseDecodeType" /> contains any Postal barcode symbology
            </summary>
      <param name="symbology">The <see cref="T:Aspose.BarCode.BarCodeRecognition.BaseDecodeType" /> to test.</param>
      <returns>Returns <b>true</b> if <see cref="T:Aspose.BarCode.BarCodeRecognition.BaseDecodeType" /> contains any Postal barcode symbology; otherwise, returns <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.DecodeType.Is2D(Aspose.BarCode.BarCodeRecognition.BaseDecodeType)">
      <summary>
            Determines if the specified <see cref="T:Aspose.BarCode.BarCodeRecognition.BaseDecodeType" /> contains any 2D barcode symbology
            </summary>
      <param name="symbology">The <see cref="T:Aspose.BarCode.BarCodeRecognition.BaseDecodeType" /> to test.</param>
      <returns>Returns <b>true</b> if <see cref="T:Aspose.BarCode.BarCodeRecognition.BaseDecodeType" /> contains any 2D barcode symbology; otherwise, returns <b>false</b>.</returns>
    </member>
    <member name="T:Aspose.BarCode.BarCodeRecognition.MultyDecodeType">
      <summary>
            Composite decode type.
            </summary>
      <example>
            This sample shows how to create compound MultyDecode types that combine SingleDecodeType and MultiDecode types.
            <code> 
            [C#]
            MultyDecodeType types1 = new MultyDecodeType(DecodeType.QR, DecodeType.DataMatrix);
            MultyDecodeType types2 = new MultyDecodeType(types1, DecodeType.Code128, DecodeType.Code39Standard);
            [VB.NET]
            Dim multyType1 As MultyDecodeType 
            multyType1 = New MultyDecodeType(DecodeType.QR, DecodeType.DataMatrix)
            Dim multyType2 As MultyDecodeType
            multyType2 = New MultyDecodeType(multyType1, DecodeType.Code128, DecodeType.Code39Standard)
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.MultyDecodeType.#ctor(Aspose.BarCode.BarCodeRecognition.SingleDecodeType[])">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.BarCode.BarCodeRecognition.MultyDecodeType" /> class.
            </summary>
      <param name="barcodeTypes">Array of single decode types</param>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.MultyDecodeType.#ctor(Aspose.BarCode.BarCodeRecognition.BaseDecodeType[])">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.BarCode.BarCodeRecognition.MultyDecodeType" /> class.
            </summary>
      <param name="barcodeTypes">Array of multy and single decode types</param>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.MultyDecodeType.Add(Aspose.BarCode.BarCodeRecognition.SingleDecodeType)">
      <summary>
            Adds one more <see cref="T:Aspose.BarCode.BarCodeRecognition.SingleDecodeType" /> to the MultyDecodeType.
            </summary>
      <param name="singleType">A Single DecodeType to be added to the list</param>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.MultyDecodeType.ContainsAll(Aspose.BarCode.BarCodeRecognition.BaseDecodeType[])">
      <summary>
            Check if this contains all types from barcode types.
            </summary>
      <param name="barcodeTypes">Input single or multy barcode types</param>
      <returns>Value is a true if all types are included into</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.MultyDecodeType.ToString">
      <summary>
            Overridden method representing MultyDecodeType as a string.
            </summary>
      <returns>
            A string representing MultyDecodeType instance as "singleDecodeType1, singleDecodeType2, ..."
            <para><b>"AllSupportedTypes"</b> returns when all types are included.</para></returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.MultyDecodeType.TryParse(System.String,Aspose.BarCode.BarCodeRecognition.MultyDecodeType@)">
      <summary>
            Converts the string representation of a MultyDecodeType to its instance.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="parsingType">A string in the format as either "AllSupportedTypes" or "EAN8,EAN13,CodaBar" to convert.</param>
      <param name="result">An actual MultyDecodeType is returned, when conversion has completed successfully; 
            <para>otherwise it returns indefinite type. <seealso cref="F:Aspose.BarCode.BarCodeRecognition.DecodeType.None" /> or  MultyDecodeType ("None").</para></param>
      <returns>
        <b>true</b> if s was converted successfully; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.MultyDecodeType.ContainsAny(Aspose.BarCode.BarCodeRecognition.BaseDecodeType[])">
      <summary>
            Is contain any of types
            </summary>
      <param name="decodeTypes">Decode types</param>
      <returns>Value is a true if any types are included into</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.MultyDecodeType.GetSingleTypes">
      <summary>
            Represents a list of single types.
            </summary>
      <returns>List of single types</returns>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.MultyDecodeType.GetSingleTypesCount">
      <summary>
            Returns a number of single types.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.MultyDecodeType.Equals(Aspose.BarCode.BarCodeRecognition.MultyDecodeType)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Aspose.BarCode.BarCodeRecognition.MultyDecodeType" /> value.
            </summary>
      <param name="other">An <see cref="T:Aspose.BarCode.BarCodeRecognition.MultyDecodeType" /> value to compare to this instance.</param>
      <returns>
        <b>true</b> if obj has the same value as this instance; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.MultyDecodeType.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Aspose.BarCode.BarCodeRecognition.MultyDecodeType" /> value.
            </summary>
      <param name="obj">An System.Object value to compare to this instance.</param>
      <returns>
        <b>true</b> if obj has the same value as this instance; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.MultyDecodeType.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="T:Aspose.BarCode.BarCodeRecognition.SingleDecodeType">
      <summary>
            Single decode type. See decode type to get instance.
            </summary>
      <example>
            This sample shows how to get instance of single decode type.
            <code>
            [C#]
            SingleDecodeType singleType = DecodeType.QR 
             
            [VB.NET]
            Dim singleType As SingleDecodeType 
            singleType = DecodeType.QR
            </code></example>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.SingleDecodeType.TypeIndex">
      <summary>
            Gets an index of decode type
            </summary>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.SingleDecodeType.TypeName">
      <summary>
            Gets a name of decode type
            </summary>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.SingleDecodeType.ToString">
      <summary>
            Returns the name of the given SingleDecodeType as a string.
            </summary>
      <returns>A string representing the name of the single decode type</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.SingleDecodeType.GetString">
      <summary>
            Converts the instance of SingleDecodeType to its equivalent string representation.
            The string format is: "Index:-1; Name:None".
            </summary>
      <returns>A string representing the complete value of the single decode type</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.SingleDecodeType.GetString(Aspose.BarCode.BarCodeRecognition.SingleDecodeType)">
      <summary>
            Converts the instance of SingleDecodeType to its equivalent string representation.
            The string format is: "Index:-1; Name:None".
            </summary>
      <param name="instance">The SingleDecodeType instance to convert</param>
      <returns>A string representing the complete value of the given single decode type</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.SingleDecodeType.ContainsAny(Aspose.BarCode.BarCodeRecognition.BaseDecodeType[])">
      <summary>
            Returns a value indicating whether this instance is included into the list specified.
            </summary>
      <param name="types">Array of single and multy decode types</param>
      <returns>Value is a true if any types are included into</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.SingleDecodeType.Equals(Aspose.BarCode.BarCodeRecognition.SingleDecodeType)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Aspose.BarCode.BarCodeRecognition.SingleDecodeType" /> value.
            </summary>
      <param name="other">An <see cref="T:Aspose.BarCode.BarCodeRecognition.SingleDecodeType" /> value to compare to this instance.</param>
      <returns>
        <b>true</b> if obj has the same value as this instance; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.SingleDecodeType.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Aspose.BarCode.BarCodeRecognition.SingleDecodeType" /> value.
            </summary>
      <param name="obj">An System.Object value to compare to this instance.</param>
      <returns>
        <b>true</b> if obj has the same value as this instance; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.SingleDecodeType.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.SingleDecodeType.Parse(System.String)">
      <summary>
            Converts the string representation of the name of a SingleDecodeType to its instance.
            </summary>
      <param name="stringDecodeType">A string containing the name of a SingleDecodeType to convert.</param>
      <returns>the instance of <seealso cref="T:Aspose.BarCode.BarCodeRecognition.SingleDecodeType" />, if conversion was successful; otherwise, it returns <b><seealso cref="F:Aspose.BarCode.BarCodeRecognition.DecodeType.None" /></b>.</returns>
    </member>
    <member name="T:Aspose.BarCode.BarCodeRecognition.QualitySettings">
      <summary>
            QualitySettings allows to configure recognition quality and speed manually.
            You can quickly set up QualitySettings by embedded presets: HighPerformance, NormalQuality, 
            HighQuality, MaxBarCodes or you can manually configure separate options.
            Default value of QualitySettings is NormalQuality.
            </summary>
      <example>
            This sample shows how to use QualitySettings with BarCodeReader
            <code>
            [C#]
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.Code39Standard, DecodeType.Code128))
            {
               //set high performance mode
               reader.QualitySettings = QualitySettings.HighPerformance;
               foreach (BarCodeResult result in reader.ReadBarCodes())
                  Console.WriteLine("BarCode CodeText: " + result.CodeText);
            }
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.Code39Standard, DecodeType.Code128))
            {
               //normal quality mode is set by default
               foreach (BarCodeResult result in reader.ReadBarCodes())
                  Console.WriteLine("BarCode CodeText: " + result.CodeText);
            }
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.Code39Standard, DecodeType.Code128))
            {
               //set high quality mode with low speed recognition 
               reader.QualitySettings = QualitySettings.HighQuality;
               foreach (BarCodeResult result in reader.ReadBarCodes())
                  Console.WriteLine("BarCode CodeText: " + result.CodeText);
            }
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.Code39Standard, DecodeType.Code128))
            {
               //set max barcodes mode, which tries to find all possible barcodes, even incorrect. The slowest recognition mode
               reader.QualitySettings = QualitySettings.MaxBarCodes;
               foreach (BarCodeResult result in reader.ReadBarCodes())
                  Console.WriteLine("BarCode CodeText: " + result.CodeText);
            }
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.Code39Standard, DecodeType.Code128))
            {
               //set high performance mode
               reader.QualitySettings = QualitySettings.HighPerformance;
               //set separate options
               reader.QualitySettings.AllowMedianSmoothing = true;
               reader.QualitySettings.MedianSmoothingWindowSize = 5;
               foreach (BarCodeResult result in reader.ReadBarCodes())
                  Console.WriteLine("BarCode CodeText: " + result.CodeText);
            }
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png", DecodeType.Code39Standard, DecodeType.Code128))
            {
               //default mode is NormalQuality
               //set separate options
               reader.QualitySettings.AllowMedianSmoothing = true;
               reader.QualitySettings.MedianSmoothingWindowSize = 5;
               foreach (BarCodeResult result in reader.ReadBarCodes())
                  Console.WriteLine("BarCode CodeText: " + result.CodeText);
            }
            [VB.NET]
            Using reader As New BarCodeReader("c:\test.png", DecodeType.Code39Standard, DecodeType.Code128)
                'set high performance mode
                reader.QualitySettings = QualitySettings.HighPerformance
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                Next
            End Using
            Using reader As New BarCodeReader("c:\test.png", DecodeType.Code39Standard, DecodeType.Code128)
                'normal quality mode is set by default
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                Next
            End Using
            Using reader As New BarCodeReader("c:\test.png", DecodeType.Code39Standard, DecodeType.Code128)
                'set high quality mode with low speed recognition
                reader.QualitySettings = QualitySettings.HighQuality
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                Next
            End Using
            Using reader As New BarCodeReader("c:\test.png", DecodeType.Code39Standard, DecodeType.Code128)
                'set max barcodes mode, which tries to find all possible barcodes, even incorrect. The slowest recognition mode
                reader.QualitySettings = QualitySettings.MaxBarCodes
                For Each result As BarCodeResult In reader.ReadBarCodes()
                    Console.WriteLine("BarCode Type: " + result.CodeTypeName)
                Next
            End Using
            Using reader As New BarCodeReader("c:\test.png", DecodeType.Code39Standard, DecodeType.Code128)
               'set high performance mode
               reader.QualitySettings = QualitySettings.HighPerformance
               'set separate options
               reader.QualitySettings.AllowMedianSmoothing = True
               reader.QualitySettings.MedianSmoothingWindowSize = 5
               For Each result As BarCodeResult In reader.ReadBarCodes()
                   Console.WriteLine("BarCode Type: " + result.CodeTypeName)
               Next
            End Using
            Using reader As New BarCodeReader("c:\test.png", DecodeType.Code39Standard, DecodeType.Code128)
               'default mode is NormalQuality
               'set separate options
               reader.QualitySettings.AllowMedianSmoothing = True
               reader.QualitySettings.MedianSmoothingWindowSize = 5
               For Each result As BarCodeResult In reader.ReadBarCodes()
                   Console.WriteLine("BarCode Type: " + result.CodeTypeName)
               Next
            End Using
            </code></example>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.HighPerformance">
      <summary>
            HighPerformance recognition quality preset. High quality barcodes are recognized well in this mode.
            <para><code>
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png"))
                reader.QualitySettings = QualitySettings.HighPerformance;
            </code></para></summary>
      <value>
            HighPerformance recognition quality preset.
            </value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.NormalQuality">
      <summary>
            NormalQuality recognition quality preset. Suitable for the most of barcodes
            <para><code>
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png"))
                reader.QualitySettings = QualitySettings.NormalQuality;
            </code></para></summary>
      <value>
            NormalQuality recognition quality preset.
            </value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.HighQualityDetection">
      <summary>
            HighQualityDetection recognition quality preset. Same as NormalQuality but with high quality <see cref="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.DetectorSettings" /><para><code>
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png"))
                reader.QualitySettings = QualitySettings.HighQualityDetection;
            </code></para></summary>
      <value>
            HighQualityDetection recognition quality preset.
            </value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.MaxQualityDetection">
      <summary>
            MaxQualityDetection recognition quality preset. Same as NormalQuality but with highest quality <see cref="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.DetectorSettings" />.
            Allows to detect diagonal and damaged barcodes.
            <para><code>
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png"))
                reader.QualitySettings = QualitySettings.MaxQualityDetection;
            </code></para></summary>
      <value>
            MaxQualityDetection recognition quality preset.
            </value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.HighQuality">
      <summary>
            HighQuality recognition quality preset. This preset is developed for low quality barcodes.
            Allows to detect diagonal and highly damaged barcodes.
            <para><code>
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png"))
                reader.QualitySettings = QualitySettings.HighQuality;
            </code></para></summary>
      <value>
            HighQuality recognition quality preset.
            </value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.MaxBarCodes">
      <summary>
            MaxBarCodes recognition quality preset. This preset is developed to recognize all possible barcodes, even incorrect barcodes.
            <para><code>
            using (BarCodeReader reader = new BarCodeReader(@"c:\test.png"))
                reader.QualitySettings = QualitySettings.MaxBarCodes;
            </code></para></summary>
      <value>
            MaxBarCodes recognition quality preset.
            </value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.AllowInvertImage">
      <summary>
            Allows engine to recognize inverse color image as additional scan. Mode can be used when barcode is white on black background.
            </summary>
      <value>
            Allows engine to recognize inverse color image.
            </value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.AllowIncorrectBarcodes">
      <summary>
            Allows engine to recognize barcodes which has incorrect checksumm or incorrect values. 
            Mode can be used to recognize damaged barcodes with incorrect text.
            </summary>
      <value>
            Allows engine to recognize incorrect barcodes.
            </value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.ReadTinyBarcodes">
      <summary>
            Allows engine to recognize tiny barcodes on large images. Ignored if <see cref="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.AllowIncorrectBarcodes" /> is set to True. Default value: False.
            </summary>
      <value>
            If True, allows engine to recognize tiny barcodes on large images.
            </value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.CheckMore1DVariants">
      <summary>
            Allows engine to recognize 1D barcodes with checksum by checking more recognition variants. Default value: False.
            </summary>
      <value>
            If True, allows engine to recognize 1D barcodes with checksum.
            </value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.AllowComplexBackground">
      <summary>
            Allows engine to recognize color barcodes on color background as additional scan. Extremely slow mode.
            </summary>
      <value>
            Allows engine to recognize color barcodes on color background.
            </value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.AllowMedianSmoothing">
      <summary>
            Allows engine to enable median smoothing as additional scan. Mode helps to recognize noised barcodes. 
            </summary>
      <value>
            Allows engine to enable median smoothing.
            </value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.MedianSmoothingWindowSize">
      <summary>
            Window size for median smoothing. Typical values are 3 or 4. Default value is 3. AllowMedianSmoothing must be set.
            </summary>
      <value>
            Window size for median smoothing.
            </value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.AllowRegularImage">
      <summary>
            Allows engine to recognize regular image without any restorations as main scan. Mode to recognize image as is.
            </summary>
      <value>
            Allows to recognize regular image without any restorations.
            </value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.AllowDecreasedImage">
      <summary>
            Allows engine to recognize decreased image as additional scan. Size for decreasing is selected by internal engine algorithms.
            Mode helps to recognize barcodes which are noised and blurred but captured with high resolution.
            </summary>
      <value>
            Allows engine to recognize decreased image
            </value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.AllowWhiteSpotsRemoving">
      <summary>
            Allows engine to recognize image without small white spots as additional scan. Mode helps to recognize noised image as well as median smoothing filtering.
            </summary>
      <value>
            Allows engine to recognize image without small white spots.
            </value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.AllowOneDAdditionalScan">
      <summary>
            Allows engine for 1D barcodes to recognize regular image with different params as additional scan. Mode helps to recongize low height 1D barcodes.
            </summary>
      <value>
            Allows engine for 1D barcodes to run additional scan.
            </value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.UseOldBarcodeDetector">
      <summary>
            Switches to the old barcode detector.
            </summary>
      <value>
            Switches to the old barcode detector.
            </value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.AllowOneDFastBarcodesDetector">
      <summary>
            Allows engine for 1D barcodes to quickly recognize high quality barcodes which fill almost whole image. 
            Mode helps to quickly recognize generated barcodes from Internet.
            </summary>
      <value>
            Allows engine for 1D barcodes to quickly recognize high quality barcodes.
            </value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.FastScanOnly">
      <summary>
            Allows engine for 1D barcodes to quickly recognize middle slice of an image and return result without using any time-consuming algorithms.
            </summary>
      <value>
            Allows engine for 1D barcodes to quickly recognize high quality barcodes.
            </value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.AllowMicroWhiteSpotsRemoving">
      <summary>
            Allows engine for Postal barcodes to recognize slightly noised images. Mode helps to recognize sligtly damaged Postal barcodes.
            </summary>
      <value>
            Allows engine for Postal barcodes to recognize slightly noised images.
            </value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.AllowSaltAndPaperFiltering">
      <summary>
            Allows engine to recognize barcodes with salt and paper noise type. Mode can remove small noise with white and black dots.
            </summary>
      <value>
            Allows engine to recognize barcodes with salt and paper noise type.
            </value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.AllowDetectScanGap">
      <summary>
            Allows engine to use gap between scans to increase recognition speed. Mode can make recognition problems with low height barcodes.
            </summary>
      <value>
            Allows engine to use gap between scans to increase recognition speed.
            </value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.AllowDatamatrixIndustrialBarcodes">
      <summary>
            Allows engine for Datamatrix to recognize dashed industrial Datamatrix barcodes. 
            Slow mode which helps only for dashed barcodes which consist from spots.
            </summary>
      <value>
            Allows engine for Datamatrix to recognize dashed industrial barcodes.
            </value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.AllowQRMicroQrRestoration">
      <summary>
            Allows engine for QR/MicroQR to recognize damaged MicroQR barcodes.
            </summary>
      <value>
            Allows engine for QR/MicroQR to recognize damaged MicroQR barcodes.
            </value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.AllowOneDWipedBarsRestoration">
      <summary>
            Allows engine for 1D barcodes to recognize barcodes with single wiped/glued bars in pattern.
            </summary>
      <value>
            Allows engine for 1D barcodes to recognize barcodes with single wiped/glued bars in pattern.
            </value>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.QualitySettings.DetectorSettings">
      <summary>
            Barcode detector settings.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.BarCodeRecognition.RecognitionAbortedException">
      <summary>
             Represents recognition abort exception which is thrown in timeout exceeding during recognition with BarCodeReader.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.RecognitionAbortedException.ExecutionTime">
      <summary>Gets the execution time of current recognition session</summary>
      <value>The execution time of current recognition session</value>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.RecognitionAbortedException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.BarCode.BarCodeRecognition.RecognitionAbortedException" /> class with specified recognition abort message.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.RecognitionAbortedException.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.BarCode.BarCodeRecognition.RecognitionAbortedException" /> class with specified recognition abort message.
            </summary>
      <param name="executionTime">The execution time of current recognition session.</param>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.RecognitionAbortedException.#ctor(System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.BarCode.BarCodeRecognition.RecognitionAbortedException" /> class with specified recognition abort message.
            </summary>
      <param name="message">The error message of the exception.</param>
      <param name="executionTime">The execution time of current recognition session.</param>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.RecognitionAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.BarCode.BarCodeRecognition.RecognitionAbortedException" /> class with specified recognition abort message.
            </summary>
      <param name="info">Holds the serialized object data about the exception being thrown.</param>
      <param name="context">Contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Aspose.BarCode.BarCodeRecognition.RecognitionAbortedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            When overridden in a derived class, sets the SerializationInfo with information about the exception.
            </summary>
      <param name="info">Holds the serialized object data about the exception being thrown.</param>
      <param name="context">Contains contextual information about the source or destination.</param>
    </member>
    <member name="T:Aspose.BarCode.BarCodeRecognition.BarcodeSvmDetectorSettings">
      <summary>
            Barcode detector settings.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarcodeSvmDetectorSettings.ScanWindowSizes">
      <summary>
            Scan window sizes in pixels.
            <para>
            Allowed sizes are 10, 15, 20, 25, 30.
            Scanning with small window size takes more time and provides more accuracy but may fail in detecting very big barcodes.
            Combining of several window sizes can improve detection quality.
            </para></summary>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarcodeSvmDetectorSettings.SimilarityCoef">
      <summary>
            Similarity coefficient depends on how homogeneous barcodes are.
            <para>
            Use high value for for clear barcodes.
            Use low values to detect barcodes that ara partly damaged or not lighten evenly.
            Similarity coefficient must be between [0.5, 0.9]
            </para></summary>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarcodeSvmDetectorSettings.RegionLikelihoodThresholdPercent">
      <summary>
            Sets threshold for detected regions that may contain barcodes.
            <para>
            Value 0.7 means that bottom 70% of possible regions are filtered out and not processed further.
            Region likelihood threshold must be between [0.05, 0.9]
            Use high values for clear images with few barcodes.
            Use low values for images with many barcodes or for noisy images.
            Low value may lead to a bigger recognition time.
            </para></summary>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarcodeSvmDetectorSettings.SkipDiagonalSearch">
      <summary>
            Allows detector to skip search for diagonal barcodes.
            <para>
            Setting it to false will increase detection time but allow to find diagonal barcodes that can be missed otherwise.
            Enabling of diagonal search leads to a bigger detection time.
            </para></summary>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarcodeSvmDetectorSettings.HighPerformance">
      <summary>
            High performance detection preset.
            <para>
            Default for <see cref="F:Aspose.BarCode.BarCodeRecognition.QualitySettings.PresetType.HighPerformance" /></para></summary>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarcodeSvmDetectorSettings.NormalQuality">
      <summary>
            Normal quality detection preset.
            <para>
            Default for <see cref="F:Aspose.BarCode.BarCodeRecognition.QualitySettings.PresetType.NormalQuality" /></para></summary>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarcodeSvmDetectorSettings.HighQuality">
      <summary>
            High quality detection preset.
            <para>
            Default for <see cref="F:Aspose.BarCode.BarCodeRecognition.QualitySettings.PresetType.HighQualityDetection" /> and <see cref="F:Aspose.BarCode.BarCodeRecognition.QualitySettings.PresetType.HighQuality" /></para></summary>
    </member>
    <member name="P:Aspose.BarCode.BarCodeRecognition.BarcodeSvmDetectorSettings.MaxQuality">
      <summary>
            Max quality detection preset.
            <para>
            Default for <see cref="F:Aspose.BarCode.BarCodeRecognition.QualitySettings.PresetType.MaxQualityDetection" /> and <see cref="F:Aspose.BarCode.BarCodeRecognition.QualitySettings.PresetType.MaxBarCodes" /></para></summary>
    </member>
    <member name="T:Aspose.BarCode.Recognition.NamespaceDoc">
      <summary>
            The <b>Aspose.BarCode.BarCodeRecognition</b> contains tools for the 1D/2D barcodes recognition.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.ComplexBarcode.ComplexBarcodeGenerator">
      <summary>
            ComplexBarcodeGenerator for backend complex barcode (e.g. SwissQR) images generation.
            </summary>
      <example>
            This sample shows how to create and save a SwissQR image.
            <code>
            [C#]
              var swissQRCodetext = new SwissQRCodetext();
              swissQRCodetext.Bill.Account = "Account";
              swissQRCodetext.Bill.BillInformation = "BillInformation";
              // init rest of the fields
              using (var cg = new ComplexBarcodeGenerator(swissQRCodetext))
              {
                var res = cg.GenerateBarCodeImage();
              }
            </code></example>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.ComplexBarcodeGenerator.Parameters">
      <summary>
            Generation parameters.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.ComplexBarcodeGenerator.#ctor(Aspose.BarCode.ComplexBarcode.IComplexCodetext)">
      <summary>
            Creates an instance of ComplexBarcodeGenerator.
            </summary>
      <param name="complexCodetext">Complex codetext</param>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.ComplexBarcodeGenerator.GenerateBarCodeImage">
      <summary>
            Generates complex barcode image under current settings.
            </summary>
      <returns> Barcode image. See <see cref="T:System.Drawing.Bitmap" />.</returns>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.ComplexBarcodeGenerator.Save(System.IO.Stream,Aspose.BarCode.Generation.BarCodeImageFormat)">
      <summary>
            Generates and saves complex barcode image under current settings.
            </summary>
      <param name="stream">Output System.IO.Stream.</param>
      <param name="format">Specifies the file format of the output image.</param>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.ComplexBarcodeGenerator.Save(System.String,Aspose.BarCode.Generation.BarCodeImageFormat)">
      <summary>
            Generates and saves complex barcode image under current settings.
            </summary>
      <param name="filename">Path to save to.</param>
      <param name="format">Specifies the file format of the output image.</param>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.ComplexBarcodeGenerator.Save(System.String)">
      <summary>
            Generates and saves complex barcode image under current settings.
            </summary>
      <param name="filename">Path to save to.</param>
    </member>
    <member name="T:Aspose.BarCode.ComplexBarcode.ComplexCodetextReader">
      <summary>
            ComplexCodetextReader decodes codetext to specified complex barcode type.
            </summary>
      <example>
            This sample shows how to recognize and decode SwissQR image.
            <code>
            [C#]
              using (var cr = new BarCodeReader("SwissQRCodetext.png", DecodeType.QR))
              {
                cr.Read();
                SwissQRCodetext result = ComplexCodetextReader.TryDecodeSwissQR(cr.GetCodeText());
              }
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.ComplexCodetextReader.TryDecodeSwissQR(System.String)">
      <summary>
            Decodes SwissQR codetext.
            </summary>
      <param name="encodedCodetext">encoded codetext</param>
      <returns>decoded SwissQRCodetext or null.</returns>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.ComplexCodetextReader.TryDecodeMailmark2D(System.String)">
      <summary>
            Decodes Royal Mail Mailmark 2D codetext.
            </summary>
      <param name="encodedCodetext">encoded codetext</param>
      <returns>decoded Royal Mail Mailmark 2D or null.</returns>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.ComplexCodetextReader.TryDecodeMailmark(System.String)">
      <summary>
            Decodes Mailmark Barcode C and L codetext.
            </summary>
      <param name="encodedCodetext">encoded codetext</param>
      <returns>Dcoded Mailmark Barcode C and L or null.</returns>
    </member>
    <member name="T:Aspose.BarCode.ComplexBarcode.IComplexCodetext">
      <summary>
            Interface for complex codetext used with ComplexBarcodeGenerator.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.IComplexCodetext.GetConstructedCodetext">
      <summary>
            Construct codetext for complex barcode
            </summary>
      <returns>Constructed codetext</returns>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.IComplexCodetext.InitFromString(System.String)">
      <summary>
            Initializes instance with constructed codetext.
            </summary>
      <param name="constructedCodetext">Constructed codetext.</param>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.IComplexCodetext.GetBarcodeType">
      <summary>
            Gets barcode type.
            </summary>
      <returns>Barcode type.</returns>
    </member>
    <member name="T:Aspose.BarCode.ComplexBarcode.Mailmark2DType">
      <summary>
            2D Mailmark Type defines size of Data Matrix barcode
            </summary>
    </member>
    <member name="F:Aspose.BarCode.ComplexBarcode.Mailmark2DType.Auto">
      <summary>
            Auto determine
            </summary>
    </member>
    <member name="F:Aspose.BarCode.ComplexBarcode.Mailmark2DType.Type_7">
      <summary>
            24 x 24 modules
            </summary>
    </member>
    <member name="F:Aspose.BarCode.ComplexBarcode.Mailmark2DType.Type_9">
      <summary>
            32 x 32 modules
            </summary>
    </member>
    <member name="F:Aspose.BarCode.ComplexBarcode.Mailmark2DType.Type_29">
      <summary>
            16 x 48 modules
            </summary>
    </member>
    <member name="T:Aspose.BarCode.ComplexBarcode.Mailmark2DCodetext">
      <summary>
            Class for encoding and decoding the text embedded in the Royal Mail 2D Mailmark code.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.Mailmark2DCodetext.UPUCountryID">
      <summary>
            Identifies the UPU Country ID.Max length: 4 characters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.Mailmark2DCodetext.InformationTypeID">
      <summary>
            Identifies the Royal Mail Mailmark barcode payload for each product type.
            </summary>
      <remarks>
        <para>Valid Values:</para>
        <para>“0” - Domestic Sorted &amp; Unsorted</para>
        <para>“A” - Online Postage</para>
        <para>“B” - Franking</para>
        <para>“C” - Consolidation</para>
      </remarks>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.Mailmark2DCodetext.VersionID">
      <summary>
            Identifies the  barcode version as relevant to each Information Type ID.
            </summary>
      <remarks>
        <para>Valid Values:</para>
        <para>Currently “1”.</para>
        <para>“0” &amp; “2” to “9” and “A” to “Z” spare reserved for potential future use.</para>
      </remarks>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.Mailmark2DCodetext.Class">
      <summary>
            Identifies the class of the item.
            </summary>
      <remarks>
        <para>Valid Values:</para>
        <para>“1” - 1C (Retail)</para>
        <para>“2” - 2C (Retail)</para>
        <para>“3” - Economy (Retail)</para>
        <para>“5” - Deffered (Retail)</para>
        <para>“8” - Premium (Network Access)</para>
        <para>“9” - Standard (Network Access)</para>
      </remarks>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.Mailmark2DCodetext.SupplyChainID">
      <summary>
            Identifies the unique group of customers involved in the mailing.
            Max value: 9999999.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.Mailmark2DCodetext.ItemID">
      <summary>
            Identifies the unique item within the Supply Chain ID.
            Every Mailmark barcode is required to carry an ID
            so it can be uniquely identified for at least 90 days.
            Max value: 99999999.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.Mailmark2DCodetext.DestinationPostCodeAndDPS">
      <summary>
            Contains the Postcode of the Delivery Address with DPS
            If inland the Postcode/DP contains the following number of characters.
            Area (1 or 2 characters) District(1 or 2 characters)
            Sector(1 character) Unit(2 characters) DPS (2 characters).
            The Postcode and DPS must comply with a valid PAF® format.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.Mailmark2DCodetext.RTSFlag">
      <summary>
            Flag which indicates what level of Return to Sender service is being requested.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.Mailmark2DCodetext.ReturnToSenderPostCode">
      <summary>
            Contains the Return to Sender Post Code but no DPS.
            The PC(without DPS) must comply with a PAF® format.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.Mailmark2DCodetext.CustomerContent">
      <summary>
            Optional space for use by customer.
            </summary>
      <remarks>
        <para>Max length by Type:</para>
        <para>Type 7: 6 characters</para>
        <para>Type 9: 45 characters</para>
        <para>Type 29: 25 characters</para>
      </remarks>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.Mailmark2DCodetext.CustomerContentEncodeMode">
      <summary>
            Encode mode of Datamatrix barcode.
            Default value: DataMatrixEncodeMode.C40.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.Mailmark2DCodetext.DataMatrixType">
      <summary>
            2D Mailmark Type defines size of Data Matrix barcode.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.Mailmark2DCodetext.GetConstructedCodetext">
      <summary>
            Construct codetext from Mailmark data.
            </summary>
      <returns>Constructed codetext</returns>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.Mailmark2DCodetext.InitFromString(System.String)">
      <summary>
            Initializes Mailmark data from constructed codetext.
            </summary>
      <param name="constructedCodetext">Constructed codetext.</param>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.Mailmark2DCodetext.GetBarcodeType">
      <summary>
            Gets barcode type.
            </summary>
      <returns>Barcode type.</returns>
    </member>
    <member name="T:Aspose.BarCode.ComplexBarcode.MailmarkCodetext">
      <summary>
            Class for encoding and decoding the text embedded in the 4-state Royal Mailmark code.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.MailmarkCodetext.Format">
      <summary>
            "0" – Null or Test
            "1" – Letter
            "2" – Large Letter
            </summary>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.MailmarkCodetext.VersionID">
      <summary>
            Currently "1" – For Mailmark barcode (0 and 2 to 9 and A to Z spare for future use)
            </summary>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.MailmarkCodetext.Class">
      <summary>
            "0" - Null or Test
            "1" - 1C (Retail)
            "2" - 2C (Retail)
            "3" - 3C (Retail)
            "4" - Premium (RetailPublishing Mail) (for potential future use)
            "5" - Deferred (Retail)
            "6" - Air (Retail) (for potential future use)
            "7" - Surface (Retail) (for potential future use)
            "8" - Premium (Network Access)
            "9" - Standard (Network Access)
            </summary>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.MailmarkCodetext.SupplychainID">
      <summary>
            Maximum values are 99 for Barcode C and 999999 for Barcode L.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.MailmarkCodetext.ItemID">
      <summary>
            Maximum value is 99999999.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.MailmarkCodetext.DestinationPostCodePlusDPS">
      <summary>
            The PC and DP must comply with a PAF format.
            Nine character string denoting international "XY11     " (note the 5 trailing spaces) or a pattern
            of characters denoting a domestic sorting code.
            A domestic sorting code consists of an outward postcode, an inward postcode, and a Delivery Point Suffix.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.MailmarkCodetext.GetConstructedCodetext">
      <summary>
            Construct codetext from Mailmark data.
            </summary>
      <returns>Constructed codetext</returns>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.MailmarkCodetext.InitFromString(System.String)">
      <summary>
            Initializes Mailmark data from constructed codetext.
            </summary>
      <param name="constructedCodetext">Constructed codetext.</param>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.MailmarkCodetext.GetBarcodeType">
      <summary>
            Gets barcode type.
            </summary>
      <returns>Barcode type.</returns>
    </member>
    <member name="T:Aspose.BarCode.ComplexBarcode.SwissQRCodetext">
      <summary>
            Class for encoding and decoding the text embedded in the SwissQR code.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.SwissQRCodetext.Bill">
      <summary>
            SwissQR bill data
            </summary>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.SwissQRCodetext.#ctor(Aspose.BarCode.ComplexBarcode.SwissQRBill)">
      <summary>
            Creates an instance of SwissQRCodetext.
            </summary>
      <param name="bill">SwissQR bill data</param>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.SwissQRCodetext.#ctor">
      <summary>
            Creates an instance of SwissQRCodetext.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.SwissQRCodetext.GetConstructedCodetext">
      <summary>
            Construct codetext from SwissQR bill data
            </summary>
      <returns>Constructed codetext</returns>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.SwissQRCodetext.InitFromString(System.String)">
      <summary>
            Initializes Bill with constructed codetext.
            </summary>
      <param name="constructedCodetext">Constructed codetext.</param>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.SwissQRCodetext.GetBarcodeType">
      <summary>
            Gets barcode type.
            </summary>
      <returns>Barcode type.</returns>
    </member>
    <member name="T:Aspose.BarCode.ComplexBarcode.SwissQRBill">
      <summary>
            SwissQR bill data
            </summary>
    </member>
    <member name="T:Aspose.BarCode.ComplexBarcode.SwissQRBill.QrBillStandardVersion">
      <summary>
            SwissQR bill standard version
            </summary>
    </member>
    <member name="F:Aspose.BarCode.ComplexBarcode.SwissQRBill.QrBillStandardVersion.V2_0">
      <summary>
            Version 2.0
            </summary>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.SwissQRBill.Version">
      <summary>
            Gets or sets the version of the SwissQR bill standard.
            </summary>
      <value>The SwissQR bill standard version.</value>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.SwissQRBill.Amount">
      <summary>
            Gets or sets the payment amount.
            <para>
            Valid values are between 0.01 and 999,999,999.99.
            </para></summary>
      <value>The payment amount.</value>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.SwissQRBill.Currency">
      <summary>
            Gets or sets the payment currency.
            <para>
            Valid values are "CHF" and "EUR".
            </para></summary>
      <value>The payment currency.</value>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.SwissQRBill.Account">
      <summary>
            Gets or sets the creditor's account number.
            <para>
            Account numbers must be valid IBANs of a bank of Switzerland or
            Liechtenstein. Spaces are allowed in the account number.
            </para></summary>
      <value>The creditor account number.</value>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.SwissQRBill.Creditor">
      <summary>
            Gets or sets the creditor address.
            </summary>
      <value>The creditor address.</value>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.SwissQRBill.Reference">
      <summary>
            Gets or sets the creditor payment reference.
            <para>
            The reference is mandatory for SwissQR IBANs, i.e.IBANs in the range
            CHxx30000xxxxxx through CHxx31999xxxxx.
            </para><para>
            If specified, the reference must be either a valid SwissQR reference
            (corresponding to ISR reference form) or a valid creditor reference
            according to ISO 11649 ("RFxxxx"). Both may contain spaces for formatting.
            </para></summary>
      <value>The creditor payment reference.</value>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.SwissQRBill.CreateAndSetCreditorReference(System.String)">
      <summary>
            Creates and sets a ISO11649 creditor reference from a raw string by prefixing
            the String with "RF" and the modulo 97 checksum.
            <para>
            Whitespace is removed from the reference
            </para></summary>
      <param name="rawReference">The raw reference.</param>
      <exception cref="T:System.ArgumentException">
        <c>rawReference</c> contains invalid characters.</exception>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.SwissQRBill.Debtor">
      <summary>
            Gets or sets the debtor address.
            <para>
            The debtor is optional. If it is omitted, both setting this field to
            <c>null</c> or setting an address with all <c>null</c> or empty values is ok.
            </para></summary>
      <value>The debtor address.</value>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.SwissQRBill.UnstructuredMessage">
      <summary>
            Gets or sets the additional unstructured message.
            </summary>
      <value>The unstructured message.</value>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.SwissQRBill.BillInformation">
      <summary>
            Gets or sets the additional structured bill information.
            </summary>
      <value>The structured bill information.</value>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.SwissQRBill.AlternativeSchemes">
      <summary>
            Gets ors sets the alternative payment schemes.
            <para>
            A maximum of two schemes with parameters are allowed.
            </para></summary>
      <value>The alternative payment schemes.</value>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.SwissQRBill.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.SwissQRBill.Equals(Aspose.BarCode.ComplexBarcode.SwissQRBill)">
      <summary>Determines whether the specified bill is equal to the current bill.</summary>
      <param name="other">The bill to compare with the current bill.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.SwissQRBill.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="T:Aspose.BarCode.ComplexBarcode.AlternativeScheme">
      <summary>
            Alternative payment scheme instructions
            </summary>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.AlternativeScheme.Instruction">
      <summary>
            Gets the payment instruction for a given bill.
            <para>
            The instruction consists of a two letter abbreviation for the scheme, a separator characters
            and a sequence of parameters(separated by the character at index 2).
            </para></summary>
      <value>The payment instruction.</value>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.AlternativeScheme.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.AlternativeScheme.Equals(Aspose.BarCode.ComplexBarcode.AlternativeScheme)">
      <summary>Determines whether the specified alernative scheme is equal to the current alternative scheme.</summary>
      <param name="other">The alternative scheme to compare with the current alternative scheme.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.AlternativeScheme.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="T:Aspose.BarCode.ComplexBarcode.AddressType">
      <summary>
            Address type
            </summary>
    </member>
    <member name="F:Aspose.BarCode.ComplexBarcode.AddressType.Undetermined">
      <summary>
            Undetermined
            </summary>
    </member>
    <member name="F:Aspose.BarCode.ComplexBarcode.AddressType.Structured">
      <summary>
            Structured address
            </summary>
    </member>
    <member name="F:Aspose.BarCode.ComplexBarcode.AddressType.CombinedElements">
      <summary>
            Combined address elements
            </summary>
    </member>
    <member name="F:Aspose.BarCode.ComplexBarcode.AddressType.Conflicting">
      <summary>
            Conflicting
            </summary>
    </member>
    <member name="T:Aspose.BarCode.ComplexBarcode.Address">
      <summary>
            Address of creditor or debtor.
            <para>
            You can either set street, house number, postal code and town (type <i>structured address</i>)
            or address line 1 and 2 (type <i>combined address elements</i>). The type is automatically set
            once any of these fields is set. Before setting the fields, the address type is <i>undetermined</i>.
            If fields of both types are set, the address type becomes <i>conflicting</i>.
            Name and country code must always be set unless all fields are empty.
            </para></summary>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.Address.Type">
      <summary>
            Gets the address type.
            <para>
            The address type is automatically set by either setting street / house number
            or address line 1 and 2. Before setting the fields, the address type is <i>Undetermined</i>.
            If fields of both types are set, the address type becomes <i>Conflicting</i>.
            </para></summary>
      <value>The address type.</value>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.Address.Name">
      <summary>
            Gets or sets the name, either the first and last name of a natural person or the
            company name of a legal person.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.Address.AddressLine1">
      <summary>
            Gets or sets the address line 1.
            <para>
            Address line 1 contains street name, house number or P.O. box.
            </para><para>
            Setting this field sets the address type to <see cref="F:Aspose.BarCode.ComplexBarcode.AddressType.CombinedElements" /> unless it's already
            <see cref="F:Aspose.BarCode.ComplexBarcode.AddressType.Structured" />, in which case it becomes <see cref="F:Aspose.BarCode.ComplexBarcode.AddressType.Conflicting" />.
            </para><para>
            This field is only used for combined elements addresses and is optional.
            </para></summary>
      <value>The address line 1.</value>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.Address.AddressLine2">
      <summary>
            Gets or sets the address line 2.
            <para>
            Address line 2 contains postal code and town.
            </para><para>
            Setting this field sets the address type to <see cref="F:Aspose.BarCode.ComplexBarcode.AddressType.CombinedElements" /> unless it's already
            <see cref="F:Aspose.BarCode.ComplexBarcode.AddressType.Structured" />, in which case it becomes <see cref="F:Aspose.BarCode.ComplexBarcode.AddressType.Conflicting" />.
            </para><para>
            This field is only used for combined elements addresses. For this type, it's mandatory.
            </para></summary>
      <value>The address line 2.</value>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.Address.Street">
      <summary>
            Gets or sets the street.
            <para>
            The street must be speicfied without house number.
            </para><para>
            Setting this field sets the address type to <see cref="F:Aspose.BarCode.ComplexBarcode.AddressType.Structured" /> unless it's already
            <see cref="F:Aspose.BarCode.ComplexBarcode.AddressType.CombinedElements" />, in which case it becomes <see cref="F:Aspose.BarCode.ComplexBarcode.AddressType.Conflicting" />.
            </para><para>
            This field is only used for structured addresses and is optional.
            </para></summary>
      <value>The street.</value>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.Address.HouseNo">
      <summary>
            Gets or sets the house number.
            <para>
            Setting this field sets the address type to <see cref="F:Aspose.BarCode.ComplexBarcode.AddressType.Structured" /> unless it's already
            <see cref="F:Aspose.BarCode.ComplexBarcode.AddressType.CombinedElements" />, in which case it becomes <see cref="F:Aspose.BarCode.ComplexBarcode.AddressType.Conflicting" />.
            </para><para>
            This field is only used for structured addresses and is optional.
            </para></summary>
      <value>The house number.</value>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.Address.PostalCode">
      <summary>
            Gets or sets the postal code.
            <para>
            Setting this field sets the address type to <see cref="F:Aspose.BarCode.ComplexBarcode.AddressType.Structured" /> unless it's already
            <see cref="F:Aspose.BarCode.ComplexBarcode.AddressType.CombinedElements" />, in which case it becomes <see cref="F:Aspose.BarCode.ComplexBarcode.AddressType.Conflicting" />.
            </para><para>
            This field is only used for structured addresses. For this type, it's mandatory.
            </para></summary>
      <value>The postal code.</value>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.Address.Town">
      <summary>
            Gets or sets the town or city.
            <para>
            Setting this field sets the address type to <see cref="F:Aspose.BarCode.ComplexBarcode.AddressType.Structured" /> unless it's already
            <see cref="F:Aspose.BarCode.ComplexBarcode.AddressType.CombinedElements" />, in which case it becomes <see cref="F:Aspose.BarCode.ComplexBarcode.AddressType.Conflicting" />.
            </para><para>
            This field is only used for structured addresses. For this type, it's mandatory.
            </para></summary>
      <value>The town or city.</value>
    </member>
    <member name="P:Aspose.BarCode.ComplexBarcode.Address.CountryCode">
      <summary>
            Gets or sets the two-letter ISO country code.
             <para>
            The country code is mandatory unless the entire address contains <c>null</c> or emtpy values.
            </para></summary>
      <value>The ISO country code.</value>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.Address.#ctor">
      <summary>
            Creates instance of Address
            </summary>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.Address.Clear">
      <summary>
            Clears all fields and sets the type to <see cref="F:Aspose.BarCode.ComplexBarcode.AddressType.Undetermined" />.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.Address.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.Address.Equals(Aspose.BarCode.ComplexBarcode.Address)">
      <summary>Determines whether the specified address is equal to the current address.</summary>
      <param name="other">The address to compare with the current address.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Aspose.BarCode.ComplexBarcode.Address.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="T:Aspose.BarCode.ComplexBarcode.NamespaceDoc">
      <summary>
            The <b>Aspose.BarCode.ComplexBarcode</b> containing general classes for the implementation of complex BarCode generation functions.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.License">
      <summary>
            Provides methods to license the component.
            </summary>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains 
            the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As license = New license
            License.SetLicense("MyLicense.lic")
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.License.SetLicense(System.String)">
      <summary>
            Licenses the component.
            </summary>
      <remarks>
        <p>Tries to find the license in the following locations:</p>
        <p>1. Explicit path.</p>
        <p>2. The folder that contains the Aspose component assembly.</p>
        <p>3. The folder that contains the client's calling assembly.</p>
        <p>4. The folder that contains the entry (startup) assembly.</p>
        <p>5. An embedded resource in the client's calling assembly.</p>
        <p>
          <b>Note:</b>On the .NET Compact Framework, tries to find the license only in these locations:</p>
        <p>1. Explicit path.</p>
        <p>2. An embedded resource in the client's calling assembly.</p>
      </remarks>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains 
            the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As License = New License
            license.SetLicense("MyLicense.lic")
            </code><param name="licenseName">Can be a full or short file name or name of an embedded resource.
            Use an empty string to switch to evaluation mode.</param></example>
    </member>
    <member name="M:Aspose.BarCode.License.SetLicense(System.IO.Stream)">
      <summary>
            Licenses the component.
            </summary>
      <param name="stream">A stream that contains the license.</param>
      <remarks>
        <p>Use this method to load a license from a stream.</p>
      </remarks>
      <example>
        <code>
            [C#]
            
            License license = new License();
            license.SetLicense(myStream);
            
            
            [Visual Basic]
            
            Dim license as License = new License
            license.SetLicense(myStream)
            </code>
      </example>
    </member>
    <member name="T:Aspose.BarCode.Metered">
      <summary>
            Provides methods to set metered key.
            </summary>
      <example>
            In this example, an attempt will be made to set metered public and private key
            <code>
            [C#]
            
            Metered matered = new Metered();
            matered.SetMeteredKey("PublicKey", "PrivateKey");
            
            
            [Visual Basic]
            
            Dim matered As Metered = New Metered
            matered.SetMeteredKey("PublicKey", "PrivateKey")
            </code></example>
    </member>
    <member name="M:Aspose.BarCode.Metered.SetMeteredKey(System.String,System.String)">
      <summary>
            Sets metered public and private key
            </summary>
      <param name="publicKey">public key</param>
      <param name="privateKey">private key</param>
    </member>
    <member name="M:Aspose.BarCode.Metered.GetConsumptionQuantity">
      <summary>
            Gets consumption file size
            </summary>
      <returns>consumption quantity</returns>
    </member>
    <member name="M:Aspose.BarCode.Metered.GetConsumptionCredit">
      <summary>
            Gets consumption credit
            </summary>
      <returns>consumption quantity</returns>
    </member>
    <member name="T:Aspose.BarCode.BuildVersionInfo">
      <summary>
            Contains the current build version information.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BuildVersionInfo.AssemblyVersion">
      <summary>
            The assembly version.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BuildVersionInfo.FileVersion">
      <summary>
            The file version.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BuildVersionInfo.Product">
      <summary>
            The product title.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BuildVersionInfo.ProductMajor">
      <summary>
            The major product version.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BuildVersionInfo.ProductMinor">
      <summary>
            The minor product version.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.BuildVersionInfo.ReleaseDate">
      <summary>
            The product release date.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Windows.Forms.BarCodeGeneratorControl">
      <summary>
            BarCode Windows Control, goto your toolbox panel and add Aspose.BarCode.dll, 
            and you will see BarcodeGeneratorControl appears.
            Just drag it and drop to your Windows form.
            see <seealso cref="T:Aspose.BarCode.Windows.Forms.BarCodeGeneratorControl" />
            see <seealso cref="T:Aspose.BarCode.Generation.BarcodeGenerator" /></summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.BarCodeGeneratorControl.CodeText">
      <summary>
            Data to be encoded, different types of BarCode may have different CodeText length restrictions.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.BarCodeGeneratorControl.EncodeType">
      <summary>
            BarCode's encode type (symbology).
            Use <see cref="T:Aspose.BarCode.Generation.EncodeTypes" /> to get current symbology.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.BarCodeGeneratorControl.BarcodeType">
      <summary>
            BarCode's encode type (symbology).
            Use <see cref="T:Aspose.BarCode.Generation.EncodeTypes" /> to get current symbology.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.BarCodeGeneratorControl.AutoSizeMode">
      <summary>
            Gets or sets the mode by which the barcode automatically resizes.
            Default value is AutoSizeMode.None.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.BarCodeGeneratorControl.CaptionAbove">
      <summary>
            Caption Above the BarCode image. See <see cref="T:Aspose.BarCode.Generation.CaptionParameters" />.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.BarCodeGeneratorControl.CaptionBelow">
      <summary>
            Caption Below the BarCode image. See <see cref="T:Aspose.BarCode.Generation.CaptionParameters" />.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.BarCodeGeneratorControl.XDimension">
      <summary>
            X-dimension is the smallest width of the unit of BarCode bars or spaces.
            Increase this will increase the whole barcode image width.
            Ignored if <see cref="T:Aspose.BarCode.Generation.AutoSizeMode" /> property is set to AutoSizeMode.Nearest or AutoSizeMode.Interpolation.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.BarCodeGeneratorControl.BarHeight">
      <summary>
            Height of 1D barcodes' bars.
            Ignored if <see cref="T:Aspose.BarCode.Generation.AutoSizeMode" /> property is set to AutoSizeMode.Nearest or AutoSizeMode.Interpolation.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.BarCodeGeneratorControl.BarCodeHeight">
      <summary>
            BarCode image height when <see cref="T:Aspose.BarCode.Generation.AutoSizeMode" /> property is set to AutoSizeMode.Nearest or AutoSizeMode.Interpolation.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.BarCodeGeneratorControl.BarCodeWidth">
      <summary>
            BarCode image width when <see cref="T:Aspose.BarCode.Generation.AutoSizeMode" /> property is set to AutoSizeMode.Nearest or AutoSizeMode.Interpolation.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.BarCodeGeneratorControl.BarColor">
      <summary>
            Bars color.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.BarCodeGeneratorControl.BarcodePaddings">
      <summary>
            Gets or sets Barcode paddings parameters <see cref="T:Aspose.BarCode.Generation.Padding" />.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.BarCodeGeneratorControl.ChecksumAlwaysShow">
      <summary>
            Always display checksum digit in the human readable text for Code128 and GS1Code128 barcodes.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.BarCodeGeneratorControl.IsChecksumEnabled">
      <summary>
        <para>Enable checksum during generation 1D barcodes.</para>
        <para>Default is treated as Yes for symbology which must contain checksum, as No where checksum only possible.</para>
        <para>Checksum is possible: Code39 Standard/Extended, Standard2of5, Interleaved2of5, Matrix2of5, ItalianPost25, DeutschePostIdentcode, DeutschePostLeitcode, VIN, Codabar</para>
        <para>Checksum always used: Rest symbology</para>
      </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.BarCodeGeneratorControl.EnableEscape">
      <summary>
            Indicates whether explains the character "\" as an escape character in CodeText property. Used for Pdf417, DataMatrix, Code128 only
            If the EnableEscape is true, "\" will be explained as a special escape character. Otherwise, "\" acts as normal characters.
            <remarks>Aspose.BarCode supports inputing decimal ascii code and mnemonic for ASCII control-code characters. For example, \013 and \\CR stands for CR.</remarks></summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.BarCodeGeneratorControl.ThrowExceptionWhenCodeTextIncorrect">
      <summary>
            Only for 1D barcodes.
            If codetext is incorrect and value set to true - exception will be thrown. Otherwise codetext will be corrected to match barcode's specification.
            Exception always will be thrown for: Databar symbology if codetext is incorrect.
            Exception always will not be thrown for: AustraliaPost, SingapurePost, Code39Extended, Code93Extended, Code16K, Code128 symbology if codetext is incorrect.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.BarCodeGeneratorControl.WideNarrowRatio">
      <summary>
            Wide bars to Narrow bars ratio.
            Default value: 3, that is, wide bars are 3 times as wide as narrow bars.
            Used for ITF, PZN, PharmaCode, Standard2of5, Interleaved2of5, Matrix2of5, ItalianPost25, IATA2of5, VIN, DeutschePost, OPC, Code32, DataLogic2of5, PatchCode, Code39Extended, Code39Standard
            </summary>
      <exception cref="T:Aspose.BarCode.BarCodeException">
        <p>The <b>WideNarrowRatio</b> parameter value is less than or equal to 0.</p>
      </exception>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.BarCodeGeneratorControl.CodeTextParameters">
      <summary>
            Gets or sets CodeText parameters <see cref="T:Aspose.BarCode.Generation.CodetextParameters" />.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.BarCodeGeneratorControl.FilledBars">
      <summary>
            Gets or sets a value indicating whether bars filled.
            Only for 1D barcodes.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.BarCodeGeneratorControl.Specific">
      <summary>
            Specific parameters
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.BarCodeGeneratorControl.BackgroundColor">
      <summary>
            Background color of the barcode image.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.BarCodeGeneratorControl.Resolution">
      <summary>
            Gets or sets the resolution of the BarCode image.
            One value for both dimensions.
            Default value: 96 dpi.
            </summary>
      <exception cref="T:Aspose.BarCode.BarCodeException">
        <p>The <b>Resolution</b> parameter value is less than or equal to 0.</p>
      </exception>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.BarCodeGeneratorControl.Border">
      <summary>
            Gets or sets Border parameters <see cref="T:Aspose.BarCode.Generation.BorderParameters" />.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.BarCodeGeneratorControl.RotationAngle">
      <summary>
            BarCode image rotation angle, measured in degree, e.g. RotationAngle = 0 or RotationAngle = 360 means no rotation.
            If RotationAngle NOT equal to 90, 180, 270 or 0, it may increase the difficulty for the scanner to read the image.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Windows.Forms.IBarCodeGeneratorControl">
      <summary>
            IBarCodeGeneratorControl for TypeConverters
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.IBarCodeGeneratorControl.EncodeType">
      <summary>
            BarCode's encode type (symbology).
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.IBarCodeGeneratorControl.RotationAngle">
      <summary>
            BarCode image rotation angle, measured in degree, e.g. RotationAngle = 0 or RotationAngle = 360 means no rotation.
            If RotationAngle NOT equal to 90, 180, 270 or 0, it may increase the difficulty for the scanner to read the image.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Windows.Forms.NamespaceDoc">
      <summary>
            The <b>Aspose.BarCode.Windows.Forms</b> contains WinForms controls for the 1D/2D barcodes generation and drawing.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.Windows.Forms.AztecParametersUI">
      <summary>
            UI wrapper for <see cref="T:Aspose.BarCode.Generation.AztecParameters" /> class.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.AztecParametersUI.AztecErrorLevel">
      <summary>
            Level of error correction of Aztec types of barcode.
            Value should between 10 to 95.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.AztecParametersUI.AztecSymbolMode">
      <summary>
            Gets or sets a Aztec Symbol mode.
            Default value: AztecSymbolMode.Auto.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.AztecParametersUI.AspectRatio">
      <summary>
            Height/Width ratio of 2D BarCode module.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.AztecParametersUI.CodeTextEncoding">
      <summary>
            Gets or sets the encoding of codetext.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Windows.Forms.AztecParametersUI.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.Generation.AztecParameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.Generation.AztecParameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.Windows.Forms.CaptionUI">
      <summary>
            UI wrapper for  <see cref="T:Aspose.BarCode.Generation.CaptionParameters" /> class.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.CaptionUI.Visible">
      <summary>
            Gets or sets a value indicates whether the <see cref="T:Aspose.BarCode.Generation.CaptionParameters">caption</see> is visible. 
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.CaptionUI.Color">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Color">forecolor</see> of the <see cref="T:Aspose.BarCode.Generation.CaptionParameters">caption</see>.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.CaptionUI.Font">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Font">font</see> of the <see cref="!:Caption">caption</see>.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.CaptionUI.Padding">
      <summary>
            Gets or sets caption paddings <see cref="T:Aspose.BarCode.Generation.Padding" />.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.CaptionUI.Alignment">
      <summary>
            Gets or sets the text <see cref="T:Aspose.BarCode.Generation.TextAlignment">alignment</see> of the caption.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.CaptionUI.Text">
      <summary>
            Gets or sets the content of the caption.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Windows.Forms.CaptionUI.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.Windows.Forms.CaptionUI" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.Windows.Forms.CaptionUI" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.Windows.Forms.CodetextParametersUI">
      <summary>
            Codetext parameters.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.CodetextParametersUI.TwoDDisplayText">
      <summary>
            Text that will be displayed instead of codetext in 2D barcodes.
            Used for: Aztec, Pdf417, DataMatrix, QR, MaxiCode, DotCode
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.CodetextParametersUI.FontMode">
      <summary>
            Specify FontMode. If FontMode is set to Auto, font size will be calculated automatically based on xDimension value.
            It is recommended to use FontMode.Auto especially in AutoSizeMode.Nearest or AutoSizeMode.Interpolation.
            Default value: FontMode.Auto.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.CodetextParametersUI.Font">
      <summary>
            Specify the displaying CodeText's font.
            Default value: Arial 5pt regular.
            Ignored if FontMode is set to FontMode.Auto.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.CodetextParametersUI.Space">
      <summary>
            Space between the CodeText and the BarCode in <see cref="T:Aspose.BarCode.Generation.Unit" /> value.
            Default value: 2pt.
            Ignored for EAN8, EAN13, UPCE, UPCA, ISBN, ISMN, ISSN, UpcaGs1DatabarCoupon.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.CodetextParametersUI.Alignment">
      <summary>
            Gets or sets the alignment of the code text.
            Default value: StringAlignment.Center.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.CodetextParametersUI.Color">
      <summary>
            Specify the displaying CodeText's Color.
            Default value: Color.Black.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.CodetextParametersUI.Location">
      <summary>
            Specify the displaying CodeText Location, set to CodeLocation.None to hide CodeText.
            Default value: CodeLocation.Below.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Windows.Forms.CodetextParametersUI.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.Generation.CodetextParameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.Generation.CodetextParameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.Windows.Forms.DataMatrixParametersUI">
      <summary>
            UI wrapper for <see cref="T:Aspose.BarCode.Generation.DataMatrixParameters" /> class.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.DataMatrixParametersUI.DataMatrixEcc">
      <summary>
            Gets or sets a Datamatrix ECC type.
            Default value: DataMatrixEccType.Ecc200.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.DataMatrixParametersUI.DataMatrixEncodeMode">
      <summary>
            Encode mode of Datamatrix barcode.
            Default value: DataMatrixEncodeMode.Auto.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.DataMatrixParametersUI.Columns">
      <summary>
            Columns count.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.DataMatrixParametersUI.Rows">
      <summary>
            Rows count.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.DataMatrixParametersUI.AspectRatio">
      <summary>
            Height/Width ratio of 2D BarCode module.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.DataMatrixParametersUI.CodeTextEncoding">
      <summary>
            Gets or sets the encoding of codetext.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Windows.Forms.DataMatrixParametersUI.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.Generation.DataMatrixParameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.Generation.DataMatrixParameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.Windows.Forms.Pdf417ParametersUI">
      <summary>
            UI wrapper for <see cref="T:Aspose.BarCode.Generation.Pdf417Parameters" /> class.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.Pdf417ParametersUI.Pdf417CompactionMode">
      <summary>
            Pdf417 symbology type of BarCode's compaction mode.
            Default value: Pdf417CompactionMode.Auto.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.Pdf417ParametersUI.Pdf417ErrorLevel">
      <summary>
            Gets or sets Pdf417 symbology type of BarCode's error correction level
            ranging from level0 to level8, level0 means no error correction info,
            level8 means best error correction which means a larger picture.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.Pdf417ParametersUI.Pdf417Truncate">
      <summary>
            Whether Pdf417 symbology type of BarCode is truncated (to reduce space).
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.Pdf417ParametersUI.Columns">
      <summary>
            Columns count.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.Pdf417ParametersUI.Rows">
      <summary>
            Rows count.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.Pdf417ParametersUI.AspectRatio">
      <summary>
            Height/Width ratio of 2D BarCode module.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.Pdf417ParametersUI.Pdf417MacroFileID">
      <summary>
            Gets or sets macro Pdf417 barcode's file ID.
            Used for MacroPdf417.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.Pdf417ParametersUI.Pdf417MacroSegmentID">
      <summary>
            Gets or sets macro Pdf417 barcode's segment ID, which starts from 0, to MacroSegmentsCount - 1.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.Pdf417ParametersUI.Pdf417MacroSegmentsCount">
      <summary>
            Gets or sets macro Pdf417 barcode segments count.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.Pdf417ParametersUI.CodeTextEncoding">
      <summary>
            Gets or sets the encoding of codetext.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Windows.Forms.Pdf417ParametersUI.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.Generation.Pdf417Parameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.Generation.Pdf417Parameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.Windows.Forms.QrParametersUI">
      <summary>
            UI wrapper for <see cref="T:Aspose.BarCode.Generation.QrParameters" /> class.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.QrParametersUI.QrEncodeMode">
      <summary>
            QR symbology type of BarCode's encoding mode.
            Default value: QREncodeMode.Auto.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.QrParametersUI.QrEncodeType">
      <summary>
            QR / MicroQR selector mode. Select ForceQR for standard QR symbols, Auto for MicroQR.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.QrParametersUI.QrErrorLevel">
      <summary>
             Level of Reed-Solomon error correction for QR barcode.
             From low to high: LevelL, LevelM, LevelQ, LevelH. see QRErrorLevel.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.QrParametersUI.QrVersion">
      <summary>
            Version of QR Code.
            From Version1 to Version40 for QR code and from M1 to M4 for MicroQr.
            Default value is QRVersion.Auto.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.QrParametersUI.AspectRatio">
      <summary>
            Height/Width ratio of 2D BarCode module.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.QrParametersUI.CodeTextEncoding">
      <summary>
            Gets or sets the encoding of codetext.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Windows.Forms.QrParametersUI.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.Generation.QrParameters" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.Generation.QrParameters" />.</returns>
    </member>
    <member name="T:Aspose.BarCode.Windows.Forms.SpecificParametersUI">
      <summary>
            Specific parameters.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.Windows.Forms.SpecificParametersUI.ToString">
      <summary>
            Returns a human-readable string representation of this <see cref="T:Aspose.BarCode.Windows.Forms.SpecificParametersUI" />.
            </summary>
      <returns>A string that represents this <see cref="T:Aspose.BarCode.Windows.Forms.SpecificParametersUI" />.</returns>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.SpecificParametersUI.Postal">
      <summary>
            Gets or sets Postal parameters <see cref="T:Aspose.BarCode.Generation.PostalParameters" />.
            Used for Postnet, Planet.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.SpecificParametersUI.AustralianPost">
      <summary>
            Gets or sets AustralianPost parameters <see cref="T:Aspose.BarCode.Generation.AustralianPostParameters" />.
            Used for AustralianPost.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.SpecificParametersUI.DataBar">
      <summary>
            Gets or sets DataBar parameters <see cref="T:Aspose.BarCode.Generation.DataBarParameters" />.
            Used for DataBar symbologies.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.SpecificParametersUI.Codablock">
      <summary>
            Gets or sets Codablock parameters <see cref="T:Aspose.BarCode.Generation.CodablockParameters" />.
            Used for CodablockF.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.SpecificParametersUI.DataMatrix">
      <summary>
            Gets or sets DataMatrix parameters <see cref="T:Aspose.BarCode.Generation.DataMatrixParameters" />.
            Used for DataMatrix.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.SpecificParametersUI.Code16K">
      <summary>
            Gets or sets Code16K parameters <see cref="T:Aspose.BarCode.Generation.Code16KParameters" />.
            Used for Code16K.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.SpecificParametersUI.DotCode">
      <summary>
            Gets or sets DotCode parameters <see cref="T:Aspose.BarCode.Generation.DotCodeParameters" />.
            Used for DotCode.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.SpecificParametersUI.ITF">
      <summary>
            Gets or sets ITF parameters <see cref="T:Aspose.BarCode.Generation.ITFParameters" />.
            Used for ITF6, ITF14.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.SpecificParametersUI.Pdf417">
      <summary>
            Gets or sets Pdf417 parameters <see cref="T:Aspose.BarCode.Generation.Pdf417Parameters" />.
            Used for Pdf417.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.SpecificParametersUI.QR">
      <summary>
            Gets or sets QR parameters <see cref="T:Aspose.BarCode.Generation.QrParameters" />.
            Used for QR.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.SpecificParametersUI.MaxiCode">
      <summary>
            Gets or sets MaxiCode parameters <see cref="T:Aspose.BarCode.Generation.MaxiCodeParameters" />.
            Used for MaxiCode.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.SpecificParametersUI.Aztec">
      <summary>
            Gets or sets Aztec parameters <see cref="T:Aspose.BarCode.Generation.AztecParameters" />.
            Used for Aztec.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.SpecificParametersUI.Codabar">
      <summary>
            Gets or sets Codabar parameters <see cref="T:Aspose.BarCode.Generation.CodabarParameters" />.
            Used for Codabar.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.SpecificParametersUI.Coupon">
      <summary>
            Gets or sets Coupon parameters <see cref="T:Aspose.BarCode.Generation.CouponParameters" />.
            Used for UpcaGs1DatabarCoupon, UpcaGs1Code128Coupon.
            </summary>
    </member>
    <member name="P:Aspose.BarCode.Windows.Forms.SpecificParametersUI.Supplement">
      <summary>
            Gets or sets Supplement parameters <see cref="T:Aspose.BarCode.Generation.SupplementParameters" />.
            Used for Interleaved2of5, Standard2of5, EAN13, EAN8, UPCA, UPCE, ISBN, ISSN, ISMN.
            </summary>
    </member>
    <member name="T:Aspose.BarCode.WPF.BarcodeGeneratorElement">
      <summary>
            BarCodeGeneratorControl is a WPF control that can be used in a WPF window or page.
            </summary>
    </member>
    <member name="M:Aspose.BarCode.WPF.BarcodeGeneratorElement.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodetextProperty">
      <summary>CodetextProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.Codetext">
      <summary>Data to be encoded, different types of BarCode may have different Codetext length restrictions and different charset.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.AutoSizeModeProperty">
      <summary>AutoSizeModeProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.AutoSizeMode">
      <summary>Specifies the different types of automatic sizing modes.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.EncodeTypeProperty">
      <summary>EncodeTypeProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.EncodeType">
      <summary>BarCode's encode type (symbology).</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.BackColorProperty">
      <summary>BackColorProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.BackColor">
      <summary>Background color of the barcode image.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.ResolutionProperty">
      <summary>ResolutionProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.Resolution">
      <summary>Gets or sets the resolution of the BarCode image. One value for both dimensions.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.XDimensionProperty">
      <summary>XDimensionProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.XDimension">
      <summary>x-dimension is the smallest width of the unit of BarCode bars or spaces. Ignored in AutoSizeMode.Nearest and AutoSizeMode.Interpolation modes.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.BarHeightProperty">
      <summary>BarHeightProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.BarHeight">
      <summary>Height of 1D barcodes' bars in pixels. Ignored in AutoSizeMode.Nearest and AutoSizeMode.Interpolation modes.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.BarColorProperty">
      <summary>BarColorProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.BarColor">
      <summary> Bars color.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.PaddingProperty">
      <summary>PaddingProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.Padding">
      <summary>Barcode paddings.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.ChecksumAlwaysShowProperty">
      <summary>ChecksumAlwaysShowProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.ChecksumAlwaysShow">
      <summary>Always display checksum digit in the human readable text for Code128 and GS1Code128 barcodes.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.IsChecksumEnabledProperty">
      <summary>IsChecksumEnabledProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.IsChecksumEnabled">
      <summary>Enable checksum during generation 1D barcodes.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.EnableEscapeProperty">
      <summary>EnableEscapeProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.EnableEscape">
      <summary>Indicates whether explains the character '\' as an escape character in CodeText property.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.ThrowExceptionWhenCodeTextIncorrectProperty">
      <summary>ThrowExceptionWhenCodeTextIncorrectProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.ThrowExceptionWhenCodeTextIncorrect">
      <summary>Only for 1D barcodes. If codetext is incorrect and value set to true - exception will be thrown. Otherwise codetext will be corrected to match barcode's specification.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.WideNarrowRatioProperty">
      <summary>WideNarrowRatioProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.WideNarrowRatio">
      <summary>Wide bars to Narrow bars ratio.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.FilledBarsProperty">
      <summary>FilledBarsProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.FilledBars">
      <summary>Gets or sets a value indicating whether bars filled.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.BorderVisibleProperty">
      <summary>BorderVisibleProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.BorderVisible">
      <summary>Border visibility.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.BorderWidthProperty">
      <summary>BorderWidthProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.BorderWidth">
      <summary>Border width in pixels.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.BorderDashStyleProperty">
      <summary>BorderDashStyleProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.BorderDashStyle">
      <summary>Border dash style.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.BorderColorProperty">
      <summary>BorderColorProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.BorderColor">
      <summary>Border color.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionAboveTextProperty">
      <summary>CaptionAboveTextProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionAboveText">
      <summary>Caption text.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionAboveFontFamilyProperty">
      <summary>CaptionAboveFontFamilyProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionAboveFontFamily">
      <summary>Caption above font family.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionAboveFontSizeProperty">
      <summary>CaptionAboveFontSizeProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionAboveFontSize">
      <summary>Caption above font size.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionAboveVisibleProperty">
      <summary>CaptionAboveVisibleProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionAboveVisible">
      <summary>Caption above visibility.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionAboveTextColorProperty">
      <summary>CaptionAboveTextColorProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionAboveTextColor">
      <summary>Caption above text color.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionAbovePaddingProperty">
      <summary>CaptionAbovePaddingProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionAbovePadding">
      <summary>Caption above paddings.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionAboveAlignmentProperty">
      <summary>CaptionAboveAlignmentProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionAboveAlignment">
      <summary>Caption above alignment.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionAboveNoWrapProperty">
      <summary>CaptionAboveNoWrapProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionAboveNoWrap">
      <summary>Specify word wraps (line breaks) within text.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionBelowTextProperty">
      <summary>CaptionBelowTextProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionBelowText">
      <summary>Caption text.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionBelowFontFamilyProperty">
      <summary>CaptionBelowFontFamilyProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionBelowFontFamily">
      <summary>Caption below font family.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionBelowFontSizeProperty">
      <summary>CaptionBelowFontSizeProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionBelowFontSize">
      <summary>Caption below font size.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionBelowVisibleProperty">
      <summary>CaptionBelowVisibleProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionBelowVisible">
      <summary>Caption below visibility.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionBelowTextColorProperty">
      <summary>CaptionBelowTextColorProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionBelowTextColor">
      <summary>Caption below text color.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionBelowPaddingProperty">
      <summary>CaptionBelowPaddingProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionBelowPadding">
      <summary>Caption below paddings.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionBelowAlignmentProperty">
      <summary>CaptionBelowAlignmentProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionBelowAlignment">
      <summary>Caption below alignment.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionBelowNoWrapProperty">
      <summary>CaptionBelowNoWrapProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CaptionBelowNoWrap">
      <summary>Specify word wraps (line breaks) within text.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodeTextParametersTwoDDisplayTextProperty">
      <summary>CodeTextParametersTwoDDisplayTextProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodeTextParametersTwoDDisplayText">
      <summary>Text that will be displayed instead of codetext in 2D barcodes.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodeTextParametersFontModeProperty">
      <summary>CodeTextParametersFontModeProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodeTextParametersFontMode">
      <summary>Specify FontMode. If FontMode is set to Auto, font size will be calculated automatically based on xDimension value.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodeTextFontFamilyProperty">
      <summary>CodeTextFontFamilyProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodeTextFontFamily">
      <summary>Codetext font family.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodeTextFontSizeProperty">
      <summary>CodeTextFontSizeProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodeTextFontSize">
      <summary>Codetext font size.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodeTextParametersSpaceProperty">
      <summary>CodeTextParametersSpaceProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodeTextParametersSpace">
      <summary>Space between the CodeText and the BarCode in pixels.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodeTextParametersAlignmentProperty">
      <summary>CodeTextParametersAlignmentProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodeTextParametersAlignment">
      <summary>Codetext alignment.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodeTextParametersColorProperty">
      <summary>CodeTextParametersColorProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodeTextParametersColor">
      <summary>Codetext color.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodeTextParametersLocationProperty">
      <summary>CodeTextParametersLocationProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodeTextParametersLocation">
      <summary>Codetext location.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodeTextParametersNoWrapProperty">
      <summary>CodeTextParametersNoWrapProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodeTextParametersNoWrap">
      <summary>Switches 'no wrap' mode.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.PostalShortBarHeightProperty">
      <summary>PostalShortBarHeightProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.PostalShortBarHeight">
      <summary>Postal short bar height in pixels.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.PatchCodeExtraBarcodeTextProperty">
      <summary>PatchCodeExtraBarcodeTextProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.PatchCodeExtraBarcodeText">
      <summary>Specifies codetext for an extra QR barcode, when PatchCode is generated in page mode.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.PatchCodePatchFormatProperty">
      <summary>PatchCodePatchFormatProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.PatchCodePatchFormat">
      <summary>PatchCode format. Choose PatchOnly to generate single PatchCode. Use page format to generate Patch page with PatchCodes as borders.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.AustralianPostShortBarHeightProperty">
      <summary>AustralianPostShortBarHeightProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.AustralianPostShortBarHeight">
      <summary>AustralianPost short bar height in pixels.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.AustralianPostEncodingTableProperty">
      <summary>AustralianPostEncodingTableProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.AustralianPostEncodingTable">
      <summary>AustralianPost encoding table.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.DataBarColumnsProperty">
      <summary>DataBarColumnsProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.DataBarColumns">
      <summary>DataBar columns count.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.DataBarRowsProperty">
      <summary>DataBarRowsProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.DataBarRows">
      <summary>DataBar rows count.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.DataBarAspectRatioProperty">
      <summary>DataBarAspectRatioProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.DataBarAspectRatio">
      <summary>Aspect ratio.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodablockColumnsProperty">
      <summary>CodablockColumnsProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodablockColumns">
      <summary>Columns count.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodablockRowsProperty">
      <summary>CodablockRowsProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodablockRows">
      <summary>Rows count.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodablockAspectRatioProperty">
      <summary>CodablockAspectRatioProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodablockAspectRatio">
      <summary>Aspect ratio.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.DataMatrixEccProperty">
      <summary>DataMatrixEccProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.DataMatrixEcc">
      <summary>Datamatrix ECC type.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.DataMatrixEncodeModeProperty">
      <summary>DataMatrixEncodeModeProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.DataMatrixEncodeMode">
      <summary>Encode mode.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.DataMatrixColumnsProperty">
      <summary>DataMatrixColumnsProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.DataMatrixColumns">
      <summary>Columns count.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.DataMatrixRowsProperty">
      <summary>DataMatrixRowsProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.DataMatrixRows">
      <summary>Rows count.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.DataMatrixAspectRatioProperty">
      <summary>DataMatrixAspectRatioProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.DataMatrixAspectRatio">
      <summary>Aspect ratio.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.DataMatrixCodeTextEncodingProperty">
      <summary>DataMatrixCodeTextEncodingProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.DataMatrixCodeTextEncoding">
      <summary>Text encoding.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.Code16KAspectRatioProperty">
      <summary>Code16KAspectRatioProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.Code16KAspectRatio">
      <summary>Aspect ratio.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.Code16KQuietZoneLeftCoefProperty">
      <summary>Code16KQuietZoneLeftCoefProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.Code16KQuietZoneLeftCoef">
      <summary>Size of the left quiet zone in xDimension.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.Code16KQuietZoneRightCoefProperty">
      <summary>Code16KQuietZoneRightCoefProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.Code16KQuietZoneRightCoef">
      <summary>Size of the right quiet zone in xDimension.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.DotCodeMaskProperty">
      <summary>DotCodeMaskProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.DotCodeMask">
      <summary>Mask of Dotcode barcode.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.DotCodeAspectRatioProperty">
      <summary>DotCodeAspectRatioProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.DotCodeAspectRatio">
      <summary>Aspect ratio.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.ITFItfBorderThicknessProperty">
      <summary>ITFItfBorderThicknessProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.ITFItfBorderThickness">
      <summary>ITF border thickness in pixels.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.ITFItfBorderTypeProperty">
      <summary>ITFItfBorderTypeProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.ITFItfBorderType">
      <summary>ITF border type.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.ITFQuietZoneCoefProperty">
      <summary>ITFQuietZoneCoefProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.ITFQuietZoneCoef">
      <summary>Size of the quiet zones in xDimension.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.Pdf417CompactionModeProperty">
      <summary>Pdf417CompactionModeProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.Pdf417CompactionMode">
      <summary>Compaction mode.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.Pdf417ErrorLevelProperty">
      <summary>Pdf417ErrorLevelProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.Pdf417ErrorLevel">
      <summary>Error level.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.Pdf417TruncateProperty">
      <summary>Pdf417TruncateProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.Pdf417Truncate">
      <summary>Whether Pdf417 symbology type of BarCode is truncated (to reduce space).</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.Pdf417ColumnsProperty">
      <summary>Pdf417ColumnsProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.Pdf417Columns">
      <summary>Columns count.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.Pdf417RowsProperty">
      <summary>Pdf417RowsProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.Pdf417Rows">
      <summary>Rows count.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.Pdf417AspectRatioProperty">
      <summary>Pdf417AspectRatioProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.Pdf417AspectRatio">
      <summary>Aspect ratio.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.Pdf417MacroFileIDProperty">
      <summary>Pdf417MacroFileIDProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.Pdf417MacroFileID">
      <summary>Macro Pdf417 barcode's file ID.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.Pdf417MacroSegmentIDProperty">
      <summary>Pdf417MacroSegmentIDProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.Pdf417MacroSegmentID">
      <summary>Macro Pdf417 barcode's segment ID.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.Pdf417MacroSegmentsCountProperty">
      <summary>Pdf417MacroSegmentsCountProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.Pdf417MacroSegmentsCount">
      <summary>Segments count.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.Pdf417CodeTextEncodingProperty">
      <summary>Pdf417CodeTextEncodingProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.Pdf417CodeTextEncoding">
      <summary>Text encoding.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.Pdf417ECIEncodingProperty">
      <summary>Pdf417ECIEncodingProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.Pdf417ECIEncoding">
      <summary>ECI encoding.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.Pdf417IsReaderInitializationProperty">
      <summary>Pdf417IsReaderInitializationProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.Pdf417IsReaderInitialization">
      <summary>Used to instruct the reader to interpret the data contained within the symbol as programming for reader initialization.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.QRECIEncodingProperty">
      <summary>QRECIEncodingProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.QRECIEncoding">
      <summary>ECI encoding.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.QREncodeModeProperty">
      <summary>QREncodeModeProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.QREncodeMode">
      <summary>Encode mode.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.QREncodeTypeProperty">
      <summary>QREncodeTypeProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.QREncodeType">
      <summary>Encode type.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.QRErrorLevelProperty">
      <summary>QRErrorLevelProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.QRErrorLevel">
      <summary>Error level.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.QRVersionProperty">
      <summary>QRVersionProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.QRVersion">
      <summary>QR version.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.QRAspectRatioProperty">
      <summary>QRAspectRatioProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.QRAspectRatio">
      <summary>Aspect ratio.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.QRCodeTextEncodingProperty">
      <summary>QRCodeTextEncodingProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.QRCodeTextEncoding">
      <summary>Text encoding.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.SupplementSupplementDataProperty">
      <summary>SupplementSupplementDataProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.SupplementSupplementData">
      <summary>Supplement codetext.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.SupplementSupplementSpaceProperty">
      <summary>SupplementSupplementSpaceProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.SupplementSupplementSpace">
      <summary>Space between barcode and supplement in pixels.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.MaxiCodeEncodeModeProperty">
      <summary>MaxiCodeEncodeModeProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.MaxiCodeEncodeMode">
      <summary>Encode mode.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.MaxiCodeAspectRatioProperty">
      <summary>MaxiCodeAspectRatioProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.MaxiCodeAspectRatio">
      <summary>Aspect ratio.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.AztecErrorLevelProperty">
      <summary>AztecErrorLevelProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.AztecErrorLevel">
      <summary>Error level.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.AztecSymbolModeProperty">
      <summary>AztecSymbolModeProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.AztecSymbolMode">
      <summary>Aztec symbol mode.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.AztecAspectRatioProperty">
      <summary>AztecAspectRatioProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.AztecAspectRatio">
      <summary>Aspect ratio.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.AztecCodeTextEncodingProperty">
      <summary>AztecCodeTextEncodingProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.AztecCodeTextEncoding">
      <summary>Text encoding.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodabarChecksumModeProperty">
      <summary>CodabarChecksumModeProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodabarChecksumMode">
      <summary>Checksum mode.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodabarStartSymbolProperty">
      <summary>CodabarStartSymbolProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodabarStartSymbol">
      <summary>Start symbol.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodabarStopSymbolProperty">
      <summary>CodabarStopSymbolProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CodabarStopSymbol">
      <summary>Stop symbol.</summary>
    </member>
    <member name="F:Aspose.BarCode.WPF.BarcodeGeneratorElement.CouponSupplementSpaceProperty">
      <summary>CouponSupplementSpaceProperty</summary>
    </member>
    <member name="P:Aspose.BarCode.WPF.BarcodeGeneratorElement.CouponSupplementSpace">
      <summary>Space between barcode and supplement in pixels.</summary>
    </member>
    <member name="M:Aspose.BarCode.WPF.BarcodeGeneratorElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
      <summary>
            Sets isDirty when render size is changed
            </summary>
      <param name="info">SizeChangedInfo object</param>
    </member>
    <member name="M:Aspose.BarCode.WPF.BarcodeGeneratorElement.MeasureOverride(System.Windows.Size)">
      <summary>
            Returns desired size
            </summary>
      <param name="availableSize">Available size</param>
      <returns>Desired size</returns>
    </member>
    <member name="M:Aspose.BarCode.WPF.BarcodeGeneratorElement.OnRender(System.Windows.Media.DrawingContext)">
      <summary>
            Render BarCode image on screen
            </summary>
      <param name="dc">the drawing context</param>
    </member>
    <member name="M:Aspose.BarCode.WPF.BarcodeGeneratorElement.ToString">
      <summary>
            String representation of the BarcodeGenerator class
            </summary>
      <returns>BarCode: SymbologyType: CodeText</returns>
    </member>
    <member name="T:Aspose.BarCode.WPF.NamespaceDoc">
      <summary>
            The <b>Aspose.BarCode.WPF</b> contains tools for the 1D/2D barcodes generation and drawing.
            </summary>
    </member>
  </members>
</doc>